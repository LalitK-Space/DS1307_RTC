
DS1307_RTC_Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027d4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b8  08002984  08002984  00012984  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b3c  08002b3c  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  08002b3c  08002b3c  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002b3c  08002b3c  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b3c  08002b3c  00012b3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b40  08002b40  00012b40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08002b44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020080  2**0
                  CONTENTS
 10 .bss          0000011c  20000080  20000080  00020080  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000019c  2000019c  00020080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 13 .debug_info   000022b4  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000088f  00000000  00000000  00022364  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000270  00000000  00000000  00022bf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000208  00000000  00000000  00022e68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000031d5  00000000  00000000  00023070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000302f  00000000  00000000  00026245  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000b94f  00000000  00000000  00029274  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00034bc3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000014a8  00000000  00000000  00034c14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000080 	.word	0x20000080
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800296c 	.word	0x0800296c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000084 	.word	0x20000084
 80001ec:	0800296c 	.word	0x0800296c

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <DS1307_Init>:
 * Parameter 1	:	none (void)
 * Return Type	:	uint8_t ()
 * Note		:	if returns 0, meaning CH is SET (Clock halt is removed, clock is enabled).
 * ------------------------------------------------------------------------------------------------------ */
uint8_t DS1307_Init(void)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b082      	sub	sp, #8
 80002a4:	af00      	add	r7, sp, #0
	/* -Step 1. Initialize I2C Pins- */
	DS1307_I2C_PinConfig();
 80002a6:	f000 f8ad 	bl	8000404 <DS1307_I2C_PinConfig>

	/* -Step 2. Initialize I2C Peripheral- */
	DS1307_I2C_Config();
 80002aa:	f000 f8e7 	bl	800047c <DS1307_I2C_Config>

	/* -Step 3. Enable I2C Peripheral- */
	I2C_PeripheralControl(DS1307_I2C_Peripheral, ENABLE);
 80002ae:	2101      	movs	r1, #1
 80002b0:	4809      	ldr	r0, [pc, #36]	; (80002d8 <DS1307_Init+0x38>)
 80002b2:	f000 fe16 	bl	8000ee2 <I2C_PeripheralControl>
	/*
	 * Address: 0x00 [Seconds Register]
	 * Bit[7] : CH (Clock halt)
	 * Write 0 to Enable clock
	 * */
	DS1307_Write(0x00, DS1307_SECONDS_ADDR);
 80002b6:	2100      	movs	r1, #0
 80002b8:	2000      	movs	r0, #0
 80002ba:	f000 f8f9 	bl	80004b0 <DS1307_Write>

	/* -Step 5. Ensure CH bit is Cleared (Clock is Enabled)- */
	uint8_t CH_State = DS1307_Read(DS1307_SECONDS_ADDR);
 80002be:	2000      	movs	r0, #0
 80002c0:	f000 f912 	bl	80004e8 <DS1307_Read>
 80002c4:	4603      	mov	r3, r0
 80002c6:	71fb      	strb	r3, [r7, #7]

	/* -Step 6. Return CH State (>> 7 because 7th Bit in Time-Keeper Register)- */
	return ((CH_State >> 7) & 0x1);
 80002c8:	79fb      	ldrb	r3, [r7, #7]
 80002ca:	09db      	lsrs	r3, r3, #7
 80002cc:	b2db      	uxtb	r3, r3
}
 80002ce:	4618      	mov	r0, r3
 80002d0:	3708      	adds	r7, #8
 80002d2:	46bd      	mov	sp, r7
 80002d4:	bd80      	pop	{r7, pc}
 80002d6:	bf00      	nop
 80002d8:	40005400 	.word	0x40005400

080002dc <DS1307_Get_Current_Time>:
 * Parameter 1	:	Handle pointer variable
 * Return Type	:	none (void)
 * Note		:	Read from DS1307 Registers [Registers: seconds, minutes, and Hours]
 * ------------------------------------------------------------------------------------------------------ */
void DS1307_Get_Current_Time(RTC_Time_h *pRTCTimehandle)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b084      	sub	sp, #16
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	6078      	str	r0, [r7, #4]
	/* -Step 1. Get Seconds- */
	uint8_t seconds;

	// a. Read from Seconds Register
	seconds = DS1307_Read(DS1307_SECONDS_ADDR);
 80002e4:	2000      	movs	r0, #0
 80002e6:	f000 f8ff 	bl	80004e8 <DS1307_Read>
 80002ea:	4603      	mov	r3, r0
 80002ec:	73fb      	strb	r3, [r7, #15]

	// b. Make sure 7th bit is Cleared (CH) [if 1, Clock is Halted] [NOT required in data]
	seconds &= ~(1 << 7);
 80002ee:	7bfb      	ldrb	r3, [r7, #15]
 80002f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80002f4:	73fb      	strb	r3, [r7, #15]

	// c. Convert BCD (values from register) to Binary
	seconds = BCD_to_Binary(seconds);
 80002f6:	7bfb      	ldrb	r3, [r7, #15]
 80002f8:	4618      	mov	r0, r3
 80002fa:	f000 f913 	bl	8000524 <BCD_to_Binary>
 80002fe:	4603      	mov	r3, r0
 8000300:	73fb      	strb	r3, [r7, #15]

	// d. Copy into seconds member element
	pRTCTimehandle->seconds = seconds;
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	7bfa      	ldrb	r2, [r7, #15]
 8000306:	701a      	strb	r2, [r3, #0]

	/* -Step 2. Get Minutes- */
	uint8_t minutes;

	// a. Read from Minutes Register
	minutes = DS1307_Read(DS1307_MINUTES_ADDR);
 8000308:	2001      	movs	r0, #1
 800030a:	f000 f8ed 	bl	80004e8 <DS1307_Read>
 800030e:	4603      	mov	r3, r0
 8000310:	73bb      	strb	r3, [r7, #14]

	// b. Convert BCD (values from register) to Binary
	minutes = BCD_to_Binary(minutes);
 8000312:	7bbb      	ldrb	r3, [r7, #14]
 8000314:	4618      	mov	r0, r3
 8000316:	f000 f905 	bl	8000524 <BCD_to_Binary>
 800031a:	4603      	mov	r3, r0
 800031c:	73bb      	strb	r3, [r7, #14]

	// c. Copy into minutes member element
	pRTCTimehandle->minutes = minutes;
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	7bba      	ldrb	r2, [r7, #14]
 8000322:	705a      	strb	r2, [r3, #1]

	/* -Step 3. Get Hours- */
	uint8_t hours;

	// a. Read from Hours Register
	hours = DS1307_Read(DS1307_HOURS_ADDR);
 8000324:	2002      	movs	r0, #2
 8000326:	f000 f8df 	bl	80004e8 <DS1307_Read>
 800032a:	4603      	mov	r3, r0
 800032c:	737b      	strb	r3, [r7, #13]

	// b. Checks for Bit[5]: AM/PM and Bit[6]: Time Format
	if (hours & (1 << 6))
 800032e:	7b7b      	ldrb	r3, [r7, #13]
 8000330:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000334:	2b00      	cmp	r3, #0
 8000336:	d00c      	beq.n	8000352 <DS1307_Get_Current_Time+0x76>
	{
		// Bit[6] is SET -> 12-Hour Format

		// Check for AM or PM
		if (hours & (1 << 5))
 8000338:	7b7b      	ldrb	r3, [r7, #13]
 800033a:	f003 0320 	and.w	r3, r3, #32
 800033e:	2b00      	cmp	r3, #0
 8000340:	d003      	beq.n	800034a <DS1307_Get_Current_Time+0x6e>
		{
			// Bit[5] is HIGH -> PM
			pRTCTimehandle->timeFormat = TIME_FORMAT_12H_PM;
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	2201      	movs	r2, #1
 8000346:	70da      	strb	r2, [r3, #3]
 8000348:	e006      	b.n	8000358 <DS1307_Get_Current_Time+0x7c>
		}
		else
		{
			// Bit[5] is LOW -> AM
			pRTCTimehandle->timeFormat = TIME_FORMAT_12H_AM;
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	2200      	movs	r2, #0
 800034e:	70da      	strb	r2, [r3, #3]
 8000350:	e002      	b.n	8000358 <DS1307_Get_Current_Time+0x7c>

	}
	else
	{
		// Bit[6] is Cleared -> 24-Hour Format
		pRTCTimehandle->timeFormat = TIME_FORMAT_24H;
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	2202      	movs	r2, #2
 8000356:	70da      	strb	r2, [r3, #3]
	}

	// c. Discard Bit[5] and Bit[6] [NOT required in data]
	hours &= ~(1 << 5);
 8000358:	7b7b      	ldrb	r3, [r7, #13]
 800035a:	f023 0320 	bic.w	r3, r3, #32
 800035e:	737b      	strb	r3, [r7, #13]
	hours &= ~(1 << 6);
 8000360:	7b7b      	ldrb	r3, [r7, #13]
 8000362:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000366:	737b      	strb	r3, [r7, #13]

	// d. Convert BCD (values from register) to Binary
	hours = BCD_to_Binary(hours);
 8000368:	7b7b      	ldrb	r3, [r7, #13]
 800036a:	4618      	mov	r0, r3
 800036c:	f000 f8da 	bl	8000524 <BCD_to_Binary>
 8000370:	4603      	mov	r3, r0
 8000372:	737b      	strb	r3, [r7, #13]

	// d. Copy into Hours member element
	pRTCTimehandle->hours = hours;
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	7b7a      	ldrb	r2, [r7, #13]
 8000378:	709a      	strb	r2, [r3, #2]

}
 800037a:	bf00      	nop
 800037c:	3710      	adds	r7, #16
 800037e:	46bd      	mov	sp, r7
 8000380:	bd80      	pop	{r7, pc}

08000382 <DS1307_Get_Current_Date>:
 * Parameter 1	:	Handle pointer variable
 * Return Type	:	none (void)
 * Note		:	Read from DS1307 Registers [Registers: Date, Day, Month, and year]
 * ------------------------------------------------------------------------------------------------------ */
void DS1307_Get_Current_Date(RTC_Date_h *pRTCDatehandle)
{
 8000382:	b580      	push	{r7, lr}
 8000384:	b084      	sub	sp, #16
 8000386:	af00      	add	r7, sp, #0
 8000388:	6078      	str	r0, [r7, #4]
	/* -Step 1. Get Date- */
	uint8_t date;

	// a. Read from Date Register
	date = DS1307_Read(DS1307_DATE_ADDR);
 800038a:	2004      	movs	r0, #4
 800038c:	f000 f8ac 	bl	80004e8 <DS1307_Read>
 8000390:	4603      	mov	r3, r0
 8000392:	73fb      	strb	r3, [r7, #15]

	// b. Convert BCD (values from register) to Binary
	date = BCD_to_Binary(date);
 8000394:	7bfb      	ldrb	r3, [r7, #15]
 8000396:	4618      	mov	r0, r3
 8000398:	f000 f8c4 	bl	8000524 <BCD_to_Binary>
 800039c:	4603      	mov	r3, r0
 800039e:	73fb      	strb	r3, [r7, #15]

	// c. Copy into Date member element
	pRTCDatehandle->date = date;
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	7bfa      	ldrb	r2, [r7, #15]
 80003a4:	701a      	strb	r2, [r3, #0]

	/* -Step 2. Get Day- */
	uint8_t day;

	// a. Read from Day Register
	day = DS1307_Read(DS1307_DAY_ADDR);
 80003a6:	2003      	movs	r0, #3
 80003a8:	f000 f89e 	bl	80004e8 <DS1307_Read>
 80003ac:	4603      	mov	r3, r0
 80003ae:	73bb      	strb	r3, [r7, #14]

	// b. Convert BCD (values from register) to Binary
	day = BCD_to_Binary(day);
 80003b0:	7bbb      	ldrb	r3, [r7, #14]
 80003b2:	4618      	mov	r0, r3
 80003b4:	f000 f8b6 	bl	8000524 <BCD_to_Binary>
 80003b8:	4603      	mov	r3, r0
 80003ba:	73bb      	strb	r3, [r7, #14]

	// c. Copy into Day member element
	pRTCDatehandle->day = day;
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	7bba      	ldrb	r2, [r7, #14]
 80003c0:	705a      	strb	r2, [r3, #1]

	/* -Step 3. Get Month- */
	uint8_t month;

	// a. Read from Month Register
	month = DS1307_Read(DS1307_MONTH_ADDR);
 80003c2:	2005      	movs	r0, #5
 80003c4:	f000 f890 	bl	80004e8 <DS1307_Read>
 80003c8:	4603      	mov	r3, r0
 80003ca:	737b      	strb	r3, [r7, #13]

	// b. Convert BCD (values from register) to Binary
	month = BCD_to_Binary(month);
 80003cc:	7b7b      	ldrb	r3, [r7, #13]
 80003ce:	4618      	mov	r0, r3
 80003d0:	f000 f8a8 	bl	8000524 <BCD_to_Binary>
 80003d4:	4603      	mov	r3, r0
 80003d6:	737b      	strb	r3, [r7, #13]

	// c. Copy into Month member element
	pRTCDatehandle->month = month;
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	7b7a      	ldrb	r2, [r7, #13]
 80003dc:	709a      	strb	r2, [r3, #2]

	/* -Step 4. Get Year- */
	uint8_t year;

	// a. Read from Month Register
	year = DS1307_Read(DS1307_YEAR_ADDR);
 80003de:	2006      	movs	r0, #6
 80003e0:	f000 f882 	bl	80004e8 <DS1307_Read>
 80003e4:	4603      	mov	r3, r0
 80003e6:	733b      	strb	r3, [r7, #12]

	// b. Convert BCD (values from register) to Binary
	year = BCD_to_Binary(year);
 80003e8:	7b3b      	ldrb	r3, [r7, #12]
 80003ea:	4618      	mov	r0, r3
 80003ec:	f000 f89a 	bl	8000524 <BCD_to_Binary>
 80003f0:	4603      	mov	r3, r0
 80003f2:	733b      	strb	r3, [r7, #12]

	// c. Copy into Year member element
	pRTCDatehandle->year = year;
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	7b3a      	ldrb	r2, [r7, #12]
 80003f8:	70da      	strb	r2, [r3, #3]

}
 80003fa:	bf00      	nop
 80003fc:	3710      	adds	r7, #16
 80003fe:	46bd      	mov	sp, r7
 8000400:	bd80      	pop	{r7, pc}
	...

08000404 <DS1307_I2C_PinConfig>:
 * Parameter 1	:	none (void)
 * Return Type	:	none (void)
 * Note		: To initialize GPIO to behave as I2C Pins (Alternate Functionality)
 * ------------------------------------------------------------------------------------------------------ */
static void DS1307_I2C_PinConfig(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b086      	sub	sp, #24
 8000408:	af00      	add	r7, sp, #0
	// GPIO Handle Variables
	GPIO_Handle_t I2C_SDA;
	GPIO_Handle_t I2C_SCL;

	/* -Initialize the handle variable to ZERO, in order to prevent registers to have random values- */
	memset(&I2C_SDA,0,sizeof(I2C_SDA));
 800040a:	f107 030c 	add.w	r3, r7, #12
 800040e:	220c      	movs	r2, #12
 8000410:	2100      	movs	r1, #0
 8000412:	4618      	mov	r0, r3
 8000414:	f000 fffc 	bl	8001410 <memset>
	memset(&I2C_SCL,0,sizeof(I2C_SCL));
 8000418:	463b      	mov	r3, r7
 800041a:	220c      	movs	r2, #12
 800041c:	2100      	movs	r1, #0
 800041e:	4618      	mov	r0, r3
 8000420:	f000 fff6 	bl	8001410 <memset>


	/* -Initialize I2C SDA Line- */

	// Select Port
	I2C_SDA.pGPIOx = DS1307_I2C_GPIO_PORT;
 8000424:	4b14      	ldr	r3, [pc, #80]	; (8000478 <DS1307_I2C_PinConfig+0x74>)
 8000426:	60fb      	str	r3, [r7, #12]

	// Pin Configuration: PIN MODE
	I2C_SDA.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFUNC;
 8000428:	2302      	movs	r3, #2
 800042a:	747b      	strb	r3, [r7, #17]

	// Pin Configuration: Alternate Functionality
	I2C_SDA.GPIO_PinConfig.GPIO_PinAltFuncMode = 4;	// Alternate Functionality Mode: 4
 800042c:	2304      	movs	r3, #4
 800042e:	757b      	strb	r3, [r7, #21]

	// Pin Configuration: PIN NUMBER
	I2C_SDA.GPIO_PinConfig.GPIO_PinNumber = DS1307_I2C_SCL_PIN; // Defined in DS1307_RTC.h
 8000430:	2306      	movs	r3, #6
 8000432:	743b      	strb	r3, [r7, #16]

	// Pin Configuration: Output Type
	I2C_SDA.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;	// Open Drain
 8000434:	2301      	movs	r3, #1
 8000436:	753b      	strb	r3, [r7, #20]

	// Pin Configuration: Internal Pull-up/down
	I2C_SDA.GPIO_PinConfig.GPIO_PinPuPdControl = DS1307_I2C_PUPD; // Defined in DS1307_RTC.h
 8000438:	2301      	movs	r3, #1
 800043a:	74fb      	strb	r3, [r7, #19]

	// Pin Configuration: Pin Speed
	I2C_SDA.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_VERY_HIGH;
 800043c:	2303      	movs	r3, #3
 800043e:	74bb      	strb	r3, [r7, #18]

	/* -Configure GPIO as I2Cx_SDA- */
	GPIO_Init(&I2C_SDA);
 8000440:	f107 030c 	add.w	r3, r7, #12
 8000444:	4618      	mov	r0, r3
 8000446:	f000 f975 	bl	8000734 <GPIO_Init>

	/* -Initialize I2C SCL Line- */

	// Select Port
	I2C_SCL.pGPIOx = DS1307_I2C_GPIO_PORT;
 800044a:	4b0b      	ldr	r3, [pc, #44]	; (8000478 <DS1307_I2C_PinConfig+0x74>)
 800044c:	603b      	str	r3, [r7, #0]

	// Pin Configuration: PIN MODE
	I2C_SCL.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFUNC;
 800044e:	2302      	movs	r3, #2
 8000450:	717b      	strb	r3, [r7, #5]

	// Pin Configuration: Alternate Functionality
	I2C_SCL.GPIO_PinConfig.GPIO_PinAltFuncMode = 4;	// Alternate Functionality Mode: 4
 8000452:	2304      	movs	r3, #4
 8000454:	727b      	strb	r3, [r7, #9]

	// Pin Configuration: PIN NUMBER
	I2C_SCL.GPIO_PinConfig.GPIO_PinNumber = DS1307_I2C_SDA_PIN; // Defined in DS1307_RTC.h
 8000456:	2307      	movs	r3, #7
 8000458:	713b      	strb	r3, [r7, #4]

	// Pin Configuration: Output Type
	I2C_SCL.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;	// Open Drain
 800045a:	2301      	movs	r3, #1
 800045c:	723b      	strb	r3, [r7, #8]

	// Pin Configuration: Internal Pull-up/down
	I2C_SCL.GPIO_PinConfig.GPIO_PinPuPdControl = DS1307_I2C_PUPD; // Defined in DS1307_RTC.h
 800045e:	2301      	movs	r3, #1
 8000460:	71fb      	strb	r3, [r7, #7]

	// Pin Configuration: Pin Speed
	I2C_SCL.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_VERY_HIGH;
 8000462:	2303      	movs	r3, #3
 8000464:	71bb      	strb	r3, [r7, #6]

	/* -Configure GPIO as I2Cx_SCl- */
	GPIO_Init(&I2C_SCL);
 8000466:	463b      	mov	r3, r7
 8000468:	4618      	mov	r0, r3
 800046a:	f000 f963 	bl	8000734 <GPIO_Init>

}
 800046e:	bf00      	nop
 8000470:	3718      	adds	r7, #24
 8000472:	46bd      	mov	sp, r7
 8000474:	bd80      	pop	{r7, pc}
 8000476:	bf00      	nop
 8000478:	40020400 	.word	0x40020400

0800047c <DS1307_I2C_Config>:
 * Parameter 1	:	none (void)
 * Return Type	:	none (void)
 * Note		: To initialize I2C Peripheral
 * ------------------------------------------------------------------------------------------------------ */
static void DS1307_I2C_Config(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	af00      	add	r7, sp, #0
	/* -- Base Address of the DS1307 I2C Peripheral -- */
	DS1307_I2CHandle.pI2Cx = DS1307_I2C_Peripheral;		// Defined in DS1307_RTC.h
 8000480:	4b08      	ldr	r3, [pc, #32]	; (80004a4 <DS1307_I2C_Config+0x28>)
 8000482:	4a09      	ldr	r2, [pc, #36]	; (80004a8 <DS1307_I2C_Config+0x2c>)
 8000484:	601a      	str	r2, [r3, #0]

	/* -- Peripheral Configuration -- */
	DS1307_I2CHandle.I2C_Config.I2C_ACK_Control	 =	I2C_ACK_ENABLE;   	// Enable ACKing
 8000486:	4b07      	ldr	r3, [pc, #28]	; (80004a4 <DS1307_I2C_Config+0x28>)
 8000488:	2201      	movs	r2, #1
 800048a:	725a      	strb	r2, [r3, #9]
	DS1307_I2CHandle.I2C_Config.I2C_Device_Address =  DS1307_I2C_ADDR;	// Defined in DS1307_RTC.h
 800048c:	4b05      	ldr	r3, [pc, #20]	; (80004a4 <DS1307_I2C_Config+0x28>)
 800048e:	2268      	movs	r2, #104	; 0x68
 8000490:	721a      	strb	r2, [r3, #8]
	DS1307_I2CHandle.I2C_Config.I2C_SCL_Speed	 =  	I2C_SCL_SPEED_SM;	// SCL Speed (Standard)
 8000492:	4b04      	ldr	r3, [pc, #16]	; (80004a4 <DS1307_I2C_Config+0x28>)
 8000494:	4a05      	ldr	r2, [pc, #20]	; (80004ac <DS1307_I2C_Config+0x30>)
 8000496:	605a      	str	r2, [r3, #4]

	/* -- Initialize the I2C Peripheral -- */
	I2C_Init(&DS1307_I2CHandle);
 8000498:	4802      	ldr	r0, [pc, #8]	; (80004a4 <DS1307_I2C_Config+0x28>)
 800049a:	f000 fb47 	bl	8000b2c <I2C_Init>


}
 800049e:	bf00      	nop
 80004a0:	bd80      	pop	{r7, pc}
 80004a2:	bf00      	nop
 80004a4:	2000009c 	.word	0x2000009c
 80004a8:	40005400 	.word	0x40005400
 80004ac:	000186a0 	.word	0x000186a0

080004b0 <DS1307_Write>:
 * Parameter 2	:	Register Address (where to write) (uint8_t)
 * Return Type	:	none (void)
 * Note		: To write into DS1307 Registers
 * ------------------------------------------------------------------------------------------------------ */
static void DS1307_Write(uint8_t value, uint8_t RegAddress)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b086      	sub	sp, #24
 80004b4:	af02      	add	r7, sp, #8
 80004b6:	4603      	mov	r3, r0
 80004b8:	460a      	mov	r2, r1
 80004ba:	71fb      	strb	r3, [r7, #7]
 80004bc:	4613      	mov	r3, r2
 80004be:	71bb      	strb	r3, [r7, #6]
	uint8_t TxData[2];

	TxData[0] = RegAddress;		// Send First [Device Requirement (Data sheet)]
 80004c0:	79bb      	ldrb	r3, [r7, #6]
 80004c2:	733b      	strb	r3, [r7, #12]
	TxData[1] = value;
 80004c4:	79fb      	ldrb	r3, [r7, #7]
 80004c6:	737b      	strb	r3, [r7, #13]

	// I2C Send Data
	I2C_MasterSendData(&DS1307_I2CHandle, TxData,2,DS1307_I2C_ADDR,I2C_REPEATED_START_DI);
 80004c8:	f107 010c 	add.w	r1, r7, #12
 80004cc:	2300      	movs	r3, #0
 80004ce:	9300      	str	r3, [sp, #0]
 80004d0:	2368      	movs	r3, #104	; 0x68
 80004d2:	2202      	movs	r2, #2
 80004d4:	4803      	ldr	r0, [pc, #12]	; (80004e4 <DS1307_Write+0x34>)
 80004d6:	f000 fbdf 	bl	8000c98 <I2C_MasterSendData>

}
 80004da:	bf00      	nop
 80004dc:	3710      	adds	r7, #16
 80004de:	46bd      	mov	sp, r7
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	bf00      	nop
 80004e4:	2000009c 	.word	0x2000009c

080004e8 <DS1307_Read>:
 * Parameter 1	:	Register Address (where to read) (uint8_t)
 * Return Type	:	register value (uint8_t)
 * Note		: To read from DS1307 Registers
 * ------------------------------------------------------------------------------------------------------ */
static uint8_t DS1307_Read(uint8_t RegAddress)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b086      	sub	sp, #24
 80004ec:	af02      	add	r7, sp, #8
 80004ee:	4603      	mov	r3, r0
 80004f0:	71fb      	strb	r3, [r7, #7]
	 * > Then, Read operation (slave will transmit data from that address)
	 *
	 * */

	// Send desired address to read
	I2C_MasterSendData(&DS1307_I2CHandle, &RegAddress, 1, DS1307_I2C_ADDR, I2C_REPEATED_START_DI);
 80004f2:	1df9      	adds	r1, r7, #7
 80004f4:	2300      	movs	r3, #0
 80004f6:	9300      	str	r3, [sp, #0]
 80004f8:	2368      	movs	r3, #104	; 0x68
 80004fa:	2201      	movs	r2, #1
 80004fc:	4808      	ldr	r0, [pc, #32]	; (8000520 <DS1307_Read+0x38>)
 80004fe:	f000 fbcb 	bl	8000c98 <I2C_MasterSendData>

	// I2C Read
	I2C_MasterReceiveData(&DS1307_I2CHandle, &RxData, 1, DS1307_I2C_ADDR, I2C_REPEATED_START_DI);
 8000502:	f107 010f 	add.w	r1, r7, #15
 8000506:	2300      	movs	r3, #0
 8000508:	9300      	str	r3, [sp, #0]
 800050a:	2368      	movs	r3, #104	; 0x68
 800050c:	2201      	movs	r2, #1
 800050e:	4804      	ldr	r0, [pc, #16]	; (8000520 <DS1307_Read+0x38>)
 8000510:	f000 fc25 	bl	8000d5e <I2C_MasterReceiveData>

	return RxData;
 8000514:	7bfb      	ldrb	r3, [r7, #15]

}
 8000516:	4618      	mov	r0, r3
 8000518:	3710      	adds	r7, #16
 800051a:	46bd      	mov	sp, r7
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	2000009c 	.word	0x2000009c

08000524 <BCD_to_Binary>:
 * Parameter 1	:	value (uint8_t)
 * Return Type	:	Binary equivalent of provided BCD value.(uint8_t)
 * Note		:	Converts BCD values (returned by I2C Read operation) from DS1307 Registers into Binary format.
 * ------------------------------------------------------------------------------------------------------ */
static uint8_t BCD_to_Binary(uint8_t value)
{
 8000524:	b480      	push	{r7}
 8000526:	b085      	sub	sp, #20
 8000528:	af00      	add	r7, sp, #0
 800052a:	4603      	mov	r3, r0
 800052c:	71fb      	strb	r3, [r7, #7]
	 * */
	uint8_t x;
	uint8_t y;
	uint8_t Binary;

	x = (uint8_t) ((value >> 4) * 10);
 800052e:	79fb      	ldrb	r3, [r7, #7]
 8000530:	091b      	lsrs	r3, r3, #4
 8000532:	b2db      	uxtb	r3, r3
 8000534:	461a      	mov	r2, r3
 8000536:	0092      	lsls	r2, r2, #2
 8000538:	4413      	add	r3, r2
 800053a:	005b      	lsls	r3, r3, #1
 800053c:	73fb      	strb	r3, [r7, #15]
	y = (value & (uint8_t) 0x0F);			// Mask Bits[7:4] (they are x) and extract bits[3:0] -> y
 800053e:	79fb      	ldrb	r3, [r7, #7]
 8000540:	f003 030f 	and.w	r3, r3, #15
 8000544:	73bb      	strb	r3, [r7, #14]

	Binary = x + y;
 8000546:	7bfa      	ldrb	r2, [r7, #15]
 8000548:	7bbb      	ldrb	r3, [r7, #14]
 800054a:	4413      	add	r3, r2
 800054c:	737b      	strb	r3, [r7, #13]

	return Binary;
 800054e:	7b7b      	ldrb	r3, [r7, #13]

}
 8000550:	4618      	mov	r0, r3
 8000552:	3714      	adds	r7, #20
 8000554:	46bd      	mov	sp, r7
 8000556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055a:	4770      	bx	lr

0800055c <GPIO_PeriClockControl>:
 * Parameter 2	:	ENABLE or DISABLE Macro
 * Return Type	:	none (void)
 * Note		:
 * ------------------------------------------------------------------------------------------------------ */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 800055c:	b480      	push	{r7}
 800055e:	b083      	sub	sp, #12
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
 8000564:	460b      	mov	r3, r1
 8000566:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE)
 8000568:	78fb      	ldrb	r3, [r7, #3]
 800056a:	2b01      	cmp	r3, #1
 800056c:	d162      	bne.n	8000634 <GPIO_PeriClockControl+0xd8>
	{
		if (pGPIOx == GPIOA)
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	4a66      	ldr	r2, [pc, #408]	; (800070c <GPIO_PeriClockControl+0x1b0>)
 8000572:	4293      	cmp	r3, r2
 8000574:	d106      	bne.n	8000584 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 8000576:	4b66      	ldr	r3, [pc, #408]	; (8000710 <GPIO_PeriClockControl+0x1b4>)
 8000578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057a:	4a65      	ldr	r2, [pc, #404]	; (8000710 <GPIO_PeriClockControl+0x1b4>)
 800057c:	f043 0301 	orr.w	r3, r3, #1
 8000580:	6313      	str	r3, [r2, #48]	; 0x30
				// Meh
			}
		}

	}
}
 8000582:	e0bc      	b.n	80006fe <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOB)
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	4a63      	ldr	r2, [pc, #396]	; (8000714 <GPIO_PeriClockControl+0x1b8>)
 8000588:	4293      	cmp	r3, r2
 800058a:	d106      	bne.n	800059a <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 800058c:	4b60      	ldr	r3, [pc, #384]	; (8000710 <GPIO_PeriClockControl+0x1b4>)
 800058e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000590:	4a5f      	ldr	r2, [pc, #380]	; (8000710 <GPIO_PeriClockControl+0x1b4>)
 8000592:	f043 0302 	orr.w	r3, r3, #2
 8000596:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000598:	e0b1      	b.n	80006fe <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOC)
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	4a5e      	ldr	r2, [pc, #376]	; (8000718 <GPIO_PeriClockControl+0x1bc>)
 800059e:	4293      	cmp	r3, r2
 80005a0:	d106      	bne.n	80005b0 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 80005a2:	4b5b      	ldr	r3, [pc, #364]	; (8000710 <GPIO_PeriClockControl+0x1b4>)
 80005a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a6:	4a5a      	ldr	r2, [pc, #360]	; (8000710 <GPIO_PeriClockControl+0x1b4>)
 80005a8:	f043 0304 	orr.w	r3, r3, #4
 80005ac:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005ae:	e0a6      	b.n	80006fe <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOD)
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	4a5a      	ldr	r2, [pc, #360]	; (800071c <GPIO_PeriClockControl+0x1c0>)
 80005b4:	4293      	cmp	r3, r2
 80005b6:	d106      	bne.n	80005c6 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 80005b8:	4b55      	ldr	r3, [pc, #340]	; (8000710 <GPIO_PeriClockControl+0x1b4>)
 80005ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005bc:	4a54      	ldr	r2, [pc, #336]	; (8000710 <GPIO_PeriClockControl+0x1b4>)
 80005be:	f043 0308 	orr.w	r3, r3, #8
 80005c2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005c4:	e09b      	b.n	80006fe <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOE)
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	4a55      	ldr	r2, [pc, #340]	; (8000720 <GPIO_PeriClockControl+0x1c4>)
 80005ca:	4293      	cmp	r3, r2
 80005cc:	d106      	bne.n	80005dc <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 80005ce:	4b50      	ldr	r3, [pc, #320]	; (8000710 <GPIO_PeriClockControl+0x1b4>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d2:	4a4f      	ldr	r2, [pc, #316]	; (8000710 <GPIO_PeriClockControl+0x1b4>)
 80005d4:	f043 0310 	orr.w	r3, r3, #16
 80005d8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005da:	e090      	b.n	80006fe <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOF)
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	4a51      	ldr	r2, [pc, #324]	; (8000724 <GPIO_PeriClockControl+0x1c8>)
 80005e0:	4293      	cmp	r3, r2
 80005e2:	d106      	bne.n	80005f2 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 80005e4:	4b4a      	ldr	r3, [pc, #296]	; (8000710 <GPIO_PeriClockControl+0x1b4>)
 80005e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e8:	4a49      	ldr	r2, [pc, #292]	; (8000710 <GPIO_PeriClockControl+0x1b4>)
 80005ea:	f043 0320 	orr.w	r3, r3, #32
 80005ee:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005f0:	e085      	b.n	80006fe <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOG)
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	4a4c      	ldr	r2, [pc, #304]	; (8000728 <GPIO_PeriClockControl+0x1cc>)
 80005f6:	4293      	cmp	r3, r2
 80005f8:	d106      	bne.n	8000608 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 80005fa:	4b45      	ldr	r3, [pc, #276]	; (8000710 <GPIO_PeriClockControl+0x1b4>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fe:	4a44      	ldr	r2, [pc, #272]	; (8000710 <GPIO_PeriClockControl+0x1b4>)
 8000600:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000604:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000606:	e07a      	b.n	80006fe <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOH)
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	4a48      	ldr	r2, [pc, #288]	; (800072c <GPIO_PeriClockControl+0x1d0>)
 800060c:	4293      	cmp	r3, r2
 800060e:	d106      	bne.n	800061e <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 8000610:	4b3f      	ldr	r3, [pc, #252]	; (8000710 <GPIO_PeriClockControl+0x1b4>)
 8000612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000614:	4a3e      	ldr	r2, [pc, #248]	; (8000710 <GPIO_PeriClockControl+0x1b4>)
 8000616:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800061a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800061c:	e06f      	b.n	80006fe <GPIO_PeriClockControl+0x1a2>
		else if (pGPIOx == GPIOI)
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	4a43      	ldr	r2, [pc, #268]	; (8000730 <GPIO_PeriClockControl+0x1d4>)
 8000622:	4293      	cmp	r3, r2
 8000624:	d16b      	bne.n	80006fe <GPIO_PeriClockControl+0x1a2>
			GPIOI_PCLK_EN();
 8000626:	4b3a      	ldr	r3, [pc, #232]	; (8000710 <GPIO_PeriClockControl+0x1b4>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062a:	4a39      	ldr	r2, [pc, #228]	; (8000710 <GPIO_PeriClockControl+0x1b4>)
 800062c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000630:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000632:	e064      	b.n	80006fe <GPIO_PeriClockControl+0x1a2>
		if (EnorDi == DISABLE)
 8000634:	78fb      	ldrb	r3, [r7, #3]
 8000636:	2b00      	cmp	r3, #0
 8000638:	d161      	bne.n	80006fe <GPIO_PeriClockControl+0x1a2>
			if (pGPIOx == GPIOA)
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	4a33      	ldr	r2, [pc, #204]	; (800070c <GPIO_PeriClockControl+0x1b0>)
 800063e:	4293      	cmp	r3, r2
 8000640:	d106      	bne.n	8000650 <GPIO_PeriClockControl+0xf4>
				GPIOA_PCLK_DI();
 8000642:	4b33      	ldr	r3, [pc, #204]	; (8000710 <GPIO_PeriClockControl+0x1b4>)
 8000644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000646:	4a32      	ldr	r2, [pc, #200]	; (8000710 <GPIO_PeriClockControl+0x1b4>)
 8000648:	f023 0301 	bic.w	r3, r3, #1
 800064c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800064e:	e056      	b.n	80006fe <GPIO_PeriClockControl+0x1a2>
			else if (pGPIOx == GPIOB)
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	4a30      	ldr	r2, [pc, #192]	; (8000714 <GPIO_PeriClockControl+0x1b8>)
 8000654:	4293      	cmp	r3, r2
 8000656:	d106      	bne.n	8000666 <GPIO_PeriClockControl+0x10a>
				GPIOB_PCLK_DI();
 8000658:	4b2d      	ldr	r3, [pc, #180]	; (8000710 <GPIO_PeriClockControl+0x1b4>)
 800065a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065c:	4a2c      	ldr	r2, [pc, #176]	; (8000710 <GPIO_PeriClockControl+0x1b4>)
 800065e:	f023 0302 	bic.w	r3, r3, #2
 8000662:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000664:	e04b      	b.n	80006fe <GPIO_PeriClockControl+0x1a2>
			else if (pGPIOx == GPIOC)
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	4a2b      	ldr	r2, [pc, #172]	; (8000718 <GPIO_PeriClockControl+0x1bc>)
 800066a:	4293      	cmp	r3, r2
 800066c:	d106      	bne.n	800067c <GPIO_PeriClockControl+0x120>
				GPIOC_PCLK_DI();
 800066e:	4b28      	ldr	r3, [pc, #160]	; (8000710 <GPIO_PeriClockControl+0x1b4>)
 8000670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000672:	4a27      	ldr	r2, [pc, #156]	; (8000710 <GPIO_PeriClockControl+0x1b4>)
 8000674:	f023 0304 	bic.w	r3, r3, #4
 8000678:	6313      	str	r3, [r2, #48]	; 0x30
}
 800067a:	e040      	b.n	80006fe <GPIO_PeriClockControl+0x1a2>
			else if (pGPIOx == GPIOD)
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	4a27      	ldr	r2, [pc, #156]	; (800071c <GPIO_PeriClockControl+0x1c0>)
 8000680:	4293      	cmp	r3, r2
 8000682:	d106      	bne.n	8000692 <GPIO_PeriClockControl+0x136>
				GPIOD_PCLK_DI();
 8000684:	4b22      	ldr	r3, [pc, #136]	; (8000710 <GPIO_PeriClockControl+0x1b4>)
 8000686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000688:	4a21      	ldr	r2, [pc, #132]	; (8000710 <GPIO_PeriClockControl+0x1b4>)
 800068a:	f023 0308 	bic.w	r3, r3, #8
 800068e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000690:	e035      	b.n	80006fe <GPIO_PeriClockControl+0x1a2>
			else if (pGPIOx == GPIOE)
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	4a22      	ldr	r2, [pc, #136]	; (8000720 <GPIO_PeriClockControl+0x1c4>)
 8000696:	4293      	cmp	r3, r2
 8000698:	d106      	bne.n	80006a8 <GPIO_PeriClockControl+0x14c>
				GPIOE_PCLK_DI();
 800069a:	4b1d      	ldr	r3, [pc, #116]	; (8000710 <GPIO_PeriClockControl+0x1b4>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069e:	4a1c      	ldr	r2, [pc, #112]	; (8000710 <GPIO_PeriClockControl+0x1b4>)
 80006a0:	f023 0310 	bic.w	r3, r3, #16
 80006a4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80006a6:	e02a      	b.n	80006fe <GPIO_PeriClockControl+0x1a2>
			else if (pGPIOx == GPIOF)
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	4a1e      	ldr	r2, [pc, #120]	; (8000724 <GPIO_PeriClockControl+0x1c8>)
 80006ac:	4293      	cmp	r3, r2
 80006ae:	d106      	bne.n	80006be <GPIO_PeriClockControl+0x162>
				GPIOF_PCLK_DI();
 80006b0:	4b17      	ldr	r3, [pc, #92]	; (8000710 <GPIO_PeriClockControl+0x1b4>)
 80006b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b4:	4a16      	ldr	r2, [pc, #88]	; (8000710 <GPIO_PeriClockControl+0x1b4>)
 80006b6:	f023 0320 	bic.w	r3, r3, #32
 80006ba:	6313      	str	r3, [r2, #48]	; 0x30
}
 80006bc:	e01f      	b.n	80006fe <GPIO_PeriClockControl+0x1a2>
			else if (pGPIOx == GPIOG)
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	4a19      	ldr	r2, [pc, #100]	; (8000728 <GPIO_PeriClockControl+0x1cc>)
 80006c2:	4293      	cmp	r3, r2
 80006c4:	d106      	bne.n	80006d4 <GPIO_PeriClockControl+0x178>
				GPIOG_PCLK_EN();
 80006c6:	4b12      	ldr	r3, [pc, #72]	; (8000710 <GPIO_PeriClockControl+0x1b4>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	4a11      	ldr	r2, [pc, #68]	; (8000710 <GPIO_PeriClockControl+0x1b4>)
 80006cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006d0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80006d2:	e014      	b.n	80006fe <GPIO_PeriClockControl+0x1a2>
			else if (pGPIOx == GPIOH)
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	4a15      	ldr	r2, [pc, #84]	; (800072c <GPIO_PeriClockControl+0x1d0>)
 80006d8:	4293      	cmp	r3, r2
 80006da:	d106      	bne.n	80006ea <GPIO_PeriClockControl+0x18e>
				GPIOH_PCLK_DI();
 80006dc:	4b0c      	ldr	r3, [pc, #48]	; (8000710 <GPIO_PeriClockControl+0x1b4>)
 80006de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e0:	4a0b      	ldr	r2, [pc, #44]	; (8000710 <GPIO_PeriClockControl+0x1b4>)
 80006e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80006e6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80006e8:	e009      	b.n	80006fe <GPIO_PeriClockControl+0x1a2>
			else if (pGPIOx == GPIOI)
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	4a10      	ldr	r2, [pc, #64]	; (8000730 <GPIO_PeriClockControl+0x1d4>)
 80006ee:	4293      	cmp	r3, r2
 80006f0:	d105      	bne.n	80006fe <GPIO_PeriClockControl+0x1a2>
				GPIOI_PCLK_DI();
 80006f2:	4b07      	ldr	r3, [pc, #28]	; (8000710 <GPIO_PeriClockControl+0x1b4>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	4a06      	ldr	r2, [pc, #24]	; (8000710 <GPIO_PeriClockControl+0x1b4>)
 80006f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80006fc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80006fe:	bf00      	nop
 8000700:	370c      	adds	r7, #12
 8000702:	46bd      	mov	sp, r7
 8000704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop
 800070c:	40020000 	.word	0x40020000
 8000710:	40023800 	.word	0x40023800
 8000714:	40020400 	.word	0x40020400
 8000718:	40020800 	.word	0x40020800
 800071c:	40020c00 	.word	0x40020c00
 8000720:	40021000 	.word	0x40021000
 8000724:	40021400 	.word	0x40021400
 8000728:	40021800 	.word	0x40021800
 800072c:	40021c00 	.word	0x40021c00
 8000730:	40022000 	.word	0x40022000

08000734 <GPIO_Init>:
 * Parameter 1	:	Pointer to GPIO Handle
 * Return Type	:	none (void)
 * Note		:	Peripheral Clock is enabled at starting of the function, so users need not do it explicitly.
 * ------------------------------------------------------------------------------------------------------ */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b086      	sub	sp, #24
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
	// Enable Peripheral Clock
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	2101      	movs	r1, #1
 8000742:	4618      	mov	r0, r3
 8000744:	f7ff ff0a 	bl	800055c <GPIO_PeriClockControl>

	uint32_t temp = 0;
 8000748:	2300      	movs	r3, #0
 800074a:	617b      	str	r3, [r7, #20]

	// ->  1. Configure the GPIO pin Mode

	// As defined in x_gpio_drivers.h, Pin Modes greater than 3 are interrupt modes
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	795b      	ldrb	r3, [r3, #5]
 8000750:	2b03      	cmp	r3, #3
 8000752:	d821      	bhi.n	8000798 <GPIO_Init+0x64>
	{
		// In Pin Mode Register, each pin takes 2 bit fields [Shift value according to pin number]
		// Logic: Mode value left shifted by (2 * pin number)
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	795b      	ldrb	r3, [r3, #5]
 8000758:	461a      	mov	r2, r3
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	791b      	ldrb	r3, [r3, #4]
 800075e:	005b      	lsls	r3, r3, #1
 8000760:	fa02 f303 	lsl.w	r3, r2, r3
 8000764:	617b      	str	r3, [r7, #20]

		// Store 'temp' i.e. Mode Value in MODE Register [Set/touch only required bit leave rest untouched '|']
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); 	// Clear required bits
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	681a      	ldr	r2, [r3, #0]
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	791b      	ldrb	r3, [r3, #4]
 8000770:	4619      	mov	r1, r3
 8000772:	2303      	movs	r3, #3
 8000774:	408b      	lsls	r3, r1
 8000776:	43db      	mvns	r3, r3
 8000778:	4619      	mov	r1, r3
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	400a      	ands	r2, r1
 8000780:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;							// Update required bits
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	6819      	ldr	r1, [r3, #0]
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	697a      	ldr	r2, [r7, #20]
 800078e:	430a      	orrs	r2, r1
 8000790:	601a      	str	r2, [r3, #0]

		// Reset 'temp'
		temp = 0;
 8000792:	2300      	movs	r3, #0
 8000794:	617b      	str	r3, [r7, #20]
 8000796:	e0ca      	b.n	800092e <GPIO_Init+0x1fa>
		 * 6. Enable interrupt reception on that IRQ number [NVIC Registers]
		 * 7. Implement the IRQ handler.
		 * */

		// -> Configure the edge trigger
		if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	795b      	ldrb	r3, [r3, #5]
 800079c:	2b04      	cmp	r3, #4
 800079e:	d117      	bne.n	80007d0 <GPIO_Init+0x9c>
		{
			// Configure the Falling Trigger Selection Register (FTSR)
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80007a0:	4b4a      	ldr	r3, [pc, #296]	; (80008cc <GPIO_Init+0x198>)
 80007a2:	68db      	ldr	r3, [r3, #12]
 80007a4:	687a      	ldr	r2, [r7, #4]
 80007a6:	7912      	ldrb	r2, [r2, #4]
 80007a8:	4611      	mov	r1, r2
 80007aa:	2201      	movs	r2, #1
 80007ac:	408a      	lsls	r2, r1
 80007ae:	4611      	mov	r1, r2
 80007b0:	4a46      	ldr	r2, [pc, #280]	; (80008cc <GPIO_Init+0x198>)
 80007b2:	430b      	orrs	r3, r1
 80007b4:	60d3      	str	r3, [r2, #12]

			// As a safe side, Clear same bit in RTSR so just FTSR is configured
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80007b6:	4b45      	ldr	r3, [pc, #276]	; (80008cc <GPIO_Init+0x198>)
 80007b8:	689b      	ldr	r3, [r3, #8]
 80007ba:	687a      	ldr	r2, [r7, #4]
 80007bc:	7912      	ldrb	r2, [r2, #4]
 80007be:	4611      	mov	r1, r2
 80007c0:	2201      	movs	r2, #1
 80007c2:	408a      	lsls	r2, r1
 80007c4:	43d2      	mvns	r2, r2
 80007c6:	4611      	mov	r1, r2
 80007c8:	4a40      	ldr	r2, [pc, #256]	; (80008cc <GPIO_Init+0x198>)
 80007ca:	400b      	ands	r3, r1
 80007cc:	6093      	str	r3, [r2, #8]
 80007ce:	e035      	b.n	800083c <GPIO_Init+0x108>
		}
		else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	795b      	ldrb	r3, [r3, #5]
 80007d4:	2b05      	cmp	r3, #5
 80007d6:	d117      	bne.n	8000808 <GPIO_Init+0xd4>
		{
			// Configure the Rising Trigger Selection Register (RTSR)
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80007d8:	4b3c      	ldr	r3, [pc, #240]	; (80008cc <GPIO_Init+0x198>)
 80007da:	689b      	ldr	r3, [r3, #8]
 80007dc:	687a      	ldr	r2, [r7, #4]
 80007de:	7912      	ldrb	r2, [r2, #4]
 80007e0:	4611      	mov	r1, r2
 80007e2:	2201      	movs	r2, #1
 80007e4:	408a      	lsls	r2, r1
 80007e6:	4611      	mov	r1, r2
 80007e8:	4a38      	ldr	r2, [pc, #224]	; (80008cc <GPIO_Init+0x198>)
 80007ea:	430b      	orrs	r3, r1
 80007ec:	6093      	str	r3, [r2, #8]

			// As a safe side, Clear same bit in FTSR so just RTSR is configured
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80007ee:	4b37      	ldr	r3, [pc, #220]	; (80008cc <GPIO_Init+0x198>)
 80007f0:	68db      	ldr	r3, [r3, #12]
 80007f2:	687a      	ldr	r2, [r7, #4]
 80007f4:	7912      	ldrb	r2, [r2, #4]
 80007f6:	4611      	mov	r1, r2
 80007f8:	2201      	movs	r2, #1
 80007fa:	408a      	lsls	r2, r1
 80007fc:	43d2      	mvns	r2, r2
 80007fe:	4611      	mov	r1, r2
 8000800:	4a32      	ldr	r2, [pc, #200]	; (80008cc <GPIO_Init+0x198>)
 8000802:	400b      	ands	r3, r1
 8000804:	60d3      	str	r3, [r2, #12]
 8000806:	e019      	b.n	800083c <GPIO_Init+0x108>
		}
		else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	795b      	ldrb	r3, [r3, #5]
 800080c:	2b06      	cmp	r3, #6
 800080e:	d115      	bne.n	800083c <GPIO_Init+0x108>
		{
			// Configure the both FTSR and RTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000810:	4b2e      	ldr	r3, [pc, #184]	; (80008cc <GPIO_Init+0x198>)
 8000812:	68db      	ldr	r3, [r3, #12]
 8000814:	687a      	ldr	r2, [r7, #4]
 8000816:	7912      	ldrb	r2, [r2, #4]
 8000818:	4611      	mov	r1, r2
 800081a:	2201      	movs	r2, #1
 800081c:	408a      	lsls	r2, r1
 800081e:	4611      	mov	r1, r2
 8000820:	4a2a      	ldr	r2, [pc, #168]	; (80008cc <GPIO_Init+0x198>)
 8000822:	430b      	orrs	r3, r1
 8000824:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000826:	4b29      	ldr	r3, [pc, #164]	; (80008cc <GPIO_Init+0x198>)
 8000828:	689b      	ldr	r3, [r3, #8]
 800082a:	687a      	ldr	r2, [r7, #4]
 800082c:	7912      	ldrb	r2, [r2, #4]
 800082e:	4611      	mov	r1, r2
 8000830:	2201      	movs	r2, #1
 8000832:	408a      	lsls	r2, r1
 8000834:	4611      	mov	r1, r2
 8000836:	4a25      	ldr	r2, [pc, #148]	; (80008cc <GPIO_Init+0x198>)
 8000838:	430b      	orrs	r3, r1
 800083a:	6093      	str	r3, [r2, #8]
		// -> Configure the GPIO Port Selection in SYSCFG_EXTICR
		// GPIO_Pin_x of WHICH port is delivering interrupt? decided by GPIO Port selection [By default, PORTA]

		uint8_t SYSArrayIndex, SYSBitField;

		SYSArrayIndex = (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) / 4;
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	791b      	ldrb	r3, [r3, #4]
 8000840:	089b      	lsrs	r3, r3, #2
 8000842:	74fb      	strb	r3, [r7, #19]
		SYSBitField	  = (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) % 4;
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	791b      	ldrb	r3, [r3, #4]
 8000848:	f003 0303 	and.w	r3, r3, #3
 800084c:	74bb      	strb	r3, [r7, #18]

		// Now store the Port Code
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	4a1f      	ldr	r2, [pc, #124]	; (80008d0 <GPIO_Init+0x19c>)
 8000854:	4293      	cmp	r3, r2
 8000856:	d04d      	beq.n	80008f4 <GPIO_Init+0x1c0>
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4a1d      	ldr	r2, [pc, #116]	; (80008d4 <GPIO_Init+0x1a0>)
 800085e:	4293      	cmp	r3, r2
 8000860:	d032      	beq.n	80008c8 <GPIO_Init+0x194>
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	4a1c      	ldr	r2, [pc, #112]	; (80008d8 <GPIO_Init+0x1a4>)
 8000868:	4293      	cmp	r3, r2
 800086a:	d02b      	beq.n	80008c4 <GPIO_Init+0x190>
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a1a      	ldr	r2, [pc, #104]	; (80008dc <GPIO_Init+0x1a8>)
 8000872:	4293      	cmp	r3, r2
 8000874:	d024      	beq.n	80008c0 <GPIO_Init+0x18c>
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	4a19      	ldr	r2, [pc, #100]	; (80008e0 <GPIO_Init+0x1ac>)
 800087c:	4293      	cmp	r3, r2
 800087e:	d01d      	beq.n	80008bc <GPIO_Init+0x188>
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4a17      	ldr	r2, [pc, #92]	; (80008e4 <GPIO_Init+0x1b0>)
 8000886:	4293      	cmp	r3, r2
 8000888:	d016      	beq.n	80008b8 <GPIO_Init+0x184>
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	4a16      	ldr	r2, [pc, #88]	; (80008e8 <GPIO_Init+0x1b4>)
 8000890:	4293      	cmp	r3, r2
 8000892:	d00f      	beq.n	80008b4 <GPIO_Init+0x180>
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4a14      	ldr	r2, [pc, #80]	; (80008ec <GPIO_Init+0x1b8>)
 800089a:	4293      	cmp	r3, r2
 800089c:	d008      	beq.n	80008b0 <GPIO_Init+0x17c>
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	4a13      	ldr	r2, [pc, #76]	; (80008f0 <GPIO_Init+0x1bc>)
 80008a4:	4293      	cmp	r3, r2
 80008a6:	d101      	bne.n	80008ac <GPIO_Init+0x178>
 80008a8:	2308      	movs	r3, #8
 80008aa:	e024      	b.n	80008f6 <GPIO_Init+0x1c2>
 80008ac:	2300      	movs	r3, #0
 80008ae:	e022      	b.n	80008f6 <GPIO_Init+0x1c2>
 80008b0:	2307      	movs	r3, #7
 80008b2:	e020      	b.n	80008f6 <GPIO_Init+0x1c2>
 80008b4:	2306      	movs	r3, #6
 80008b6:	e01e      	b.n	80008f6 <GPIO_Init+0x1c2>
 80008b8:	2305      	movs	r3, #5
 80008ba:	e01c      	b.n	80008f6 <GPIO_Init+0x1c2>
 80008bc:	2304      	movs	r3, #4
 80008be:	e01a      	b.n	80008f6 <GPIO_Init+0x1c2>
 80008c0:	2303      	movs	r3, #3
 80008c2:	e018      	b.n	80008f6 <GPIO_Init+0x1c2>
 80008c4:	2302      	movs	r3, #2
 80008c6:	e016      	b.n	80008f6 <GPIO_Init+0x1c2>
 80008c8:	2301      	movs	r3, #1
 80008ca:	e014      	b.n	80008f6 <GPIO_Init+0x1c2>
 80008cc:	40013c00 	.word	0x40013c00
 80008d0:	40020000 	.word	0x40020000
 80008d4:	40020400 	.word	0x40020400
 80008d8:	40020800 	.word	0x40020800
 80008dc:	40020c00 	.word	0x40020c00
 80008e0:	40021000 	.word	0x40021000
 80008e4:	40021400 	.word	0x40021400
 80008e8:	40021800 	.word	0x40021800
 80008ec:	40021c00 	.word	0x40021c00
 80008f0:	40022000 	.word	0x40022000
 80008f4:	2300      	movs	r3, #0
 80008f6:	747b      	strb	r3, [r7, #17]
		SYSCFG_EN();												   // Clock Enable
 80008f8:	4b5b      	ldr	r3, [pc, #364]	; (8000a68 <GPIO_Init+0x334>)
 80008fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008fc:	4a5a      	ldr	r2, [pc, #360]	; (8000a68 <GPIO_Init+0x334>)
 80008fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000902:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[SYSArrayIndex] = portcode << (SYSBitField * 4); // before configuring, enable clock
 8000904:	7c7a      	ldrb	r2, [r7, #17]
 8000906:	7cbb      	ldrb	r3, [r7, #18]
 8000908:	009b      	lsls	r3, r3, #2
 800090a:	fa02 f103 	lsl.w	r1, r2, r3
 800090e:	4a57      	ldr	r2, [pc, #348]	; (8000a6c <GPIO_Init+0x338>)
 8000910:	7cfb      	ldrb	r3, [r7, #19]
 8000912:	3302      	adds	r3, #2
 8000914:	f842 1023 	str.w	r1, [r2, r3, lsl #2]


		// -> Enable EXTI Interrupt delivery using Interrupt Mask Register
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000918:	4b55      	ldr	r3, [pc, #340]	; (8000a70 <GPIO_Init+0x33c>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	687a      	ldr	r2, [r7, #4]
 800091e:	7912      	ldrb	r2, [r2, #4]
 8000920:	4611      	mov	r1, r2
 8000922:	2201      	movs	r2, #1
 8000924:	408a      	lsls	r2, r1
 8000926:	4611      	mov	r1, r2
 8000928:	4a51      	ldr	r2, [pc, #324]	; (8000a70 <GPIO_Init+0x33c>)
 800092a:	430b      	orrs	r3, r1
 800092c:	6013      	str	r3, [r2, #0]
	}

	// -> 2. Configure the GPIO Speed

	// Logic: Speed value left shifted by 2 * pin number
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	799b      	ldrb	r3, [r3, #6]
 8000932:	461a      	mov	r2, r3
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	791b      	ldrb	r3, [r3, #4]
 8000938:	005b      	lsls	r3, r3, #1
 800093a:	fa02 f303 	lsl.w	r3, r2, r3
 800093e:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); 				// Clear required bits
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	689a      	ldr	r2, [r3, #8]
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	791b      	ldrb	r3, [r3, #4]
 800094a:	4619      	mov	r1, r3
 800094c:	2303      	movs	r3, #3
 800094e:	408b      	lsls	r3, r1
 8000950:	43db      	mvns	r3, r3
 8000952:	4619      	mov	r1, r3
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	400a      	ands	r2, r1
 800095a:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;										// Update required bits
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	6899      	ldr	r1, [r3, #8]
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	697a      	ldr	r2, [r7, #20]
 8000968:	430a      	orrs	r2, r1
 800096a:	609a      	str	r2, [r3, #8]

	// Reset 'temp'
	temp = 0;
 800096c:	2300      	movs	r3, #0
 800096e:	617b      	str	r3, [r7, #20]

	// -> 3. Configure the Pull-up and Pull-down setting

	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	79db      	ldrb	r3, [r3, #7]
 8000974:	461a      	mov	r2, r3
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	791b      	ldrb	r3, [r3, #4]
 800097a:	005b      	lsls	r3, r3, #1
 800097c:	fa02 f303 	lsl.w	r3, r2, r3
 8000980:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // Clear required bits
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	68da      	ldr	r2, [r3, #12]
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	791b      	ldrb	r3, [r3, #4]
 800098c:	4619      	mov	r1, r3
 800098e:	2303      	movs	r3, #3
 8000990:	408b      	lsls	r3, r1
 8000992:	43db      	mvns	r3, r3
 8000994:	4619      	mov	r1, r3
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	400a      	ands	r2, r1
 800099c:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	68d9      	ldr	r1, [r3, #12]
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	697a      	ldr	r2, [r7, #20]
 80009aa:	430a      	orrs	r2, r1
 80009ac:	60da      	str	r2, [r3, #12]

	temp = 0;
 80009ae:	2300      	movs	r3, #0
 80009b0:	617b      	str	r3, [r7, #20]

	// -> 4. Configure the GPIO Output type

	// Each Pin takes only 1 bit field thats why (1 * pin number)
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (1 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	7a1b      	ldrb	r3, [r3, #8]
 80009b6:	461a      	mov	r2, r3
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	791b      	ldrb	r3, [r3, #4]
 80009bc:	fa02 f303 	lsl.w	r3, r2, r3
 80009c0:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // Clear required bits
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	685a      	ldr	r2, [r3, #4]
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	791b      	ldrb	r3, [r3, #4]
 80009cc:	4619      	mov	r1, r3
 80009ce:	2301      	movs	r3, #1
 80009d0:	408b      	lsls	r3, r1
 80009d2:	43db      	mvns	r3, r3
 80009d4:	4619      	mov	r1, r3
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	400a      	ands	r2, r1
 80009dc:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	6859      	ldr	r1, [r3, #4]
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	697a      	ldr	r2, [r7, #20]
 80009ea:	430a      	orrs	r2, r1
 80009ec:	605a      	str	r2, [r3, #4]

	temp = 0;
 80009ee:	2300      	movs	r3, #0
 80009f0:	617b      	str	r3, [r7, #20]

	// -> 5. Configure the Alternate Functionality

	// If mode is selected as Alternate Function then only configure for Alternate Functionality
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFUNC)
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	795b      	ldrb	r3, [r3, #5]
 80009f6:	2b02      	cmp	r3, #2
 80009f8:	d131      	bne.n	8000a5e <GPIO_Init+0x32a>
		//      : then, to get Bit position (y = (pin_number % 8))
		//		AF[x] = alt_fnc_value  << (4 * y)

		uint8_t AFarrayIndex, AFbitField;

		AFarrayIndex = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	791b      	ldrb	r3, [r3, #4]
 80009fe:	08db      	lsrs	r3, r3, #3
 8000a00:	743b      	strb	r3, [r7, #16]
		AFbitField	 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	791b      	ldrb	r3, [r3, #4]
 8000a06:	f003 0307 	and.w	r3, r3, #7
 8000a0a:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[AFarrayIndex] &= ~(0xF << (4 * AFbitField));					// Clear required Bits
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	7c3a      	ldrb	r2, [r7, #16]
 8000a12:	3208      	adds	r2, #8
 8000a14:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000a18:	7bfb      	ldrb	r3, [r7, #15]
 8000a1a:	009b      	lsls	r3, r3, #2
 8000a1c:	220f      	movs	r2, #15
 8000a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a22:	43db      	mvns	r3, r3
 8000a24:	4618      	mov	r0, r3
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	7c3a      	ldrb	r2, [r7, #16]
 8000a2c:	4001      	ands	r1, r0
 8000a2e:	3208      	adds	r2, #8
 8000a30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[AFarrayIndex] |= pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFuncMode << (4 * AFbitField);
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	7c3a      	ldrb	r2, [r7, #16]
 8000a3a:	3208      	adds	r2, #8
 8000a3c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	7a5b      	ldrb	r3, [r3, #9]
 8000a44:	461a      	mov	r2, r3
 8000a46:	7bfb      	ldrb	r3, [r7, #15]
 8000a48:	009b      	lsls	r3, r3, #2
 8000a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a4e:	4618      	mov	r0, r3
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	7c3a      	ldrb	r2, [r7, #16]
 8000a56:	4301      	orrs	r1, r0
 8000a58:	3208      	adds	r2, #8
 8000a5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	}

}
 8000a5e:	bf00      	nop
 8000a60:	3718      	adds	r7, #24
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	40023800 	.word	0x40023800
 8000a6c:	40013800 	.word	0x40013800
 8000a70:	40013c00 	.word	0x40013c00

08000a74 <I2C_PeriClockControl>:
 * Parameter 2	:	ENABLE or DISABLE Macro
 * Return Type	:	none (void)
 * Note		:
 * ------------------------------------------------------------------------------------------------------ */
void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b083      	sub	sp, #12
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
 8000a7c:	460b      	mov	r3, r1
 8000a7e:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE)
 8000a80:	78fb      	ldrb	r3, [r7, #3]
 8000a82:	2b01      	cmp	r3, #1
 8000a84:	d120      	bne.n	8000ac8 <I2C_PeriClockControl+0x54>
	{
		if (pI2Cx == I2C1)
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	4a24      	ldr	r2, [pc, #144]	; (8000b1c <I2C_PeriClockControl+0xa8>)
 8000a8a:	4293      	cmp	r3, r2
 8000a8c:	d106      	bne.n	8000a9c <I2C_PeriClockControl+0x28>
		{
			I2C1_PCLK_EN();
 8000a8e:	4b24      	ldr	r3, [pc, #144]	; (8000b20 <I2C_PeriClockControl+0xac>)
 8000a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a92:	4a23      	ldr	r2, [pc, #140]	; (8000b20 <I2C_PeriClockControl+0xac>)
 8000a94:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a98:	6413      	str	r3, [r2, #64]	; 0x40
		}

	}


}
 8000a9a:	e038      	b.n	8000b0e <I2C_PeriClockControl+0x9a>
		else if (pI2Cx == I2C2)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	4a21      	ldr	r2, [pc, #132]	; (8000b24 <I2C_PeriClockControl+0xb0>)
 8000aa0:	4293      	cmp	r3, r2
 8000aa2:	d106      	bne.n	8000ab2 <I2C_PeriClockControl+0x3e>
			I2C2_PCLK_EN();
 8000aa4:	4b1e      	ldr	r3, [pc, #120]	; (8000b20 <I2C_PeriClockControl+0xac>)
 8000aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa8:	4a1d      	ldr	r2, [pc, #116]	; (8000b20 <I2C_PeriClockControl+0xac>)
 8000aaa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000aae:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000ab0:	e02d      	b.n	8000b0e <I2C_PeriClockControl+0x9a>
		else if (pI2Cx == I2C3)
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	4a1c      	ldr	r2, [pc, #112]	; (8000b28 <I2C_PeriClockControl+0xb4>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d129      	bne.n	8000b0e <I2C_PeriClockControl+0x9a>
			I2C3_PCLK_EN();
 8000aba:	4b19      	ldr	r3, [pc, #100]	; (8000b20 <I2C_PeriClockControl+0xac>)
 8000abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000abe:	4a18      	ldr	r2, [pc, #96]	; (8000b20 <I2C_PeriClockControl+0xac>)
 8000ac0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000ac4:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000ac6:	e022      	b.n	8000b0e <I2C_PeriClockControl+0x9a>
		if (EnorDi == DISABLE)
 8000ac8:	78fb      	ldrb	r3, [r7, #3]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d11f      	bne.n	8000b0e <I2C_PeriClockControl+0x9a>
			if (pI2Cx == I2C1)
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	4a12      	ldr	r2, [pc, #72]	; (8000b1c <I2C_PeriClockControl+0xa8>)
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d106      	bne.n	8000ae4 <I2C_PeriClockControl+0x70>
				I2C1_PCLK_DI();
 8000ad6:	4b12      	ldr	r3, [pc, #72]	; (8000b20 <I2C_PeriClockControl+0xac>)
 8000ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ada:	4a11      	ldr	r2, [pc, #68]	; (8000b20 <I2C_PeriClockControl+0xac>)
 8000adc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000ae0:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000ae2:	e014      	b.n	8000b0e <I2C_PeriClockControl+0x9a>
			else if (pI2Cx == I2C2)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	4a0f      	ldr	r2, [pc, #60]	; (8000b24 <I2C_PeriClockControl+0xb0>)
 8000ae8:	4293      	cmp	r3, r2
 8000aea:	d106      	bne.n	8000afa <I2C_PeriClockControl+0x86>
				I2C2_PCLK_DI();
 8000aec:	4b0c      	ldr	r3, [pc, #48]	; (8000b20 <I2C_PeriClockControl+0xac>)
 8000aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af0:	4a0b      	ldr	r2, [pc, #44]	; (8000b20 <I2C_PeriClockControl+0xac>)
 8000af2:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000af6:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000af8:	e009      	b.n	8000b0e <I2C_PeriClockControl+0x9a>
			else if (pI2Cx == I2C3)
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	4a0a      	ldr	r2, [pc, #40]	; (8000b28 <I2C_PeriClockControl+0xb4>)
 8000afe:	4293      	cmp	r3, r2
 8000b00:	d105      	bne.n	8000b0e <I2C_PeriClockControl+0x9a>
				I2C3_PCLK_DI();
 8000b02:	4b07      	ldr	r3, [pc, #28]	; (8000b20 <I2C_PeriClockControl+0xac>)
 8000b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b06:	4a06      	ldr	r2, [pc, #24]	; (8000b20 <I2C_PeriClockControl+0xac>)
 8000b08:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000b0c:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000b0e:	bf00      	nop
 8000b10:	370c      	adds	r7, #12
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	40005400 	.word	0x40005400
 8000b20:	40023800 	.word	0x40023800
 8000b24:	40005800 	.word	0x40005800
 8000b28:	40005c00 	.word	0x40005c00

08000b2c <I2C_Init>:
 *			For FREQ configuration, it is known that HSI is 16 MHz, but still it is required to calculate
 *
 *			Also, Peripheral Clock is enabled at starting of the function, so users need not do it explicitly.
 * ------------------------------------------------------------------------------------------------------ */
void I2C_Init(I2C_Handle_t *pI2CHandle)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b084      	sub	sp, #16
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
	/* - Enable Peripheral Clock - */
	I2C_PeriClockControl(pI2CHandle->pI2Cx, ENABLE);
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	2101      	movs	r1, #1
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f7ff ff9a 	bl	8000a74 <I2C_PeriClockControl>

	uint32_t tempReg = 0;
 8000b40:	2300      	movs	r3, #0
 8000b42:	60fb      	str	r3, [r7, #12]

	/* - Enabling ACKing (CR1 Register) - */

	// Store the value from ACK config variable (store at 10th bit position)
	tempReg |= (pI2CHandle->I2C_Config.I2C_ACK_Control << 10);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	7a5b      	ldrb	r3, [r3, #9]
 8000b48:	029b      	lsls	r3, r3, #10
 8000b4a:	461a      	mov	r2, r3
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	4313      	orrs	r3, r2
 8000b50:	60fb      	str	r3, [r7, #12]
	// Configure CR1 Register
	pI2CHandle->pI2Cx->CR1 = tempReg;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	68fa      	ldr	r2, [r7, #12]
 8000b58:	601a      	str	r2, [r3, #0]

	/* - Configure the FREQ fields (CR2 Register) - */

	tempReg = 0;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	60fb      	str	r3, [r7, #12]
	// Get Pclk value [Returns 16HMz (STM32F407)]
	tempReg |= RCC_Pclk1_Value() / 1000000U;		// divide by 1000000 to get value 16
 8000b5e:	f000 fa5f 	bl	8001020 <RCC_Pclk1_Value>
 8000b62:	4603      	mov	r3, r0
 8000b64:	4a49      	ldr	r2, [pc, #292]	; (8000c8c <I2C_Init+0x160>)
 8000b66:	fba2 2303 	umull	r2, r3, r2, r3
 8000b6a:	0c9b      	lsrs	r3, r3, #18
 8000b6c:	68fa      	ldr	r2, [r7, #12]
 8000b6e:	4313      	orrs	r3, r2
 8000b70:	60fb      	str	r3, [r7, #12]

	// Configure CR2 with FREQ value
	pI2CHandle->pI2Cx->CR2 = (tempReg & 0x3F);		// Masking: Only need first 6 bits (FREQ[5:0])
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	68fa      	ldr	r2, [r7, #12]
 8000b78:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000b7c:	605a      	str	r2, [r3, #4]
	// Bits[9:8]      : for 7 bit address -> DON'T CARE
	// Bits[13:10]    : RESERVED (MUST BE KEPT at reset value)
	// Bit 14	  : SHOULD always be at 1 by software
	// Bit 15	  : ADDMODE : 0 for 7 bit address (10 bit address not acknowledged)

	tempReg = 0;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	60fb      	str	r3, [r7, #12]
	// Configure device address (own address)
	tempReg |= (pI2CHandle->I2C_Config.I2C_Device_Address << 1);	// shifted by 1 because bits are [7:1]
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	7a1b      	ldrb	r3, [r3, #8]
 8000b86:	005b      	lsls	r3, r3, #1
 8000b88:	461a      	mov	r2, r3
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	4313      	orrs	r3, r2
 8000b8e:	60fb      	str	r3, [r7, #12]

	// Configure OAR Register
	// Bit 15: ADDMODE: already 0 (reset value) so, 7 bit address mode is selected
	// Set 14th Bit as required
	tempReg |= (1 << 14);
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b96:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->OAR1 = tempReg;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	68fa      	ldr	r2, [r7, #12]
 8000b9e:	609a      	str	r2, [r3, #8]

	// Configure the CCR fields (CCR Register)
	// Bits[11:0]	: CCR field

	// CCR calculations
	uint16_t ccr_value = 0;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	817b      	strh	r3, [r7, #10]
	tempReg = 0;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	60fb      	str	r3, [r7, #12]

	if (pI2CHandle->I2C_Config.I2C_SCL_Speed <= I2C_SCL_SPEED_SM)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	685b      	ldr	r3, [r3, #4]
 8000bac:	4a38      	ldr	r2, [pc, #224]	; (8000c90 <I2C_Init+0x164>)
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d80f      	bhi.n	8000bd2 <I2C_Init+0xa6>
		 *   In terms of frequency
		 *   => CCR = f(pclk1) / 2 * f(scl)
		 */

		// CCR = Pclk1 / I2C_SCL_Speed
		ccr_value = (RCC_Pclk1_Value() / (2 * pI2CHandle->I2C_Config.I2C_SCL_Speed));
 8000bb2:	f000 fa35 	bl	8001020 <RCC_Pclk1_Value>
 8000bb6:	4602      	mov	r2, r0
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	685b      	ldr	r3, [r3, #4]
 8000bbc:	005b      	lsls	r3, r3, #1
 8000bbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bc2:	817b      	strh	r3, [r7, #10]

		// Save CCR value in tempReg register and Mask out unnecessary bits (CCR Bits[11:0])
		tempReg |= (ccr_value & 0xFFF);
 8000bc4:	897b      	ldrh	r3, [r7, #10]
 8000bc6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000bca:	68fa      	ldr	r2, [r7, #12]
 8000bcc:	4313      	orrs	r3, r2
 8000bce:	60fb      	str	r3, [r7, #12]
 8000bd0:	e031      	b.n	8000c36 <I2C_Init+0x10a>
	}
	else
	{
		// STEP a:  Mode is Fast Mode
		// Set Bit 15: 1 for Fast Mode
		tempReg |= (1 << 15);
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000bd8:	60fb      	str	r3, [r7, #12]

		// STEP b: Configure Duty Cycle
		// Bit 14 (user configured)
		tempReg |= (pI2CHandle->I2C_Config.I2C_FM_DutyCycle << 14);
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	895b      	ldrh	r3, [r3, #10]
 8000bde:	039b      	lsls	r3, r3, #14
 8000be0:	461a      	mov	r2, r3
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	4313      	orrs	r3, r2
 8000be6:	60fb      	str	r3, [r7, #12]
		 *
		 *	CCR = f(pclk1) / (25 * f(scl))
		 * */

		// Check for DUTY CYCLE (user configured)
		if(pI2CHandle->I2C_Config.I2C_FM_DutyCycle == I2C_FM_DutyCycle_2)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	895b      	ldrh	r3, [r3, #10]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d10b      	bne.n	8000c08 <I2C_Init+0xdc>
		{
			// CCR = f(pclk1) / (3 * f(scl))
			ccr_value = (RCC_Pclk1_Value() / (3 * pI2CHandle->I2C_Config.I2C_SCL_Speed));
 8000bf0:	f000 fa16 	bl	8001020 <RCC_Pclk1_Value>
 8000bf4:	4601      	mov	r1, r0
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	685a      	ldr	r2, [r3, #4]
 8000bfa:	4613      	mov	r3, r2
 8000bfc:	005b      	lsls	r3, r3, #1
 8000bfe:	4413      	add	r3, r2
 8000c00:	fbb1 f3f3 	udiv	r3, r1, r3
 8000c04:	817b      	strh	r3, [r7, #10]
 8000c06:	e010      	b.n	8000c2a <I2C_Init+0xfe>

		}
		else if (pI2CHandle->I2C_Config.I2C_FM_DutyCycle == I2C_FM_DutyCycle_16_9)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	895b      	ldrh	r3, [r3, #10]
 8000c0c:	2b01      	cmp	r3, #1
 8000c0e:	d10c      	bne.n	8000c2a <I2C_Init+0xfe>
		{
			// CCR = f(pclk1) / (25 * f(scl))
			ccr_value = (RCC_Pclk1_Value() / (25 * pI2CHandle->I2C_Config.I2C_SCL_Speed));
 8000c10:	f000 fa06 	bl	8001020 <RCC_Pclk1_Value>
 8000c14:	4601      	mov	r1, r0
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	685a      	ldr	r2, [r3, #4]
 8000c1a:	4613      	mov	r3, r2
 8000c1c:	009b      	lsls	r3, r3, #2
 8000c1e:	4413      	add	r3, r2
 8000c20:	009a      	lsls	r2, r3, #2
 8000c22:	4413      	add	r3, r2
 8000c24:	fbb1 f3f3 	udiv	r3, r1, r3
 8000c28:	817b      	strh	r3, [r7, #10]
		{
			// Meh
		}

		// Save CCR value in tempReg register and Mask out unnecessary bits (CCR Bits[11:0])
		tempReg |= (ccr_value & 0xFFF);
 8000c2a:	897b      	ldrh	r3, [r7, #10]
 8000c2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c30:	68fa      	ldr	r2, [r7, #12]
 8000c32:	4313      	orrs	r3, r2
 8000c34:	60fb      	str	r3, [r7, #12]

	}


	// Configure the CCR Register with value in tempReg
	pI2CHandle->pI2Cx->CCR = tempReg;
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	68fa      	ldr	r2, [r7, #12]
 8000c3c:	61da      	str	r2, [r3, #28]
	 *			=> [Trise(max) * f(pclk1)] + 1
	 *
	 */

	// Check if Mode is FM or SM
	if (pI2CHandle->I2C_Config.I2C_SCL_Speed <= I2C_SCL_SPEED_SM)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	685b      	ldr	r3, [r3, #4]
 8000c42:	4a13      	ldr	r2, [pc, #76]	; (8000c90 <I2C_Init+0x164>)
 8000c44:	4293      	cmp	r3, r2
 8000c46:	d809      	bhi.n	8000c5c <I2C_Init+0x130>
	{
		// Mode: SM

		// [Trise(max) * f(pclk1)] + 1
		// Trise (max) for standard mode is 1000ns (I2C specification)
		tempReg = (RCC_Pclk1_Value() / 1000000U) + 1;
 8000c48:	f000 f9ea 	bl	8001020 <RCC_Pclk1_Value>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	4a0f      	ldr	r2, [pc, #60]	; (8000c8c <I2C_Init+0x160>)
 8000c50:	fba2 2303 	umull	r2, r3, r2, r3
 8000c54:	0c9b      	lsrs	r3, r3, #18
 8000c56:	3301      	adds	r3, #1
 8000c58:	60fb      	str	r3, [r7, #12]
 8000c5a:	e00d      	b.n	8000c78 <I2C_Init+0x14c>
	{
		// Mode: FM

		// [Trise(max) * f(pclk1)] + 1
		// Trise (max) for fast mode is 300ns (I2C specification)
		tempReg = (((RCC_Pclk1_Value() * 300 ) / 1000000000U) + 1);
 8000c5c:	f000 f9e0 	bl	8001020 <RCC_Pclk1_Value>
 8000c60:	4603      	mov	r3, r0
 8000c62:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000c66:	fb02 f303 	mul.w	r3, r2, r3
 8000c6a:	0a5b      	lsrs	r3, r3, #9
 8000c6c:	4a09      	ldr	r2, [pc, #36]	; (8000c94 <I2C_Init+0x168>)
 8000c6e:	fba2 2303 	umull	r2, r3, r2, r3
 8000c72:	09db      	lsrs	r3, r3, #7
 8000c74:	3301      	adds	r3, #1
 8000c76:	60fb      	str	r3, [r7, #12]

	}

	// Configure the TRISE Register with value in tempReg
	pI2CHandle->pI2Cx->TRISE = tempReg & 0x3F;		// TRISE[5:0] Mask others
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	68fa      	ldr	r2, [r7, #12]
 8000c7e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000c82:	621a      	str	r2, [r3, #32]

}
 8000c84:	bf00      	nop
 8000c86:	3710      	adds	r7, #16
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	431bde83 	.word	0x431bde83
 8000c90:	000186a0 	.word	0x000186a0
 8000c94:	00044b83 	.word	0x00044b83

08000c98 <I2C_MasterSendData>:
 * Parameter 5	:	RepeatedStart (MACRO I2C_REPEATED_START_EN/_DI), to enable or disable repeated start
 * Return Type	:	none (void)
 * Note		:	Blocking API (Polling), function call will wait until all the bytes are transmitted.
 * ------------------------------------------------------------------------------------------------------ */
void I2C_MasterSendData(I2C_Handle_t *pI2CHandle, uint8_t *pTxBuffer, uint32_t LenOfData, uint8_t SlaveAddress, uint8_t repeatedStart)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b084      	sub	sp, #16
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	60f8      	str	r0, [r7, #12]
 8000ca0:	60b9      	str	r1, [r7, #8]
 8000ca2:	607a      	str	r2, [r7, #4]
 8000ca4:	70fb      	strb	r3, [r7, #3]
	/* - Step 1: Generate the START condition - */
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	4618      	mov	r0, r3
 8000cac:	f000 f8e5 	bl	8000e7a <I2C_GenerateStartCondition>

	/* - Step 2: Confirm generation of START condition - */
	// By checking SB Flag in SR1
	// Until SB is cleared, SCL will be stretched (SCL will be pulled to LOW)
	while (!(I2C_getFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_SB)));
 8000cb0:	bf00      	nop
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	2101      	movs	r1, #1
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f000 f8fe 	bl	8000eba <I2C_getFlagStatus>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d0f6      	beq.n	8000cb2 <I2C_MasterSendData+0x1a>
	// Clearing is done (by reading)

	/* - Step 3: Send the address of the Slave with R/~W bit as 0 - */
	// Total 8 bits (7 bit Slave address + 1 R/~W bit)
	I2C_ExecuteAddressPhase_Write(pI2CHandle->pI2Cx, SlaveAddress);
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	78fa      	ldrb	r2, [r7, #3]
 8000cca:	4611      	mov	r1, r2
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f000 f943 	bl	8000f58 <I2C_ExecuteAddressPhase_Write>


	/* - Step 4: Confirm completetion of Address Phase - */
	// By checking the ADDR Flag in SR1
	while (!(I2C_getFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_ADDR)));
 8000cd2:	bf00      	nop
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	2102      	movs	r1, #2
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f000 f8ed 	bl	8000eba <I2C_getFlagStatus>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d0f6      	beq.n	8000cd4 <I2C_MasterSendData+0x3c>


	/* - Step 5: Clear the ADDR Flag (according to its software sequence) - */
	// Until ADDR is cleared, SCL will be stretched (SCL will be pulled to LOW)
	// Clearing: Cleared by software by reading SR1 Register followed reading SR2 or by hardware when PE = 0
	I2C_ClearADDRFlag(pI2CHandle);
 8000ce6:	68f8      	ldr	r0, [r7, #12]
 8000ce8:	f000 f962 	bl	8000fb0 <I2C_ClearADDRFlag>
	// Data reception begins: AFTER clearing ADDR Flag


	/* - Step 6: Send the data until LenOfData becomes 0 - */
	// Before sending, confirm DR is empty or not (TXE Flag)
	while (LenOfData > 0)
 8000cec:	e014      	b.n	8000d18 <I2C_MasterSendData+0x80>
	{
		// Wait till TxE is Set
		while (!(I2C_getFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_TXE)));
 8000cee:	bf00      	nop
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	2180      	movs	r1, #128	; 0x80
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f000 f8df 	bl	8000eba <I2C_getFlagStatus>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d0f6      	beq.n	8000cf0 <I2C_MasterSendData+0x58>

		// Send data (Copy to DR)
		pI2CHandle->pI2Cx->DR = *pTxBuffer;
 8000d02:	68bb      	ldr	r3, [r7, #8]
 8000d04:	781a      	ldrb	r2, [r3, #0]
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	611a      	str	r2, [r3, #16]

		// Increment Tx Buffer to point at next memory
		pTxBuffer++;
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	3301      	adds	r3, #1
 8000d10:	60bb      	str	r3, [r7, #8]

		// Decrement Lenth of Data
		LenOfData--;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	3b01      	subs	r3, #1
 8000d16:	607b      	str	r3, [r7, #4]
	while (LenOfData > 0)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d1e7      	bne.n	8000cee <I2C_MasterSendData+0x56>

	/* - Step 7: When LenOfData becomes 0, wait for TxE = 1 and BTF = 1 before generating STOP condition - */
	// TxE = 1 and BTF = 1 means, both Shoft register and DR are empty

	// Wait till TxE is Set
	while (!(I2C_getFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_TXE)));
 8000d1e:	bf00      	nop
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	2180      	movs	r1, #128	; 0x80
 8000d26:	4618      	mov	r0, r3
 8000d28:	f000 f8c7 	bl	8000eba <I2C_getFlagStatus>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d0f6      	beq.n	8000d20 <I2C_MasterSendData+0x88>

	// Wait till BTF is Set
	while (!(I2C_getFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_BTF)));
 8000d32:	bf00      	nop
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	2104      	movs	r1, #4
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f000 f8bd 	bl	8000eba <I2C_getFlagStatus>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d0f6      	beq.n	8000d34 <I2C_MasterSendData+0x9c>


	/* - Step 8: Generate the STOP condition - */
	// Master does not have to wait for the STOP condition completetion
	// Generating STOP condition, clears BTF
	if (repeatedStart == I2C_REPEATED_START_DI)
 8000d46:	7e3b      	ldrb	r3, [r7, #24]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d104      	bne.n	8000d56 <I2C_MasterSendData+0xbe>
	{
		// Check for Repeated Start then generate STOP condition
		I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4618      	mov	r0, r3
 8000d52:	f000 f8a2 	bl	8000e9a <I2C_GenerateStopCondition>
	}

}
 8000d56:	bf00      	nop
 8000d58:	3710      	adds	r7, #16
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}

08000d5e <I2C_MasterReceiveData>:
 * Parameter 5	:	RepeatedStart (MACRO I2C_REPEATED_START_EN/_DI), to enable or disable repeated start
 * Return Type	:	none (void)
 * Note		:	Blocking API (Polling), function call will wait until all the bytes are received.
 * ------------------------------------------------------------------------------------------------------ */
void I2C_MasterReceiveData(I2C_Handle_t *pI2CHandle, uint8_t *pRxBuffer, uint32_t LenOfData, uint8_t SlaveAddress, uint8_t repeatedStart)
{
 8000d5e:	b580      	push	{r7, lr}
 8000d60:	b086      	sub	sp, #24
 8000d62:	af00      	add	r7, sp, #0
 8000d64:	60f8      	str	r0, [r7, #12]
 8000d66:	60b9      	str	r1, [r7, #8]
 8000d68:	607a      	str	r2, [r7, #4]
 8000d6a:	70fb      	strb	r3, [r7, #3]
	/* - Step 1: Generate the START condition - */
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4618      	mov	r0, r3
 8000d72:	f000 f882 	bl	8000e7a <I2C_GenerateStartCondition>

	/* - Step 2: Confirm generation of START condition - */
	// By checking SB Flag in SR1
	// Until SB is cleared, SCL will be stretched (SCL will be pulled to LOW)
	while (!(I2C_getFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_SB)));
 8000d76:	bf00      	nop
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	2101      	movs	r1, #1
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f000 f89b 	bl	8000eba <I2C_getFlagStatus>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d0f6      	beq.n	8000d78 <I2C_MasterReceiveData+0x1a>
	// Clearing is done (by reading)

	/* - Step 3: Send the address of the Slave with R/~W bit as 1 - */
	// Total 8 bits (7 bit Slave address + 1 R/~W bit)
	I2C_ExecuteAddressPhase_Read(pI2CHandle->pI2Cx, SlaveAddress);
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	78fa      	ldrb	r2, [r7, #3]
 8000d90:	4611      	mov	r1, r2
 8000d92:	4618      	mov	r0, r3
 8000d94:	f000 f8f6 	bl	8000f84 <I2C_ExecuteAddressPhase_Read>

	/* - Step 4: Confirm completetion of Address Phase - */
	// By checking the ADDR Flag in SR1
	while (!(I2C_getFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_ADDR)));
 8000d98:	bf00      	nop
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	2102      	movs	r1, #2
 8000da0:	4618      	mov	r0, r3
 8000da2:	f000 f88a 	bl	8000eba <I2C_getFlagStatus>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d0f6      	beq.n	8000d9a <I2C_MasterReceiveData+0x3c>


	/* - Step 5: CHECK for length of data from the slave and follow procedures - */

	/* - PROCEDURE TO READ ONLY 1 BYTE FROM SLAVE - */
	if (LenOfData == 1)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	2b01      	cmp	r3, #1
 8000db0:	d121      	bne.n	8000df6 <I2C_MasterReceiveData+0x98>
	{
		// a. Set ACK bit to 0 [DISABLE ACKing (in CR)]
		I2C_ManageACK(pI2CHandle->pI2Cx, I2C_ACK_DISABLE);
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	2100      	movs	r1, #0
 8000db8:	4618      	mov	r0, r3
 8000dba:	f000 f8ae 	bl	8000f1a <I2C_ManageACK>


		// b. Clear ADDR flag [ADDR = 0]
		// Clearing: Cleared by software by reading SR1 Register followed reading SR2 or by hardware when PE = 0
		I2C_ClearADDRFlag(pI2CHandle);
 8000dbe:	68f8      	ldr	r0, [r7, #12]
 8000dc0:	f000 f8f6 	bl	8000fb0 <I2C_ClearADDRFlag>
		// Data reception begins: AFTER clearing ADDR Flag


		// c. Wait until RxNE becomes 1
		while (!(I2C_getFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_RXNE)));
 8000dc4:	bf00      	nop
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	2140      	movs	r1, #64	; 0x40
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f000 f874 	bl	8000eba <I2C_getFlagStatus>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d0f6      	beq.n	8000dc6 <I2C_MasterReceiveData+0x68>

		// d. Set STOP bit to 1 [STOP condition (in CR)]
		if (repeatedStart == I2C_REPEATED_START_DI)
 8000dd8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d104      	bne.n	8000dea <I2C_MasterReceiveData+0x8c>
		{
			// Check for Repeated Start then generate STOP condition
			I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4618      	mov	r0, r3
 8000de6:	f000 f858 	bl	8000e9a <I2C_GenerateStopCondition>
		}

		// e. Read the data in Rx Buffer (Read DR)
		*pRxBuffer = pI2CHandle->pI2Cx->DR;
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	691b      	ldr	r3, [r3, #16]
 8000df0:	b2da      	uxtb	r2, r3
 8000df2:	68bb      	ldr	r3, [r7, #8]
 8000df4:	701a      	strb	r2, [r3, #0]

	}

	/* - PROCEDURE TO READ MORE THAN 1 BYTE FROM SLAVE - */
	if (LenOfData > 1)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	2b01      	cmp	r3, #1
 8000dfa:	d930      	bls.n	8000e5e <I2C_MasterReceiveData+0x100>
	{
		// a. Clear ADDR flag [ADDR = 0]
		// Clearing: Cleared by software by reading SR1 Register followed reading SR2 or by hardware when PE = 0
		I2C_ClearADDRFlag(pI2CHandle);
 8000dfc:	68f8      	ldr	r0, [r7, #12]
 8000dfe:	f000 f8d7 	bl	8000fb0 <I2C_ClearADDRFlag>
		// Data reception begins: AFTER clearing ADDR Flag


		// b. Read data until LenOfData becomes 0
		for (uint32_t i = LenOfData; i > 0; i--)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	617b      	str	r3, [r7, #20]
 8000e06:	e027      	b.n	8000e58 <I2C_MasterReceiveData+0xfa>
		{
			// c. Wait until RxNE becomes 1
			while (!(I2C_getFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_RXNE)));
 8000e08:	bf00      	nop
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	2140      	movs	r1, #64	; 0x40
 8000e10:	4618      	mov	r0, r3
 8000e12:	f000 f852 	bl	8000eba <I2C_getFlagStatus>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d0f6      	beq.n	8000e0a <I2C_MasterReceiveData+0xac>

			// d. Check: if only last 2 bytes are remaining
			if (i == 2)
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	2b02      	cmp	r3, #2
 8000e20:	d10e      	bne.n	8000e40 <I2C_MasterReceiveData+0xe2>
			{
				// Set ACK bit to 0 [DISABLE ACKing (in CR)]
				I2C_ManageACK(pI2CHandle->pI2Cx, I2C_ACK_DISABLE);
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	2100      	movs	r1, #0
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f000 f876 	bl	8000f1a <I2C_ManageACK>

				//  Set STOP bit to 1 [STOP condition (in CR)]
				if (repeatedStart == I2C_REPEATED_START_DI)
 8000e2e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d104      	bne.n	8000e40 <I2C_MasterReceiveData+0xe2>
				{
					// Check for Repeated Start then generate STOP condition
					I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f000 f82d 	bl	8000e9a <I2C_GenerateStopCondition>
				}

			}

			// e. Read the data in Rx Buffer (Read DR)
			*pRxBuffer = pI2CHandle->pI2Cx->DR;
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	691b      	ldr	r3, [r3, #16]
 8000e46:	b2da      	uxtb	r2, r3
 8000e48:	68bb      	ldr	r3, [r7, #8]
 8000e4a:	701a      	strb	r2, [r3, #0]

			// f. Increment the buffer address
			pRxBuffer++;
 8000e4c:	68bb      	ldr	r3, [r7, #8]
 8000e4e:	3301      	adds	r3, #1
 8000e50:	60bb      	str	r3, [r7, #8]
		for (uint32_t i = LenOfData; i > 0; i--)
 8000e52:	697b      	ldr	r3, [r7, #20]
 8000e54:	3b01      	subs	r3, #1
 8000e56:	617b      	str	r3, [r7, #20]
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d1d4      	bne.n	8000e08 <I2C_MasterReceiveData+0xaa>
		}

	}

	/* - Step 6: Set ACK bit back to 1 : Enable ACKing - */
	if(pI2CHandle->I2C_Config.I2C_ACK_Control == I2C_ACK_ENABLE)
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	7a5b      	ldrb	r3, [r3, #9]
 8000e62:	2b01      	cmp	r3, #1
 8000e64:	d105      	bne.n	8000e72 <I2C_MasterReceiveData+0x114>
	{
		I2C_ManageACK(pI2CHandle->pI2Cx, I2C_ACK_ENABLE);
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	2101      	movs	r1, #1
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f000 f854 	bl	8000f1a <I2C_ManageACK>
	}

}
 8000e72:	bf00      	nop
 8000e74:	3718      	adds	r7, #24
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}

08000e7a <I2C_GenerateStartCondition>:
 * Return Type	:	none (void)
 * Note		:
 * 			To generate START condition
 * ------------------------------------------------------------------------------------------------------ */
void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx)
{
 8000e7a:	b480      	push	{r7}
 8000e7c:	b083      	sub	sp, #12
 8000e7e:	af00      	add	r7, sp, #0
 8000e80:	6078      	str	r0, [r7, #4]
	 * In SLAVE Mode
	 * 0: No start generation
	 * 1: Start generation when bus is free
	 *
	 * */
	pI2Cx->CR1 |= (1 << I2C_CR1_START);	// (1 << 8)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	601a      	str	r2, [r3, #0]

}
 8000e8e:	bf00      	nop
 8000e90:	370c      	adds	r7, #12
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr

08000e9a <I2C_GenerateStopCondition>:
 * Return Type	:	none (void)
 * Note		:
 * 			To generate STOP condition
 * ------------------------------------------------------------------------------------------------------ */
void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx)
{
 8000e9a:	b480      	push	{r7}
 8000e9c:	b083      	sub	sp, #12
 8000e9e:	af00      	add	r7, sp, #0
 8000ea0:	6078      	str	r0, [r7, #4]
	 * 0: No stop generation
	 * 1: Release the SCL and SDA line after current byte transfer
	 *
	 * */

	pI2Cx->CR1 |= (1 << I2C_CR1_STOP);	// (1 << 9)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	601a      	str	r2, [r3, #0]

}
 8000eae:	bf00      	nop
 8000eb0:	370c      	adds	r7, #12
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr

08000eba <I2C_getFlagStatus>:
 * Parameter 2  :   	Flag Name
 * Return Type	:	True or False (1 or 0)
 * Note		:
 * ------------------------------------------------------------------------------------------------------ */
uint8_t I2C_getFlagStatus (I2C_RegDef_t *pI2Cx, uint32_t FlagName)
{
 8000eba:	b480      	push	{r7}
 8000ebc:	b083      	sub	sp, #12
 8000ebe:	af00      	add	r7, sp, #0
 8000ec0:	6078      	str	r0, [r7, #4]
 8000ec2:	6039      	str	r1, [r7, #0]
	if (pI2Cx->SR1 & FlagName)  // if that Flag is set then execute
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	695a      	ldr	r2, [r3, #20]
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	4013      	ands	r3, r2
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <I2C_getFlagStatus+0x1a>
	{
		return FLAG_SET;
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	e000      	b.n	8000ed6 <I2C_getFlagStatus+0x1c>

	}

	return FLAG_RESET;
 8000ed4:	2300      	movs	r3, #0
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	370c      	adds	r7, #12
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr

08000ee2 <I2C_PeripheralControl>:
 * Return Type	:	none
 * Note		:	I2C Peripherals are disabled by default
 *
 * ------------------------------------------------------------------------------------------------------ */
void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 8000ee2:	b480      	push	{r7}
 8000ee4:	b083      	sub	sp, #12
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	6078      	str	r0, [r7, #4]
 8000eea:	460b      	mov	r3, r1
 8000eec:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE)
 8000eee:	78fb      	ldrb	r3, [r7, #3]
 8000ef0:	2b01      	cmp	r3, #1
 8000ef2:	d106      	bne.n	8000f02 <I2C_PeripheralControl+0x20>
	{
		pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f043 0201 	orr.w	r2, r3, #1
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	601a      	str	r2, [r3, #0]
	}
	else
	{
		pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
	}
}
 8000f00:	e005      	b.n	8000f0e <I2C_PeripheralControl+0x2c>
		pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f023 0201 	bic.w	r2, r3, #1
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	601a      	str	r2, [r3, #0]
}
 8000f0e:	bf00      	nop
 8000f10:	370c      	adds	r7, #12
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr

08000f1a <I2C_ManageACK>:
 * Return Type	:	none
 * Note		:
 *
 * ------------------------------------------------------------------------------------------------------ */
void I2C_ManageACK(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	b083      	sub	sp, #12
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	6078      	str	r0, [r7, #4]
 8000f22:	460b      	mov	r3, r1
 8000f24:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == I2C_ACK_ENABLE)
 8000f26:	78fb      	ldrb	r3, [r7, #3]
 8000f28:	2b01      	cmp	r3, #1
 8000f2a:	d106      	bne.n	8000f3a <I2C_ManageACK+0x20>
	{
		// Enable ACKing: In CR1 set 10th bit
		pI2Cx->CR1 |= (1 << I2C_CR1_ACK);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	601a      	str	r2, [r3, #0]
	}
	else
	{
		// Meh
	}
}
 8000f38:	e008      	b.n	8000f4c <I2C_ManageACK+0x32>
	else if (EnorDi == I2C_ACK_DISABLE)
 8000f3a:	78fb      	ldrb	r3, [r7, #3]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d105      	bne.n	8000f4c <I2C_ManageACK+0x32>
		pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	601a      	str	r2, [r3, #0]
}
 8000f4c:	bf00      	nop
 8000f4e:	370c      	adds	r7, #12
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr

08000f58 <I2C_ExecuteAddressPhase_Write>:
 * Note		:	Private helper function
 *				[7 bits] : Address
 *				[1 bit]	 : R/~W as 0 (indicating Master Tx -> Slave Rx)
 * ------------------------------------------------------------------------------------------------------ */
static void I2C_ExecuteAddressPhase_Write(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddress)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
 8000f60:	460b      	mov	r3, r1
 8000f62:	70fb      	strb	r3, [r7, #3]
	/* - Total 8 bits (7 bit Slave address + 1 R/~W bit - */

	// Make space for R/~W bit (Shift Slave address by 1)
	SlaveAddress = (SlaveAddress << 1);
 8000f64:	78fb      	ldrb	r3, [r7, #3]
 8000f66:	005b      	lsls	r3, r3, #1
 8000f68:	70fb      	strb	r3, [r7, #3]

	// clear the 0th bit (0 -> writing)
	SlaveAddress &= ~(1);
 8000f6a:	78fb      	ldrb	r3, [r7, #3]
 8000f6c:	f023 0301 	bic.w	r3, r3, #1
 8000f70:	70fb      	strb	r3, [r7, #3]

	// Put data (SlaveAddress) in Data Register
	pI2Cx->DR = SlaveAddress;
 8000f72:	78fa      	ldrb	r2, [r7, #3]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	611a      	str	r2, [r3, #16]

}
 8000f78:	bf00      	nop
 8000f7a:	370c      	adds	r7, #12
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr

08000f84 <I2C_ExecuteAddressPhase_Read>:
 * Note		:	Private helper function
 *				[7 bits] : Address
 *				[1 bit]	 : R/~W as 1 (indicating Master Rx <- Slave Tx)
 * ------------------------------------------------------------------------------------------------------ */
static void I2C_ExecuteAddressPhase_Read(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddress)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
 8000f8c:	460b      	mov	r3, r1
 8000f8e:	70fb      	strb	r3, [r7, #3]
	/* - Total 8 bits (7 bit Slave address + 1 R/~W bit - */

	// Make space for R/~W bit (Shift Slave address by 1)
	SlaveAddress = (SlaveAddress << 1);
 8000f90:	78fb      	ldrb	r3, [r7, #3]
 8000f92:	005b      	lsls	r3, r3, #1
 8000f94:	70fb      	strb	r3, [r7, #3]

	// set the 0th bit (1 -> Reading)
	SlaveAddress |= 1;
 8000f96:	78fb      	ldrb	r3, [r7, #3]
 8000f98:	f043 0301 	orr.w	r3, r3, #1
 8000f9c:	70fb      	strb	r3, [r7, #3]

	// Put data (SlaveAddress) in Data Register
	pI2Cx->DR = SlaveAddress;
 8000f9e:	78fa      	ldrb	r2, [r7, #3]
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	611a      	str	r2, [r3, #16]

}
 8000fa4:	bf00      	nop
 8000fa6:	370c      	adds	r7, #12
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr

08000fb0 <I2C_ClearADDRFlag>:
 * Return Type	:	none (void)
 * Note		:	Private helper function
 *
 * ------------------------------------------------------------------------------------------------------ */
static void I2C_ClearADDRFlag(I2C_Handle_t *pI2CHandle)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b084      	sub	sp, #16
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
	// Clearing: Cleared by software by reading SR1 Register followed reading SR2 or by hardware when PE = 0
	// Simply read SR1 and SR2
	uint32_t dummyRead;

	// 1. Check if for Device Mode [MSL bit in SR2: if 1 -> Master Mode; 0 -> Slave Mode]
	if (pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_MSL))
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	699b      	ldr	r3, [r3, #24]
 8000fbe:	f003 0301 	and.w	r3, r3, #1
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d01f      	beq.n	8001006 <I2C_ClearADDRFlag+0x56>
	{
		/* -True: Device is in Master Mode- */

		// Check Application's State [Should be Busy in Rx]
		if (pI2CHandle->TxRxState == I2C_BUSY_IN_RX)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	7f1b      	ldrb	r3, [r3, #28]
 8000fca:	2b01      	cmp	r3, #1
 8000fcc:	d112      	bne.n	8000ff4 <I2C_ClearADDRFlag+0x44>
		{
			// Now check, RxSize
			if (pI2CHandle->RxSize == 1)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	6a1b      	ldr	r3, [r3, #32]
 8000fd2:	2b01      	cmp	r3, #1
 8000fd4:	d11f      	bne.n	8001016 <I2C_ClearADDRFlag+0x66>
			{
				// a. Disable ACKing
				I2C_ManageACK(pI2CHandle->pI2Cx, DISABLE);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	2100      	movs	r1, #0
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f7ff ff9c 	bl	8000f1a <I2C_ManageACK>

				// b. Now Clear the ADDR Flag [by Reading SR1 and then SR2]

				dummyRead = pI2CHandle->pI2Cx->SR1;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	695b      	ldr	r3, [r3, #20]
 8000fe8:	60fb      	str	r3, [r7, #12]
				dummyRead = pI2CHandle->pI2Cx->SR2;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	699b      	ldr	r3, [r3, #24]
 8000ff0:	60fb      	str	r3, [r7, #12]
		(void) dummyRead;

	}


}
 8000ff2:	e010      	b.n	8001016 <I2C_ClearADDRFlag+0x66>
			dummyRead = pI2CHandle->pI2Cx->SR1;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	695b      	ldr	r3, [r3, #20]
 8000ffa:	60fb      	str	r3, [r7, #12]
			dummyRead = pI2CHandle->pI2Cx->SR2;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	699b      	ldr	r3, [r3, #24]
 8001002:	60fb      	str	r3, [r7, #12]
}
 8001004:	e007      	b.n	8001016 <I2C_ClearADDRFlag+0x66>
		dummyRead = pI2CHandle->pI2Cx->SR1;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	695b      	ldr	r3, [r3, #20]
 800100c:	60fb      	str	r3, [r7, #12]
		dummyRead = pI2CHandle->pI2Cx->SR2;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	699b      	ldr	r3, [r3, #24]
 8001014:	60fb      	str	r3, [r7, #12]
}
 8001016:	bf00      	nop
 8001018:	3710      	adds	r7, #16
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
	...

08001020 <RCC_Pclk1_Value>:
 *
 *			USART2, USART3, UART4, UART5 are connected to APB1 Bus
 *			I2Cx is connected to APB1 Bus
 * ------------------------------------------------------------------------------------------------------ */
uint32_t RCC_Pclk1_Value(void)
{
 8001020:	b480      	push	{r7}
 8001022:	b085      	sub	sp, #20
 8001024:	af00      	add	r7, sp, #0
	 * */
	uint8_t sysClkSource;
	uint32_t sysClockFreq;
	// Read 3rd and 2nd bit from CFGR register
	// To read, right shift CFGR by 2 (this will bring bit 3 and 2 to 0th and 1st bit position and then, Mask them)
	sysClkSource = ((RCC->CFGR >> 2) & 0x03);
 8001026:	4b23      	ldr	r3, [pc, #140]	; (80010b4 <RCC_Pclk1_Value+0x94>)
 8001028:	689b      	ldr	r3, [r3, #8]
 800102a:	089b      	lsrs	r3, r3, #2
 800102c:	b2db      	uxtb	r3, r3
 800102e:	f003 0303 	and.w	r3, r3, #3
 8001032:	727b      	strb	r3, [r7, #9]

	// Now check for System Clock Source
	if (sysClkSource == 0)
 8001034:	7a7b      	ldrb	r3, [r7, #9]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d102      	bne.n	8001040 <RCC_Pclk1_Value+0x20>
	{
		// HSI oscillator used as the system clock (16HMz)
		sysClockFreq = 16000000;
 800103a:	4b1f      	ldr	r3, [pc, #124]	; (80010b8 <RCC_Pclk1_Value+0x98>)
 800103c:	60fb      	str	r3, [r7, #12]
 800103e:	e004      	b.n	800104a <RCC_Pclk1_Value+0x2a>
	}
	else if (sysClkSource == 1)
 8001040:	7a7b      	ldrb	r3, [r7, #9]
 8001042:	2b01      	cmp	r3, #1
 8001044:	d101      	bne.n	800104a <RCC_Pclk1_Value+0x2a>
	{
		// HSE oscillator used as the system clock (8HMz)
		sysClockFreq = 8000000;
 8001046:	4b1d      	ldr	r3, [pc, #116]	; (80010bc <RCC_Pclk1_Value+0x9c>)
 8001048:	60fb      	str	r3, [r7, #12]

	uint8_t temp;
	uint8_t ahb_pres;

	// Read the value of HPRE and shift the value to right and then, Mask them
	temp = ((RCC->CFGR >> 4) & 0xF);
 800104a:	4b1a      	ldr	r3, [pc, #104]	; (80010b4 <RCC_Pclk1_Value+0x94>)
 800104c:	689b      	ldr	r3, [r3, #8]
 800104e:	091b      	lsrs	r3, r3, #4
 8001050:	b2db      	uxtb	r3, r3
 8001052:	f003 030f 	and.w	r3, r3, #15
 8001056:	723b      	strb	r3, [r7, #8]

	if (temp < 8)
 8001058:	7a3b      	ldrb	r3, [r7, #8]
 800105a:	2b07      	cmp	r3, #7
 800105c:	d802      	bhi.n	8001064 <RCC_Pclk1_Value+0x44>
	{
		// System Clock is not divided, AHB Prescaler is 1
		ahb_pres = 1;
 800105e:	2301      	movs	r3, #1
 8001060:	72fb      	strb	r3, [r7, #11]
 8001062:	e005      	b.n	8001070 <RCC_Pclk1_Value+0x50>
	}
	else
	{
		// AHB prescaler value depends upon temp variable
		ahb_pres = ahb_prescaler[temp - 8];		// if temp is 8 then, fetch 1st array value (0th element), and so on.
 8001064:	7a3b      	ldrb	r3, [r7, #8]
 8001066:	3b08      	subs	r3, #8
 8001068:	4a15      	ldr	r2, [pc, #84]	; (80010c0 <RCC_Pclk1_Value+0xa0>)
 800106a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800106e:	72fb      	strb	r3, [r7, #11]
	 * */

	uint8_t apb1_pres;

	// Read the value of PPRE1 and shift the value to right and then, Mask them
	temp = ((RCC->CFGR >> 10) & 0x7);
 8001070:	4b10      	ldr	r3, [pc, #64]	; (80010b4 <RCC_Pclk1_Value+0x94>)
 8001072:	689b      	ldr	r3, [r3, #8]
 8001074:	0a9b      	lsrs	r3, r3, #10
 8001076:	b2db      	uxtb	r3, r3
 8001078:	f003 0307 	and.w	r3, r3, #7
 800107c:	723b      	strb	r3, [r7, #8]

	if (temp < 4)
 800107e:	7a3b      	ldrb	r3, [r7, #8]
 8001080:	2b03      	cmp	r3, #3
 8001082:	d802      	bhi.n	800108a <RCC_Pclk1_Value+0x6a>
	{
		// AHB clock is not divided, APB1 Prescaler is 1
		apb1_pres = 1;
 8001084:	2301      	movs	r3, #1
 8001086:	72bb      	strb	r3, [r7, #10]
 8001088:	e004      	b.n	8001094 <RCC_Pclk1_Value+0x74>
	}
	else
	{
		// APB1 prescaler value depends upon temp variable
		apb1_pres = apb1_prescaler[temp - 4];		// if temp is 4 then, fetch 1st array value (0th element), and so on.
 800108a:	7a3b      	ldrb	r3, [r7, #8]
 800108c:	3b04      	subs	r3, #4
 800108e:	4a0d      	ldr	r2, [pc, #52]	; (80010c4 <RCC_Pclk1_Value+0xa4>)
 8001090:	5cd3      	ldrb	r3, [r2, r3]
 8001092:	72bb      	strb	r3, [r7, #10]

	}

	/* - Step 4: Derive Clock (Pclk1) - */
	pClk1 = (sysClockFreq / ahb_pres ) / apb1_pres;
 8001094:	7afb      	ldrb	r3, [r7, #11]
 8001096:	68fa      	ldr	r2, [r7, #12]
 8001098:	fbb2 f2f3 	udiv	r2, r2, r3
 800109c:	7abb      	ldrb	r3, [r7, #10]
 800109e:	fbb2 f3f3 	udiv	r3, r2, r3
 80010a2:	607b      	str	r3, [r7, #4]


	return pClk1;
 80010a4:	687b      	ldr	r3, [r7, #4]

}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3714      	adds	r7, #20
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop
 80010b4:	40023800 	.word	0x40023800
 80010b8:	00f42400 	.word	0x00f42400
 80010bc:	007a1200 	.word	0x007a1200
 80010c0:	20000000 	.word	0x20000000
 80010c4:	20000010 	.word	0x20000010

080010c8 <main>:
char* Time_to_String(RTC_Time_h *pRTCTime); // To convert time information into a string [hh:mm:ss]
char* Date_to_String(RTC_Date_h *pRTCDate); // To convert date information into a string [dd-mm-yy]


int main(void)
{
 80010c8:	b590      	push	{r4, r7, lr}
 80010ca:	b085      	sub	sp, #20
 80010cc:	af00      	add	r7, sp, #0

	/* -- To enable Semi-Hosting [before using any printfs] -- */
	initialise_monitor_handles();
 80010ce:	f001 fbd1 	bl	8002874 <initialise_monitor_handles>

	printf("DS1307 RTC: Basic Functionality. \n");
 80010d2:	482c      	ldr	r0, [pc, #176]	; (8001184 <main+0xbc>)
 80010d4:	f000 fa2a 	bl	800152c <puts>
	RTC_Time_h currentTime;

	char *AMorPM;

	// Initialize DS1307
	initORfail = DS1307_Init();
 80010d8:	f7ff f8e2 	bl	80002a0 <DS1307_Init>
 80010dc:	4603      	mov	r3, r0
 80010de:	72fb      	strb	r3, [r7, #11]

	if (initORfail)
 80010e0:	7afb      	ldrb	r3, [r7, #11]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d003      	beq.n	80010ee <main+0x26>
	{
		printf("DS1307 Initialization Failed. [Exit Manually]\n ");
 80010e6:	4828      	ldr	r0, [pc, #160]	; (8001188 <main+0xc0>)
 80010e8:	f000 f99a 	bl	8001420 <iprintf>
		while(1);
 80010ec:	e7fe      	b.n	80010ec <main+0x24>
	}

	// Program current time and date
	currentDate.date = 27;
 80010ee:	231b      	movs	r3, #27
 80010f0:	713b      	strb	r3, [r7, #4]
	currentDate.day = TUESDAY;
 80010f2:	2303      	movs	r3, #3
 80010f4:	717b      	strb	r3, [r7, #5]
	currentDate.month = 12;
 80010f6:	230c      	movs	r3, #12
 80010f8:	71bb      	strb	r3, [r7, #6]
	currentDate.year = 22;		// JUST last 2 digits
 80010fa:	2316      	movs	r3, #22
 80010fc:	71fb      	strb	r3, [r7, #7]

	currentTime.hours = 10;
 80010fe:	230a      	movs	r3, #10
 8001100:	70bb      	strb	r3, [r7, #2]
	currentTime.minutes = 25;
 8001102:	2319      	movs	r3, #25
 8001104:	707b      	strb	r3, [r7, #1]
	currentTime.seconds = 1;
 8001106:	2301      	movs	r3, #1
 8001108:	703b      	strb	r3, [r7, #0]
	currentTime.timeFormat = TIME_FORMAT_12H_PM;
 800110a:	2301      	movs	r3, #1
 800110c:	70fb      	strb	r3, [r7, #3]
//	DS1307_Set_Current_Date(&currentDate);
//	DS1307_Set_Current_Time(&currentTime);


	/* -- Get Current Time and Date -- */
	DS1307_Get_Current_Date(&currentDate);
 800110e:	1d3b      	adds	r3, r7, #4
 8001110:	4618      	mov	r0, r3
 8001112:	f7ff f936 	bl	8000382 <DS1307_Get_Current_Date>
	DS1307_Get_Current_Time(&currentTime);
 8001116:	463b      	mov	r3, r7
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff f8df 	bl	80002dc <DS1307_Get_Current_Time>

	if (currentTime.timeFormat != TIME_FORMAT_24H)
 800111e:	78fb      	ldrb	r3, [r7, #3]
 8001120:	2b02      	cmp	r3, #2
 8001122:	d012      	beq.n	800114a <main+0x82>
	{
		// Print Time with AM or PM details
		if (currentTime.timeFormat == TIME_FORMAT_12H_PM)
 8001124:	78fb      	ldrb	r3, [r7, #3]
 8001126:	2b01      	cmp	r3, #1
 8001128:	d102      	bne.n	8001130 <main+0x68>
		{
			// PM
			AMorPM = "PM";
 800112a:	4b18      	ldr	r3, [pc, #96]	; (800118c <main+0xc4>)
 800112c:	60fb      	str	r3, [r7, #12]
 800112e:	e001      	b.n	8001134 <main+0x6c>
		}
		else
		{
			// AM
			AMorPM = "AM";
 8001130:	4b17      	ldr	r3, [pc, #92]	; (8001190 <main+0xc8>)
 8001132:	60fb      	str	r3, [r7, #12]
		}

		printf("Current time = %s %s\n", Time_to_String(&currentTime), AMorPM);
 8001134:	463b      	mov	r3, r7
 8001136:	4618      	mov	r0, r3
 8001138:	f000 f86e 	bl	8001218 <Time_to_String>
 800113c:	4603      	mov	r3, r0
 800113e:	68fa      	ldr	r2, [r7, #12]
 8001140:	4619      	mov	r1, r3
 8001142:	4814      	ldr	r0, [pc, #80]	; (8001194 <main+0xcc>)
 8001144:	f000 f96c 	bl	8001420 <iprintf>
 8001148:	e008      	b.n	800115c <main+0x94>
	}
	else
	{
		// 24 Hours Format
		printf("Current time = %s\n", Time_to_String(&currentTime));
 800114a:	463b      	mov	r3, r7
 800114c:	4618      	mov	r0, r3
 800114e:	f000 f863 	bl	8001218 <Time_to_String>
 8001152:	4603      	mov	r3, r0
 8001154:	4619      	mov	r1, r3
 8001156:	4810      	ldr	r0, [pc, #64]	; (8001198 <main+0xd0>)
 8001158:	f000 f962 	bl	8001420 <iprintf>
	}

	// Print Date
	printf("Current Date = %s <%s> \n",Date_to_String(&currentDate), get_DayofWeek(currentDate.day));
 800115c:	1d3b      	adds	r3, r7, #4
 800115e:	4618      	mov	r0, r3
 8001160:	f000 f884 	bl	800126c <Date_to_String>
 8001164:	4604      	mov	r4, r0
 8001166:	797b      	ldrb	r3, [r7, #5]
 8001168:	4618      	mov	r0, r3
 800116a:	f000 f8a9 	bl	80012c0 <get_DayofWeek>
 800116e:	4603      	mov	r3, r0
 8001170:	461a      	mov	r2, r3
 8001172:	4621      	mov	r1, r4
 8001174:	4809      	ldr	r0, [pc, #36]	; (800119c <main+0xd4>)
 8001176:	f000 f953 	bl	8001420 <iprintf>

	return 0;
 800117a:	2300      	movs	r3, #0
}
 800117c:	4618      	mov	r0, r3
 800117e:	3714      	adds	r7, #20
 8001180:	46bd      	mov	sp, r7
 8001182:	bd90      	pop	{r4, r7, pc}
 8001184:	080029c8 	.word	0x080029c8
 8001188:	080029ec 	.word	0x080029ec
 800118c:	08002a1c 	.word	0x08002a1c
 8001190:	08002a20 	.word	0x08002a20
 8001194:	08002a24 	.word	0x08002a24
 8001198:	08002a3c 	.word	0x08002a3c
 800119c:	08002a50 	.word	0x08002a50

080011a0 <Number_to_String>:
 * Parameter 2	:	Buffer (char *)
 * Return Type	:	none (void)
 * Note		:
 * ------------------------------------------------------------------------------------------------------ */
void Number_to_String(uint8_t number, char* buff)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	4603      	mov	r3, r0
 80011a8:	6039      	str	r1, [r7, #0]
 80011aa:	71fb      	strb	r3, [r7, #7]
	if (number < 10)
 80011ac:	79fb      	ldrb	r3, [r7, #7]
 80011ae:	2b09      	cmp	r3, #9
 80011b0:	d809      	bhi.n	80011c6 <Number_to_String+0x26>
	{
		buff[0] = '0';
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	2230      	movs	r2, #48	; 0x30
 80011b6:	701a      	strb	r2, [r3, #0]
		buff[1] = number + 48;	// ASCII
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	3301      	adds	r3, #1
 80011bc:	79fa      	ldrb	r2, [r7, #7]
 80011be:	3230      	adds	r2, #48	; 0x30
 80011c0:	b2d2      	uxtb	r2, r2
 80011c2:	701a      	strb	r2, [r3, #0]
		buff[0] = (number / 10) + 48;	// Split and add 48
		buff[1] = (number % 10) + 48;

	}

}
 80011c4:	e01f      	b.n	8001206 <Number_to_String+0x66>
	else if (number >= 10 && number < 99)
 80011c6:	79fb      	ldrb	r3, [r7, #7]
 80011c8:	2b09      	cmp	r3, #9
 80011ca:	d91c      	bls.n	8001206 <Number_to_String+0x66>
 80011cc:	79fb      	ldrb	r3, [r7, #7]
 80011ce:	2b62      	cmp	r3, #98	; 0x62
 80011d0:	d819      	bhi.n	8001206 <Number_to_String+0x66>
		buff[0] = (number / 10) + 48;	// Split and add 48
 80011d2:	79fb      	ldrb	r3, [r7, #7]
 80011d4:	4a0f      	ldr	r2, [pc, #60]	; (8001214 <Number_to_String+0x74>)
 80011d6:	fba2 2303 	umull	r2, r3, r2, r3
 80011da:	08db      	lsrs	r3, r3, #3
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	3330      	adds	r3, #48	; 0x30
 80011e0:	b2da      	uxtb	r2, r3
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	701a      	strb	r2, [r3, #0]
		buff[1] = (number % 10) + 48;
 80011e6:	79fa      	ldrb	r2, [r7, #7]
 80011e8:	4b0a      	ldr	r3, [pc, #40]	; (8001214 <Number_to_String+0x74>)
 80011ea:	fba3 1302 	umull	r1, r3, r3, r2
 80011ee:	08d9      	lsrs	r1, r3, #3
 80011f0:	460b      	mov	r3, r1
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	440b      	add	r3, r1
 80011f6:	005b      	lsls	r3, r3, #1
 80011f8:	1ad3      	subs	r3, r2, r3
 80011fa:	b2da      	uxtb	r2, r3
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	3301      	adds	r3, #1
 8001200:	3230      	adds	r2, #48	; 0x30
 8001202:	b2d2      	uxtb	r2, r2
 8001204:	701a      	strb	r2, [r3, #0]
}
 8001206:	bf00      	nop
 8001208:	370c      	adds	r7, #12
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	cccccccd 	.word	0xcccccccd

08001218 <Time_to_String>:
 * Parameter 1	:	Handle pointer variable (RTC_Time_h)
 * Return Type	:	none (void)
 * Note		:	Also, converts string in hh:mm:ss format
 * ------------------------------------------------------------------------------------------------------ */
char* Time_to_String(RTC_Time_h *pRTCTime)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
	// Format -> hh:mm:ss [9 characters]

	static char timeBuff[9];

	timeBuff[2] = ':';
 8001220:	4b0f      	ldr	r3, [pc, #60]	; (8001260 <Time_to_String+0x48>)
 8001222:	223a      	movs	r2, #58	; 0x3a
 8001224:	709a      	strb	r2, [r3, #2]
	timeBuff[5] = ':';
 8001226:	4b0e      	ldr	r3, [pc, #56]	; (8001260 <Time_to_String+0x48>)
 8001228:	223a      	movs	r2, #58	; 0x3a
 800122a:	715a      	strb	r2, [r3, #5]

	Number_to_String(pRTCTime->hours, timeBuff);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	789b      	ldrb	r3, [r3, #2]
 8001230:	490b      	ldr	r1, [pc, #44]	; (8001260 <Time_to_String+0x48>)
 8001232:	4618      	mov	r0, r3
 8001234:	f7ff ffb4 	bl	80011a0 <Number_to_String>
	Number_to_String(pRTCTime->minutes, &timeBuff[3]);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	785b      	ldrb	r3, [r3, #1]
 800123c:	4909      	ldr	r1, [pc, #36]	; (8001264 <Time_to_String+0x4c>)
 800123e:	4618      	mov	r0, r3
 8001240:	f7ff ffae 	bl	80011a0 <Number_to_String>
	Number_to_String(pRTCTime->seconds, &timeBuff[6]);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	4907      	ldr	r1, [pc, #28]	; (8001268 <Time_to_String+0x50>)
 800124a:	4618      	mov	r0, r3
 800124c:	f7ff ffa8 	bl	80011a0 <Number_to_String>

	timeBuff[8] = '\0';
 8001250:	4b03      	ldr	r3, [pc, #12]	; (8001260 <Time_to_String+0x48>)
 8001252:	2200      	movs	r2, #0
 8001254:	721a      	strb	r2, [r3, #8]

	return timeBuff;
 8001256:	4b02      	ldr	r3, [pc, #8]	; (8001260 <Time_to_String+0x48>)

}
 8001258:	4618      	mov	r0, r3
 800125a:	3708      	adds	r7, #8
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	200000c4 	.word	0x200000c4
 8001264:	200000c7 	.word	0x200000c7
 8001268:	200000ca 	.word	0x200000ca

0800126c <Date_to_String>:
 * Parameter 1	:	Handle pointer variable (RTC_Date_h)
 * Return Type	:	none (void)
 * Note		:	Also, converts string in dd-mm-yy format
 * ------------------------------------------------------------------------------------------------------ */
char* Date_to_String(RTC_Date_h *pRTCDate)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
	// Format -> dd-mm-yy
	static char dateBuff[9];

	dateBuff[2] = '-';
 8001274:	4b0f      	ldr	r3, [pc, #60]	; (80012b4 <Date_to_String+0x48>)
 8001276:	222d      	movs	r2, #45	; 0x2d
 8001278:	709a      	strb	r2, [r3, #2]
	dateBuff[5] = '-';
 800127a:	4b0e      	ldr	r3, [pc, #56]	; (80012b4 <Date_to_String+0x48>)
 800127c:	222d      	movs	r2, #45	; 0x2d
 800127e:	715a      	strb	r2, [r3, #5]

	Number_to_String(pRTCDate->date,dateBuff);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	490b      	ldr	r1, [pc, #44]	; (80012b4 <Date_to_String+0x48>)
 8001286:	4618      	mov	r0, r3
 8001288:	f7ff ff8a 	bl	80011a0 <Number_to_String>
	Number_to_String(pRTCDate->month,&dateBuff[3]);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	789b      	ldrb	r3, [r3, #2]
 8001290:	4909      	ldr	r1, [pc, #36]	; (80012b8 <Date_to_String+0x4c>)
 8001292:	4618      	mov	r0, r3
 8001294:	f7ff ff84 	bl	80011a0 <Number_to_String>
	Number_to_String(pRTCDate->year,&dateBuff[6]);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	78db      	ldrb	r3, [r3, #3]
 800129c:	4907      	ldr	r1, [pc, #28]	; (80012bc <Date_to_String+0x50>)
 800129e:	4618      	mov	r0, r3
 80012a0:	f7ff ff7e 	bl	80011a0 <Number_to_String>

	dateBuff[8] = '\0';
 80012a4:	4b03      	ldr	r3, [pc, #12]	; (80012b4 <Date_to_String+0x48>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	721a      	strb	r2, [r3, #8]

	return dateBuff;
 80012aa:	4b02      	ldr	r3, [pc, #8]	; (80012b4 <Date_to_String+0x48>)

}
 80012ac:	4618      	mov	r0, r3
 80012ae:	3708      	adds	r7, #8
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	200000d0 	.word	0x200000d0
 80012b8:	200000d3 	.word	0x200000d3
 80012bc:	200000d6 	.word	0x200000d6

080012c0 <get_DayofWeek>:
 * Parameter 1	:	day (place) (uint8_t)
 * Return Type	:	day of week (char *)
 * Note		:
 * ------------------------------------------------------------------------------------------------------ */
char* get_DayofWeek(uint8_t day)
{
 80012c0:	b4b0      	push	{r4, r5, r7}
 80012c2:	b08b      	sub	sp, #44	; 0x2c
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	4603      	mov	r3, r0
 80012c8:	71fb      	strb	r3, [r7, #7]
	char* Days[] = {"Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"};
 80012ca:	4b0b      	ldr	r3, [pc, #44]	; (80012f8 <get_DayofWeek+0x38>)
 80012cc:	f107 040c 	add.w	r4, r7, #12
 80012d0:	461d      	mov	r5, r3
 80012d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012d6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80012da:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	return Days[day - 1];
 80012de:	79fb      	ldrb	r3, [r7, #7]
 80012e0:	3b01      	subs	r3, #1
 80012e2:	009b      	lsls	r3, r3, #2
 80012e4:	3328      	adds	r3, #40	; 0x28
 80012e6:	443b      	add	r3, r7
 80012e8:	f853 3c1c 	ldr.w	r3, [r3, #-28]
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	372c      	adds	r7, #44	; 0x2c
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bcb0      	pop	{r4, r5, r7}
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	08002a6c 	.word	0x08002a6c

080012fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b086      	sub	sp, #24
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001304:	4a14      	ldr	r2, [pc, #80]	; (8001358 <_sbrk+0x5c>)
 8001306:	4b15      	ldr	r3, [pc, #84]	; (800135c <_sbrk+0x60>)
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001310:	4b13      	ldr	r3, [pc, #76]	; (8001360 <_sbrk+0x64>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d102      	bne.n	800131e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001318:	4b11      	ldr	r3, [pc, #68]	; (8001360 <_sbrk+0x64>)
 800131a:	4a12      	ldr	r2, [pc, #72]	; (8001364 <_sbrk+0x68>)
 800131c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800131e:	4b10      	ldr	r3, [pc, #64]	; (8001360 <_sbrk+0x64>)
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4413      	add	r3, r2
 8001326:	693a      	ldr	r2, [r7, #16]
 8001328:	429a      	cmp	r2, r3
 800132a:	d207      	bcs.n	800133c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800132c:	f000 f846 	bl	80013bc <__errno>
 8001330:	4603      	mov	r3, r0
 8001332:	220c      	movs	r2, #12
 8001334:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001336:	f04f 33ff 	mov.w	r3, #4294967295
 800133a:	e009      	b.n	8001350 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800133c:	4b08      	ldr	r3, [pc, #32]	; (8001360 <_sbrk+0x64>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001342:	4b07      	ldr	r3, [pc, #28]	; (8001360 <_sbrk+0x64>)
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4413      	add	r3, r2
 800134a:	4a05      	ldr	r2, [pc, #20]	; (8001360 <_sbrk+0x64>)
 800134c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800134e:	68fb      	ldr	r3, [r7, #12]
}
 8001350:	4618      	mov	r0, r3
 8001352:	3718      	adds	r7, #24
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	20020000 	.word	0x20020000
 800135c:	00000400 	.word	0x00000400
 8001360:	200000dc 	.word	0x200000dc
 8001364:	200001a0 	.word	0x200001a0

08001368 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001368:	480d      	ldr	r0, [pc, #52]	; (80013a0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800136a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800136c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001370:	480c      	ldr	r0, [pc, #48]	; (80013a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001372:	490d      	ldr	r1, [pc, #52]	; (80013a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001374:	4a0d      	ldr	r2, [pc, #52]	; (80013ac <LoopForever+0xe>)
  movs r3, #0
 8001376:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001378:	e002      	b.n	8001380 <LoopCopyDataInit>

0800137a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800137a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800137c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800137e:	3304      	adds	r3, #4

08001380 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001380:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001382:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001384:	d3f9      	bcc.n	800137a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001386:	4a0a      	ldr	r2, [pc, #40]	; (80013b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001388:	4c0a      	ldr	r4, [pc, #40]	; (80013b4 <LoopForever+0x16>)
  movs r3, #0
 800138a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800138c:	e001      	b.n	8001392 <LoopFillZerobss>

0800138e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800138e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001390:	3204      	adds	r2, #4

08001392 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001392:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001394:	d3fb      	bcc.n	800138e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001396:	f000 f817 	bl	80013c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800139a:	f7ff fe95 	bl	80010c8 <main>

0800139e <LoopForever>:

LoopForever:
  b LoopForever
 800139e:	e7fe      	b.n	800139e <LoopForever>
  ldr   r0, =_estack
 80013a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80013a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013a8:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 80013ac:	08002b44 	.word	0x08002b44
  ldr r2, =_sbss
 80013b0:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 80013b4:	2000019c 	.word	0x2000019c

080013b8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013b8:	e7fe      	b.n	80013b8 <ADC_IRQHandler>
	...

080013bc <__errno>:
 80013bc:	4b01      	ldr	r3, [pc, #4]	; (80013c4 <__errno+0x8>)
 80013be:	6818      	ldr	r0, [r3, #0]
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	20000014 	.word	0x20000014

080013c8 <__libc_init_array>:
 80013c8:	b570      	push	{r4, r5, r6, lr}
 80013ca:	4d0d      	ldr	r5, [pc, #52]	; (8001400 <__libc_init_array+0x38>)
 80013cc:	4c0d      	ldr	r4, [pc, #52]	; (8001404 <__libc_init_array+0x3c>)
 80013ce:	1b64      	subs	r4, r4, r5
 80013d0:	10a4      	asrs	r4, r4, #2
 80013d2:	2600      	movs	r6, #0
 80013d4:	42a6      	cmp	r6, r4
 80013d6:	d109      	bne.n	80013ec <__libc_init_array+0x24>
 80013d8:	4d0b      	ldr	r5, [pc, #44]	; (8001408 <__libc_init_array+0x40>)
 80013da:	4c0c      	ldr	r4, [pc, #48]	; (800140c <__libc_init_array+0x44>)
 80013dc:	f001 fac6 	bl	800296c <_init>
 80013e0:	1b64      	subs	r4, r4, r5
 80013e2:	10a4      	asrs	r4, r4, #2
 80013e4:	2600      	movs	r6, #0
 80013e6:	42a6      	cmp	r6, r4
 80013e8:	d105      	bne.n	80013f6 <__libc_init_array+0x2e>
 80013ea:	bd70      	pop	{r4, r5, r6, pc}
 80013ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80013f0:	4798      	blx	r3
 80013f2:	3601      	adds	r6, #1
 80013f4:	e7ee      	b.n	80013d4 <__libc_init_array+0xc>
 80013f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80013fa:	4798      	blx	r3
 80013fc:	3601      	adds	r6, #1
 80013fe:	e7f2      	b.n	80013e6 <__libc_init_array+0x1e>
 8001400:	08002b3c 	.word	0x08002b3c
 8001404:	08002b3c 	.word	0x08002b3c
 8001408:	08002b3c 	.word	0x08002b3c
 800140c:	08002b40 	.word	0x08002b40

08001410 <memset>:
 8001410:	4402      	add	r2, r0
 8001412:	4603      	mov	r3, r0
 8001414:	4293      	cmp	r3, r2
 8001416:	d100      	bne.n	800141a <memset+0xa>
 8001418:	4770      	bx	lr
 800141a:	f803 1b01 	strb.w	r1, [r3], #1
 800141e:	e7f9      	b.n	8001414 <memset+0x4>

08001420 <iprintf>:
 8001420:	b40f      	push	{r0, r1, r2, r3}
 8001422:	4b0a      	ldr	r3, [pc, #40]	; (800144c <iprintf+0x2c>)
 8001424:	b513      	push	{r0, r1, r4, lr}
 8001426:	681c      	ldr	r4, [r3, #0]
 8001428:	b124      	cbz	r4, 8001434 <iprintf+0x14>
 800142a:	69a3      	ldr	r3, [r4, #24]
 800142c:	b913      	cbnz	r3, 8001434 <iprintf+0x14>
 800142e:	4620      	mov	r0, r4
 8001430:	f000 fa5e 	bl	80018f0 <__sinit>
 8001434:	ab05      	add	r3, sp, #20
 8001436:	9a04      	ldr	r2, [sp, #16]
 8001438:	68a1      	ldr	r1, [r4, #8]
 800143a:	9301      	str	r3, [sp, #4]
 800143c:	4620      	mov	r0, r4
 800143e:	f000 fc67 	bl	8001d10 <_vfiprintf_r>
 8001442:	b002      	add	sp, #8
 8001444:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001448:	b004      	add	sp, #16
 800144a:	4770      	bx	lr
 800144c:	20000014 	.word	0x20000014

08001450 <_puts_r>:
 8001450:	b570      	push	{r4, r5, r6, lr}
 8001452:	460e      	mov	r6, r1
 8001454:	4605      	mov	r5, r0
 8001456:	b118      	cbz	r0, 8001460 <_puts_r+0x10>
 8001458:	6983      	ldr	r3, [r0, #24]
 800145a:	b90b      	cbnz	r3, 8001460 <_puts_r+0x10>
 800145c:	f000 fa48 	bl	80018f0 <__sinit>
 8001460:	69ab      	ldr	r3, [r5, #24]
 8001462:	68ac      	ldr	r4, [r5, #8]
 8001464:	b913      	cbnz	r3, 800146c <_puts_r+0x1c>
 8001466:	4628      	mov	r0, r5
 8001468:	f000 fa42 	bl	80018f0 <__sinit>
 800146c:	4b2c      	ldr	r3, [pc, #176]	; (8001520 <_puts_r+0xd0>)
 800146e:	429c      	cmp	r4, r3
 8001470:	d120      	bne.n	80014b4 <_puts_r+0x64>
 8001472:	686c      	ldr	r4, [r5, #4]
 8001474:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001476:	07db      	lsls	r3, r3, #31
 8001478:	d405      	bmi.n	8001486 <_puts_r+0x36>
 800147a:	89a3      	ldrh	r3, [r4, #12]
 800147c:	0598      	lsls	r0, r3, #22
 800147e:	d402      	bmi.n	8001486 <_puts_r+0x36>
 8001480:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001482:	f000 fad3 	bl	8001a2c <__retarget_lock_acquire_recursive>
 8001486:	89a3      	ldrh	r3, [r4, #12]
 8001488:	0719      	lsls	r1, r3, #28
 800148a:	d51d      	bpl.n	80014c8 <_puts_r+0x78>
 800148c:	6923      	ldr	r3, [r4, #16]
 800148e:	b1db      	cbz	r3, 80014c8 <_puts_r+0x78>
 8001490:	3e01      	subs	r6, #1
 8001492:	68a3      	ldr	r3, [r4, #8]
 8001494:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001498:	3b01      	subs	r3, #1
 800149a:	60a3      	str	r3, [r4, #8]
 800149c:	bb39      	cbnz	r1, 80014ee <_puts_r+0x9e>
 800149e:	2b00      	cmp	r3, #0
 80014a0:	da38      	bge.n	8001514 <_puts_r+0xc4>
 80014a2:	4622      	mov	r2, r4
 80014a4:	210a      	movs	r1, #10
 80014a6:	4628      	mov	r0, r5
 80014a8:	f000 f848 	bl	800153c <__swbuf_r>
 80014ac:	3001      	adds	r0, #1
 80014ae:	d011      	beq.n	80014d4 <_puts_r+0x84>
 80014b0:	250a      	movs	r5, #10
 80014b2:	e011      	b.n	80014d8 <_puts_r+0x88>
 80014b4:	4b1b      	ldr	r3, [pc, #108]	; (8001524 <_puts_r+0xd4>)
 80014b6:	429c      	cmp	r4, r3
 80014b8:	d101      	bne.n	80014be <_puts_r+0x6e>
 80014ba:	68ac      	ldr	r4, [r5, #8]
 80014bc:	e7da      	b.n	8001474 <_puts_r+0x24>
 80014be:	4b1a      	ldr	r3, [pc, #104]	; (8001528 <_puts_r+0xd8>)
 80014c0:	429c      	cmp	r4, r3
 80014c2:	bf08      	it	eq
 80014c4:	68ec      	ldreq	r4, [r5, #12]
 80014c6:	e7d5      	b.n	8001474 <_puts_r+0x24>
 80014c8:	4621      	mov	r1, r4
 80014ca:	4628      	mov	r0, r5
 80014cc:	f000 f888 	bl	80015e0 <__swsetup_r>
 80014d0:	2800      	cmp	r0, #0
 80014d2:	d0dd      	beq.n	8001490 <_puts_r+0x40>
 80014d4:	f04f 35ff 	mov.w	r5, #4294967295
 80014d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80014da:	07da      	lsls	r2, r3, #31
 80014dc:	d405      	bmi.n	80014ea <_puts_r+0x9a>
 80014de:	89a3      	ldrh	r3, [r4, #12]
 80014e0:	059b      	lsls	r3, r3, #22
 80014e2:	d402      	bmi.n	80014ea <_puts_r+0x9a>
 80014e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80014e6:	f000 faa2 	bl	8001a2e <__retarget_lock_release_recursive>
 80014ea:	4628      	mov	r0, r5
 80014ec:	bd70      	pop	{r4, r5, r6, pc}
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	da04      	bge.n	80014fc <_puts_r+0xac>
 80014f2:	69a2      	ldr	r2, [r4, #24]
 80014f4:	429a      	cmp	r2, r3
 80014f6:	dc06      	bgt.n	8001506 <_puts_r+0xb6>
 80014f8:	290a      	cmp	r1, #10
 80014fa:	d004      	beq.n	8001506 <_puts_r+0xb6>
 80014fc:	6823      	ldr	r3, [r4, #0]
 80014fe:	1c5a      	adds	r2, r3, #1
 8001500:	6022      	str	r2, [r4, #0]
 8001502:	7019      	strb	r1, [r3, #0]
 8001504:	e7c5      	b.n	8001492 <_puts_r+0x42>
 8001506:	4622      	mov	r2, r4
 8001508:	4628      	mov	r0, r5
 800150a:	f000 f817 	bl	800153c <__swbuf_r>
 800150e:	3001      	adds	r0, #1
 8001510:	d1bf      	bne.n	8001492 <_puts_r+0x42>
 8001512:	e7df      	b.n	80014d4 <_puts_r+0x84>
 8001514:	6823      	ldr	r3, [r4, #0]
 8001516:	250a      	movs	r5, #10
 8001518:	1c5a      	adds	r2, r3, #1
 800151a:	6022      	str	r2, [r4, #0]
 800151c:	701d      	strb	r5, [r3, #0]
 800151e:	e7db      	b.n	80014d8 <_puts_r+0x88>
 8001520:	08002aac 	.word	0x08002aac
 8001524:	08002acc 	.word	0x08002acc
 8001528:	08002a8c 	.word	0x08002a8c

0800152c <puts>:
 800152c:	4b02      	ldr	r3, [pc, #8]	; (8001538 <puts+0xc>)
 800152e:	4601      	mov	r1, r0
 8001530:	6818      	ldr	r0, [r3, #0]
 8001532:	f7ff bf8d 	b.w	8001450 <_puts_r>
 8001536:	bf00      	nop
 8001538:	20000014 	.word	0x20000014

0800153c <__swbuf_r>:
 800153c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800153e:	460e      	mov	r6, r1
 8001540:	4614      	mov	r4, r2
 8001542:	4605      	mov	r5, r0
 8001544:	b118      	cbz	r0, 800154e <__swbuf_r+0x12>
 8001546:	6983      	ldr	r3, [r0, #24]
 8001548:	b90b      	cbnz	r3, 800154e <__swbuf_r+0x12>
 800154a:	f000 f9d1 	bl	80018f0 <__sinit>
 800154e:	4b21      	ldr	r3, [pc, #132]	; (80015d4 <__swbuf_r+0x98>)
 8001550:	429c      	cmp	r4, r3
 8001552:	d12b      	bne.n	80015ac <__swbuf_r+0x70>
 8001554:	686c      	ldr	r4, [r5, #4]
 8001556:	69a3      	ldr	r3, [r4, #24]
 8001558:	60a3      	str	r3, [r4, #8]
 800155a:	89a3      	ldrh	r3, [r4, #12]
 800155c:	071a      	lsls	r2, r3, #28
 800155e:	d52f      	bpl.n	80015c0 <__swbuf_r+0x84>
 8001560:	6923      	ldr	r3, [r4, #16]
 8001562:	b36b      	cbz	r3, 80015c0 <__swbuf_r+0x84>
 8001564:	6923      	ldr	r3, [r4, #16]
 8001566:	6820      	ldr	r0, [r4, #0]
 8001568:	1ac0      	subs	r0, r0, r3
 800156a:	6963      	ldr	r3, [r4, #20]
 800156c:	b2f6      	uxtb	r6, r6
 800156e:	4283      	cmp	r3, r0
 8001570:	4637      	mov	r7, r6
 8001572:	dc04      	bgt.n	800157e <__swbuf_r+0x42>
 8001574:	4621      	mov	r1, r4
 8001576:	4628      	mov	r0, r5
 8001578:	f000 f926 	bl	80017c8 <_fflush_r>
 800157c:	bb30      	cbnz	r0, 80015cc <__swbuf_r+0x90>
 800157e:	68a3      	ldr	r3, [r4, #8]
 8001580:	3b01      	subs	r3, #1
 8001582:	60a3      	str	r3, [r4, #8]
 8001584:	6823      	ldr	r3, [r4, #0]
 8001586:	1c5a      	adds	r2, r3, #1
 8001588:	6022      	str	r2, [r4, #0]
 800158a:	701e      	strb	r6, [r3, #0]
 800158c:	6963      	ldr	r3, [r4, #20]
 800158e:	3001      	adds	r0, #1
 8001590:	4283      	cmp	r3, r0
 8001592:	d004      	beq.n	800159e <__swbuf_r+0x62>
 8001594:	89a3      	ldrh	r3, [r4, #12]
 8001596:	07db      	lsls	r3, r3, #31
 8001598:	d506      	bpl.n	80015a8 <__swbuf_r+0x6c>
 800159a:	2e0a      	cmp	r6, #10
 800159c:	d104      	bne.n	80015a8 <__swbuf_r+0x6c>
 800159e:	4621      	mov	r1, r4
 80015a0:	4628      	mov	r0, r5
 80015a2:	f000 f911 	bl	80017c8 <_fflush_r>
 80015a6:	b988      	cbnz	r0, 80015cc <__swbuf_r+0x90>
 80015a8:	4638      	mov	r0, r7
 80015aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80015ac:	4b0a      	ldr	r3, [pc, #40]	; (80015d8 <__swbuf_r+0x9c>)
 80015ae:	429c      	cmp	r4, r3
 80015b0:	d101      	bne.n	80015b6 <__swbuf_r+0x7a>
 80015b2:	68ac      	ldr	r4, [r5, #8]
 80015b4:	e7cf      	b.n	8001556 <__swbuf_r+0x1a>
 80015b6:	4b09      	ldr	r3, [pc, #36]	; (80015dc <__swbuf_r+0xa0>)
 80015b8:	429c      	cmp	r4, r3
 80015ba:	bf08      	it	eq
 80015bc:	68ec      	ldreq	r4, [r5, #12]
 80015be:	e7ca      	b.n	8001556 <__swbuf_r+0x1a>
 80015c0:	4621      	mov	r1, r4
 80015c2:	4628      	mov	r0, r5
 80015c4:	f000 f80c 	bl	80015e0 <__swsetup_r>
 80015c8:	2800      	cmp	r0, #0
 80015ca:	d0cb      	beq.n	8001564 <__swbuf_r+0x28>
 80015cc:	f04f 37ff 	mov.w	r7, #4294967295
 80015d0:	e7ea      	b.n	80015a8 <__swbuf_r+0x6c>
 80015d2:	bf00      	nop
 80015d4:	08002aac 	.word	0x08002aac
 80015d8:	08002acc 	.word	0x08002acc
 80015dc:	08002a8c 	.word	0x08002a8c

080015e0 <__swsetup_r>:
 80015e0:	4b32      	ldr	r3, [pc, #200]	; (80016ac <__swsetup_r+0xcc>)
 80015e2:	b570      	push	{r4, r5, r6, lr}
 80015e4:	681d      	ldr	r5, [r3, #0]
 80015e6:	4606      	mov	r6, r0
 80015e8:	460c      	mov	r4, r1
 80015ea:	b125      	cbz	r5, 80015f6 <__swsetup_r+0x16>
 80015ec:	69ab      	ldr	r3, [r5, #24]
 80015ee:	b913      	cbnz	r3, 80015f6 <__swsetup_r+0x16>
 80015f0:	4628      	mov	r0, r5
 80015f2:	f000 f97d 	bl	80018f0 <__sinit>
 80015f6:	4b2e      	ldr	r3, [pc, #184]	; (80016b0 <__swsetup_r+0xd0>)
 80015f8:	429c      	cmp	r4, r3
 80015fa:	d10f      	bne.n	800161c <__swsetup_r+0x3c>
 80015fc:	686c      	ldr	r4, [r5, #4]
 80015fe:	89a3      	ldrh	r3, [r4, #12]
 8001600:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001604:	0719      	lsls	r1, r3, #28
 8001606:	d42c      	bmi.n	8001662 <__swsetup_r+0x82>
 8001608:	06dd      	lsls	r5, r3, #27
 800160a:	d411      	bmi.n	8001630 <__swsetup_r+0x50>
 800160c:	2309      	movs	r3, #9
 800160e:	6033      	str	r3, [r6, #0]
 8001610:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001614:	81a3      	strh	r3, [r4, #12]
 8001616:	f04f 30ff 	mov.w	r0, #4294967295
 800161a:	e03e      	b.n	800169a <__swsetup_r+0xba>
 800161c:	4b25      	ldr	r3, [pc, #148]	; (80016b4 <__swsetup_r+0xd4>)
 800161e:	429c      	cmp	r4, r3
 8001620:	d101      	bne.n	8001626 <__swsetup_r+0x46>
 8001622:	68ac      	ldr	r4, [r5, #8]
 8001624:	e7eb      	b.n	80015fe <__swsetup_r+0x1e>
 8001626:	4b24      	ldr	r3, [pc, #144]	; (80016b8 <__swsetup_r+0xd8>)
 8001628:	429c      	cmp	r4, r3
 800162a:	bf08      	it	eq
 800162c:	68ec      	ldreq	r4, [r5, #12]
 800162e:	e7e6      	b.n	80015fe <__swsetup_r+0x1e>
 8001630:	0758      	lsls	r0, r3, #29
 8001632:	d512      	bpl.n	800165a <__swsetup_r+0x7a>
 8001634:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001636:	b141      	cbz	r1, 800164a <__swsetup_r+0x6a>
 8001638:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800163c:	4299      	cmp	r1, r3
 800163e:	d002      	beq.n	8001646 <__swsetup_r+0x66>
 8001640:	4630      	mov	r0, r6
 8001642:	f000 fa5b 	bl	8001afc <_free_r>
 8001646:	2300      	movs	r3, #0
 8001648:	6363      	str	r3, [r4, #52]	; 0x34
 800164a:	89a3      	ldrh	r3, [r4, #12]
 800164c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001650:	81a3      	strh	r3, [r4, #12]
 8001652:	2300      	movs	r3, #0
 8001654:	6063      	str	r3, [r4, #4]
 8001656:	6923      	ldr	r3, [r4, #16]
 8001658:	6023      	str	r3, [r4, #0]
 800165a:	89a3      	ldrh	r3, [r4, #12]
 800165c:	f043 0308 	orr.w	r3, r3, #8
 8001660:	81a3      	strh	r3, [r4, #12]
 8001662:	6923      	ldr	r3, [r4, #16]
 8001664:	b94b      	cbnz	r3, 800167a <__swsetup_r+0x9a>
 8001666:	89a3      	ldrh	r3, [r4, #12]
 8001668:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800166c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001670:	d003      	beq.n	800167a <__swsetup_r+0x9a>
 8001672:	4621      	mov	r1, r4
 8001674:	4630      	mov	r0, r6
 8001676:	f000 fa01 	bl	8001a7c <__smakebuf_r>
 800167a:	89a0      	ldrh	r0, [r4, #12]
 800167c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001680:	f010 0301 	ands.w	r3, r0, #1
 8001684:	d00a      	beq.n	800169c <__swsetup_r+0xbc>
 8001686:	2300      	movs	r3, #0
 8001688:	60a3      	str	r3, [r4, #8]
 800168a:	6963      	ldr	r3, [r4, #20]
 800168c:	425b      	negs	r3, r3
 800168e:	61a3      	str	r3, [r4, #24]
 8001690:	6923      	ldr	r3, [r4, #16]
 8001692:	b943      	cbnz	r3, 80016a6 <__swsetup_r+0xc6>
 8001694:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001698:	d1ba      	bne.n	8001610 <__swsetup_r+0x30>
 800169a:	bd70      	pop	{r4, r5, r6, pc}
 800169c:	0781      	lsls	r1, r0, #30
 800169e:	bf58      	it	pl
 80016a0:	6963      	ldrpl	r3, [r4, #20]
 80016a2:	60a3      	str	r3, [r4, #8]
 80016a4:	e7f4      	b.n	8001690 <__swsetup_r+0xb0>
 80016a6:	2000      	movs	r0, #0
 80016a8:	e7f7      	b.n	800169a <__swsetup_r+0xba>
 80016aa:	bf00      	nop
 80016ac:	20000014 	.word	0x20000014
 80016b0:	08002aac 	.word	0x08002aac
 80016b4:	08002acc 	.word	0x08002acc
 80016b8:	08002a8c 	.word	0x08002a8c

080016bc <__sflush_r>:
 80016bc:	898a      	ldrh	r2, [r1, #12]
 80016be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80016c2:	4605      	mov	r5, r0
 80016c4:	0710      	lsls	r0, r2, #28
 80016c6:	460c      	mov	r4, r1
 80016c8:	d458      	bmi.n	800177c <__sflush_r+0xc0>
 80016ca:	684b      	ldr	r3, [r1, #4]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	dc05      	bgt.n	80016dc <__sflush_r+0x20>
 80016d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	dc02      	bgt.n	80016dc <__sflush_r+0x20>
 80016d6:	2000      	movs	r0, #0
 80016d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80016dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80016de:	2e00      	cmp	r6, #0
 80016e0:	d0f9      	beq.n	80016d6 <__sflush_r+0x1a>
 80016e2:	2300      	movs	r3, #0
 80016e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80016e8:	682f      	ldr	r7, [r5, #0]
 80016ea:	602b      	str	r3, [r5, #0]
 80016ec:	d032      	beq.n	8001754 <__sflush_r+0x98>
 80016ee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80016f0:	89a3      	ldrh	r3, [r4, #12]
 80016f2:	075a      	lsls	r2, r3, #29
 80016f4:	d505      	bpl.n	8001702 <__sflush_r+0x46>
 80016f6:	6863      	ldr	r3, [r4, #4]
 80016f8:	1ac0      	subs	r0, r0, r3
 80016fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80016fc:	b10b      	cbz	r3, 8001702 <__sflush_r+0x46>
 80016fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001700:	1ac0      	subs	r0, r0, r3
 8001702:	2300      	movs	r3, #0
 8001704:	4602      	mov	r2, r0
 8001706:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001708:	6a21      	ldr	r1, [r4, #32]
 800170a:	4628      	mov	r0, r5
 800170c:	47b0      	blx	r6
 800170e:	1c43      	adds	r3, r0, #1
 8001710:	89a3      	ldrh	r3, [r4, #12]
 8001712:	d106      	bne.n	8001722 <__sflush_r+0x66>
 8001714:	6829      	ldr	r1, [r5, #0]
 8001716:	291d      	cmp	r1, #29
 8001718:	d82c      	bhi.n	8001774 <__sflush_r+0xb8>
 800171a:	4a2a      	ldr	r2, [pc, #168]	; (80017c4 <__sflush_r+0x108>)
 800171c:	40ca      	lsrs	r2, r1
 800171e:	07d6      	lsls	r6, r2, #31
 8001720:	d528      	bpl.n	8001774 <__sflush_r+0xb8>
 8001722:	2200      	movs	r2, #0
 8001724:	6062      	str	r2, [r4, #4]
 8001726:	04d9      	lsls	r1, r3, #19
 8001728:	6922      	ldr	r2, [r4, #16]
 800172a:	6022      	str	r2, [r4, #0]
 800172c:	d504      	bpl.n	8001738 <__sflush_r+0x7c>
 800172e:	1c42      	adds	r2, r0, #1
 8001730:	d101      	bne.n	8001736 <__sflush_r+0x7a>
 8001732:	682b      	ldr	r3, [r5, #0]
 8001734:	b903      	cbnz	r3, 8001738 <__sflush_r+0x7c>
 8001736:	6560      	str	r0, [r4, #84]	; 0x54
 8001738:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800173a:	602f      	str	r7, [r5, #0]
 800173c:	2900      	cmp	r1, #0
 800173e:	d0ca      	beq.n	80016d6 <__sflush_r+0x1a>
 8001740:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001744:	4299      	cmp	r1, r3
 8001746:	d002      	beq.n	800174e <__sflush_r+0x92>
 8001748:	4628      	mov	r0, r5
 800174a:	f000 f9d7 	bl	8001afc <_free_r>
 800174e:	2000      	movs	r0, #0
 8001750:	6360      	str	r0, [r4, #52]	; 0x34
 8001752:	e7c1      	b.n	80016d8 <__sflush_r+0x1c>
 8001754:	6a21      	ldr	r1, [r4, #32]
 8001756:	2301      	movs	r3, #1
 8001758:	4628      	mov	r0, r5
 800175a:	47b0      	blx	r6
 800175c:	1c41      	adds	r1, r0, #1
 800175e:	d1c7      	bne.n	80016f0 <__sflush_r+0x34>
 8001760:	682b      	ldr	r3, [r5, #0]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d0c4      	beq.n	80016f0 <__sflush_r+0x34>
 8001766:	2b1d      	cmp	r3, #29
 8001768:	d001      	beq.n	800176e <__sflush_r+0xb2>
 800176a:	2b16      	cmp	r3, #22
 800176c:	d101      	bne.n	8001772 <__sflush_r+0xb6>
 800176e:	602f      	str	r7, [r5, #0]
 8001770:	e7b1      	b.n	80016d6 <__sflush_r+0x1a>
 8001772:	89a3      	ldrh	r3, [r4, #12]
 8001774:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001778:	81a3      	strh	r3, [r4, #12]
 800177a:	e7ad      	b.n	80016d8 <__sflush_r+0x1c>
 800177c:	690f      	ldr	r7, [r1, #16]
 800177e:	2f00      	cmp	r7, #0
 8001780:	d0a9      	beq.n	80016d6 <__sflush_r+0x1a>
 8001782:	0793      	lsls	r3, r2, #30
 8001784:	680e      	ldr	r6, [r1, #0]
 8001786:	bf08      	it	eq
 8001788:	694b      	ldreq	r3, [r1, #20]
 800178a:	600f      	str	r7, [r1, #0]
 800178c:	bf18      	it	ne
 800178e:	2300      	movne	r3, #0
 8001790:	eba6 0807 	sub.w	r8, r6, r7
 8001794:	608b      	str	r3, [r1, #8]
 8001796:	f1b8 0f00 	cmp.w	r8, #0
 800179a:	dd9c      	ble.n	80016d6 <__sflush_r+0x1a>
 800179c:	6a21      	ldr	r1, [r4, #32]
 800179e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80017a0:	4643      	mov	r3, r8
 80017a2:	463a      	mov	r2, r7
 80017a4:	4628      	mov	r0, r5
 80017a6:	47b0      	blx	r6
 80017a8:	2800      	cmp	r0, #0
 80017aa:	dc06      	bgt.n	80017ba <__sflush_r+0xfe>
 80017ac:	89a3      	ldrh	r3, [r4, #12]
 80017ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017b2:	81a3      	strh	r3, [r4, #12]
 80017b4:	f04f 30ff 	mov.w	r0, #4294967295
 80017b8:	e78e      	b.n	80016d8 <__sflush_r+0x1c>
 80017ba:	4407      	add	r7, r0
 80017bc:	eba8 0800 	sub.w	r8, r8, r0
 80017c0:	e7e9      	b.n	8001796 <__sflush_r+0xda>
 80017c2:	bf00      	nop
 80017c4:	20400001 	.word	0x20400001

080017c8 <_fflush_r>:
 80017c8:	b538      	push	{r3, r4, r5, lr}
 80017ca:	690b      	ldr	r3, [r1, #16]
 80017cc:	4605      	mov	r5, r0
 80017ce:	460c      	mov	r4, r1
 80017d0:	b913      	cbnz	r3, 80017d8 <_fflush_r+0x10>
 80017d2:	2500      	movs	r5, #0
 80017d4:	4628      	mov	r0, r5
 80017d6:	bd38      	pop	{r3, r4, r5, pc}
 80017d8:	b118      	cbz	r0, 80017e2 <_fflush_r+0x1a>
 80017da:	6983      	ldr	r3, [r0, #24]
 80017dc:	b90b      	cbnz	r3, 80017e2 <_fflush_r+0x1a>
 80017de:	f000 f887 	bl	80018f0 <__sinit>
 80017e2:	4b14      	ldr	r3, [pc, #80]	; (8001834 <_fflush_r+0x6c>)
 80017e4:	429c      	cmp	r4, r3
 80017e6:	d11b      	bne.n	8001820 <_fflush_r+0x58>
 80017e8:	686c      	ldr	r4, [r5, #4]
 80017ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d0ef      	beq.n	80017d2 <_fflush_r+0xa>
 80017f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80017f4:	07d0      	lsls	r0, r2, #31
 80017f6:	d404      	bmi.n	8001802 <_fflush_r+0x3a>
 80017f8:	0599      	lsls	r1, r3, #22
 80017fa:	d402      	bmi.n	8001802 <_fflush_r+0x3a>
 80017fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80017fe:	f000 f915 	bl	8001a2c <__retarget_lock_acquire_recursive>
 8001802:	4628      	mov	r0, r5
 8001804:	4621      	mov	r1, r4
 8001806:	f7ff ff59 	bl	80016bc <__sflush_r>
 800180a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800180c:	07da      	lsls	r2, r3, #31
 800180e:	4605      	mov	r5, r0
 8001810:	d4e0      	bmi.n	80017d4 <_fflush_r+0xc>
 8001812:	89a3      	ldrh	r3, [r4, #12]
 8001814:	059b      	lsls	r3, r3, #22
 8001816:	d4dd      	bmi.n	80017d4 <_fflush_r+0xc>
 8001818:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800181a:	f000 f908 	bl	8001a2e <__retarget_lock_release_recursive>
 800181e:	e7d9      	b.n	80017d4 <_fflush_r+0xc>
 8001820:	4b05      	ldr	r3, [pc, #20]	; (8001838 <_fflush_r+0x70>)
 8001822:	429c      	cmp	r4, r3
 8001824:	d101      	bne.n	800182a <_fflush_r+0x62>
 8001826:	68ac      	ldr	r4, [r5, #8]
 8001828:	e7df      	b.n	80017ea <_fflush_r+0x22>
 800182a:	4b04      	ldr	r3, [pc, #16]	; (800183c <_fflush_r+0x74>)
 800182c:	429c      	cmp	r4, r3
 800182e:	bf08      	it	eq
 8001830:	68ec      	ldreq	r4, [r5, #12]
 8001832:	e7da      	b.n	80017ea <_fflush_r+0x22>
 8001834:	08002aac 	.word	0x08002aac
 8001838:	08002acc 	.word	0x08002acc
 800183c:	08002a8c 	.word	0x08002a8c

08001840 <std>:
 8001840:	2300      	movs	r3, #0
 8001842:	b510      	push	{r4, lr}
 8001844:	4604      	mov	r4, r0
 8001846:	e9c0 3300 	strd	r3, r3, [r0]
 800184a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800184e:	6083      	str	r3, [r0, #8]
 8001850:	8181      	strh	r1, [r0, #12]
 8001852:	6643      	str	r3, [r0, #100]	; 0x64
 8001854:	81c2      	strh	r2, [r0, #14]
 8001856:	6183      	str	r3, [r0, #24]
 8001858:	4619      	mov	r1, r3
 800185a:	2208      	movs	r2, #8
 800185c:	305c      	adds	r0, #92	; 0x5c
 800185e:	f7ff fdd7 	bl	8001410 <memset>
 8001862:	4b05      	ldr	r3, [pc, #20]	; (8001878 <std+0x38>)
 8001864:	6263      	str	r3, [r4, #36]	; 0x24
 8001866:	4b05      	ldr	r3, [pc, #20]	; (800187c <std+0x3c>)
 8001868:	62a3      	str	r3, [r4, #40]	; 0x28
 800186a:	4b05      	ldr	r3, [pc, #20]	; (8001880 <std+0x40>)
 800186c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800186e:	4b05      	ldr	r3, [pc, #20]	; (8001884 <std+0x44>)
 8001870:	6224      	str	r4, [r4, #32]
 8001872:	6323      	str	r3, [r4, #48]	; 0x30
 8001874:	bd10      	pop	{r4, pc}
 8001876:	bf00      	nop
 8001878:	080022b9 	.word	0x080022b9
 800187c:	080022db 	.word	0x080022db
 8001880:	08002313 	.word	0x08002313
 8001884:	08002337 	.word	0x08002337

08001888 <_cleanup_r>:
 8001888:	4901      	ldr	r1, [pc, #4]	; (8001890 <_cleanup_r+0x8>)
 800188a:	f000 b8af 	b.w	80019ec <_fwalk_reent>
 800188e:	bf00      	nop
 8001890:	080017c9 	.word	0x080017c9

08001894 <__sfmoreglue>:
 8001894:	b570      	push	{r4, r5, r6, lr}
 8001896:	2268      	movs	r2, #104	; 0x68
 8001898:	1e4d      	subs	r5, r1, #1
 800189a:	4355      	muls	r5, r2
 800189c:	460e      	mov	r6, r1
 800189e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80018a2:	f000 f997 	bl	8001bd4 <_malloc_r>
 80018a6:	4604      	mov	r4, r0
 80018a8:	b140      	cbz	r0, 80018bc <__sfmoreglue+0x28>
 80018aa:	2100      	movs	r1, #0
 80018ac:	e9c0 1600 	strd	r1, r6, [r0]
 80018b0:	300c      	adds	r0, #12
 80018b2:	60a0      	str	r0, [r4, #8]
 80018b4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80018b8:	f7ff fdaa 	bl	8001410 <memset>
 80018bc:	4620      	mov	r0, r4
 80018be:	bd70      	pop	{r4, r5, r6, pc}

080018c0 <__sfp_lock_acquire>:
 80018c0:	4801      	ldr	r0, [pc, #4]	; (80018c8 <__sfp_lock_acquire+0x8>)
 80018c2:	f000 b8b3 	b.w	8001a2c <__retarget_lock_acquire_recursive>
 80018c6:	bf00      	nop
 80018c8:	200000e1 	.word	0x200000e1

080018cc <__sfp_lock_release>:
 80018cc:	4801      	ldr	r0, [pc, #4]	; (80018d4 <__sfp_lock_release+0x8>)
 80018ce:	f000 b8ae 	b.w	8001a2e <__retarget_lock_release_recursive>
 80018d2:	bf00      	nop
 80018d4:	200000e1 	.word	0x200000e1

080018d8 <__sinit_lock_acquire>:
 80018d8:	4801      	ldr	r0, [pc, #4]	; (80018e0 <__sinit_lock_acquire+0x8>)
 80018da:	f000 b8a7 	b.w	8001a2c <__retarget_lock_acquire_recursive>
 80018de:	bf00      	nop
 80018e0:	200000e2 	.word	0x200000e2

080018e4 <__sinit_lock_release>:
 80018e4:	4801      	ldr	r0, [pc, #4]	; (80018ec <__sinit_lock_release+0x8>)
 80018e6:	f000 b8a2 	b.w	8001a2e <__retarget_lock_release_recursive>
 80018ea:	bf00      	nop
 80018ec:	200000e2 	.word	0x200000e2

080018f0 <__sinit>:
 80018f0:	b510      	push	{r4, lr}
 80018f2:	4604      	mov	r4, r0
 80018f4:	f7ff fff0 	bl	80018d8 <__sinit_lock_acquire>
 80018f8:	69a3      	ldr	r3, [r4, #24]
 80018fa:	b11b      	cbz	r3, 8001904 <__sinit+0x14>
 80018fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001900:	f7ff bff0 	b.w	80018e4 <__sinit_lock_release>
 8001904:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001908:	6523      	str	r3, [r4, #80]	; 0x50
 800190a:	4b13      	ldr	r3, [pc, #76]	; (8001958 <__sinit+0x68>)
 800190c:	4a13      	ldr	r2, [pc, #76]	; (800195c <__sinit+0x6c>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	62a2      	str	r2, [r4, #40]	; 0x28
 8001912:	42a3      	cmp	r3, r4
 8001914:	bf04      	itt	eq
 8001916:	2301      	moveq	r3, #1
 8001918:	61a3      	streq	r3, [r4, #24]
 800191a:	4620      	mov	r0, r4
 800191c:	f000 f820 	bl	8001960 <__sfp>
 8001920:	6060      	str	r0, [r4, #4]
 8001922:	4620      	mov	r0, r4
 8001924:	f000 f81c 	bl	8001960 <__sfp>
 8001928:	60a0      	str	r0, [r4, #8]
 800192a:	4620      	mov	r0, r4
 800192c:	f000 f818 	bl	8001960 <__sfp>
 8001930:	2200      	movs	r2, #0
 8001932:	60e0      	str	r0, [r4, #12]
 8001934:	2104      	movs	r1, #4
 8001936:	6860      	ldr	r0, [r4, #4]
 8001938:	f7ff ff82 	bl	8001840 <std>
 800193c:	68a0      	ldr	r0, [r4, #8]
 800193e:	2201      	movs	r2, #1
 8001940:	2109      	movs	r1, #9
 8001942:	f7ff ff7d 	bl	8001840 <std>
 8001946:	68e0      	ldr	r0, [r4, #12]
 8001948:	2202      	movs	r2, #2
 800194a:	2112      	movs	r1, #18
 800194c:	f7ff ff78 	bl	8001840 <std>
 8001950:	2301      	movs	r3, #1
 8001952:	61a3      	str	r3, [r4, #24]
 8001954:	e7d2      	b.n	80018fc <__sinit+0xc>
 8001956:	bf00      	nop
 8001958:	08002a88 	.word	0x08002a88
 800195c:	08001889 	.word	0x08001889

08001960 <__sfp>:
 8001960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001962:	4607      	mov	r7, r0
 8001964:	f7ff ffac 	bl	80018c0 <__sfp_lock_acquire>
 8001968:	4b1e      	ldr	r3, [pc, #120]	; (80019e4 <__sfp+0x84>)
 800196a:	681e      	ldr	r6, [r3, #0]
 800196c:	69b3      	ldr	r3, [r6, #24]
 800196e:	b913      	cbnz	r3, 8001976 <__sfp+0x16>
 8001970:	4630      	mov	r0, r6
 8001972:	f7ff ffbd 	bl	80018f0 <__sinit>
 8001976:	3648      	adds	r6, #72	; 0x48
 8001978:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800197c:	3b01      	subs	r3, #1
 800197e:	d503      	bpl.n	8001988 <__sfp+0x28>
 8001980:	6833      	ldr	r3, [r6, #0]
 8001982:	b30b      	cbz	r3, 80019c8 <__sfp+0x68>
 8001984:	6836      	ldr	r6, [r6, #0]
 8001986:	e7f7      	b.n	8001978 <__sfp+0x18>
 8001988:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800198c:	b9d5      	cbnz	r5, 80019c4 <__sfp+0x64>
 800198e:	4b16      	ldr	r3, [pc, #88]	; (80019e8 <__sfp+0x88>)
 8001990:	60e3      	str	r3, [r4, #12]
 8001992:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001996:	6665      	str	r5, [r4, #100]	; 0x64
 8001998:	f000 f847 	bl	8001a2a <__retarget_lock_init_recursive>
 800199c:	f7ff ff96 	bl	80018cc <__sfp_lock_release>
 80019a0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80019a4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80019a8:	6025      	str	r5, [r4, #0]
 80019aa:	61a5      	str	r5, [r4, #24]
 80019ac:	2208      	movs	r2, #8
 80019ae:	4629      	mov	r1, r5
 80019b0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80019b4:	f7ff fd2c 	bl	8001410 <memset>
 80019b8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80019bc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80019c0:	4620      	mov	r0, r4
 80019c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80019c4:	3468      	adds	r4, #104	; 0x68
 80019c6:	e7d9      	b.n	800197c <__sfp+0x1c>
 80019c8:	2104      	movs	r1, #4
 80019ca:	4638      	mov	r0, r7
 80019cc:	f7ff ff62 	bl	8001894 <__sfmoreglue>
 80019d0:	4604      	mov	r4, r0
 80019d2:	6030      	str	r0, [r6, #0]
 80019d4:	2800      	cmp	r0, #0
 80019d6:	d1d5      	bne.n	8001984 <__sfp+0x24>
 80019d8:	f7ff ff78 	bl	80018cc <__sfp_lock_release>
 80019dc:	230c      	movs	r3, #12
 80019de:	603b      	str	r3, [r7, #0]
 80019e0:	e7ee      	b.n	80019c0 <__sfp+0x60>
 80019e2:	bf00      	nop
 80019e4:	08002a88 	.word	0x08002a88
 80019e8:	ffff0001 	.word	0xffff0001

080019ec <_fwalk_reent>:
 80019ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80019f0:	4606      	mov	r6, r0
 80019f2:	4688      	mov	r8, r1
 80019f4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80019f8:	2700      	movs	r7, #0
 80019fa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80019fe:	f1b9 0901 	subs.w	r9, r9, #1
 8001a02:	d505      	bpl.n	8001a10 <_fwalk_reent+0x24>
 8001a04:	6824      	ldr	r4, [r4, #0]
 8001a06:	2c00      	cmp	r4, #0
 8001a08:	d1f7      	bne.n	80019fa <_fwalk_reent+0xe>
 8001a0a:	4638      	mov	r0, r7
 8001a0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001a10:	89ab      	ldrh	r3, [r5, #12]
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d907      	bls.n	8001a26 <_fwalk_reent+0x3a>
 8001a16:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001a1a:	3301      	adds	r3, #1
 8001a1c:	d003      	beq.n	8001a26 <_fwalk_reent+0x3a>
 8001a1e:	4629      	mov	r1, r5
 8001a20:	4630      	mov	r0, r6
 8001a22:	47c0      	blx	r8
 8001a24:	4307      	orrs	r7, r0
 8001a26:	3568      	adds	r5, #104	; 0x68
 8001a28:	e7e9      	b.n	80019fe <_fwalk_reent+0x12>

08001a2a <__retarget_lock_init_recursive>:
 8001a2a:	4770      	bx	lr

08001a2c <__retarget_lock_acquire_recursive>:
 8001a2c:	4770      	bx	lr

08001a2e <__retarget_lock_release_recursive>:
 8001a2e:	4770      	bx	lr

08001a30 <__swhatbuf_r>:
 8001a30:	b570      	push	{r4, r5, r6, lr}
 8001a32:	460e      	mov	r6, r1
 8001a34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001a38:	2900      	cmp	r1, #0
 8001a3a:	b096      	sub	sp, #88	; 0x58
 8001a3c:	4614      	mov	r4, r2
 8001a3e:	461d      	mov	r5, r3
 8001a40:	da08      	bge.n	8001a54 <__swhatbuf_r+0x24>
 8001a42:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8001a46:	2200      	movs	r2, #0
 8001a48:	602a      	str	r2, [r5, #0]
 8001a4a:	061a      	lsls	r2, r3, #24
 8001a4c:	d410      	bmi.n	8001a70 <__swhatbuf_r+0x40>
 8001a4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a52:	e00e      	b.n	8001a72 <__swhatbuf_r+0x42>
 8001a54:	466a      	mov	r2, sp
 8001a56:	f000 fc95 	bl	8002384 <_fstat_r>
 8001a5a:	2800      	cmp	r0, #0
 8001a5c:	dbf1      	blt.n	8001a42 <__swhatbuf_r+0x12>
 8001a5e:	9a01      	ldr	r2, [sp, #4]
 8001a60:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001a64:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001a68:	425a      	negs	r2, r3
 8001a6a:	415a      	adcs	r2, r3
 8001a6c:	602a      	str	r2, [r5, #0]
 8001a6e:	e7ee      	b.n	8001a4e <__swhatbuf_r+0x1e>
 8001a70:	2340      	movs	r3, #64	; 0x40
 8001a72:	2000      	movs	r0, #0
 8001a74:	6023      	str	r3, [r4, #0]
 8001a76:	b016      	add	sp, #88	; 0x58
 8001a78:	bd70      	pop	{r4, r5, r6, pc}
	...

08001a7c <__smakebuf_r>:
 8001a7c:	898b      	ldrh	r3, [r1, #12]
 8001a7e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001a80:	079d      	lsls	r5, r3, #30
 8001a82:	4606      	mov	r6, r0
 8001a84:	460c      	mov	r4, r1
 8001a86:	d507      	bpl.n	8001a98 <__smakebuf_r+0x1c>
 8001a88:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001a8c:	6023      	str	r3, [r4, #0]
 8001a8e:	6123      	str	r3, [r4, #16]
 8001a90:	2301      	movs	r3, #1
 8001a92:	6163      	str	r3, [r4, #20]
 8001a94:	b002      	add	sp, #8
 8001a96:	bd70      	pop	{r4, r5, r6, pc}
 8001a98:	ab01      	add	r3, sp, #4
 8001a9a:	466a      	mov	r2, sp
 8001a9c:	f7ff ffc8 	bl	8001a30 <__swhatbuf_r>
 8001aa0:	9900      	ldr	r1, [sp, #0]
 8001aa2:	4605      	mov	r5, r0
 8001aa4:	4630      	mov	r0, r6
 8001aa6:	f000 f895 	bl	8001bd4 <_malloc_r>
 8001aaa:	b948      	cbnz	r0, 8001ac0 <__smakebuf_r+0x44>
 8001aac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001ab0:	059a      	lsls	r2, r3, #22
 8001ab2:	d4ef      	bmi.n	8001a94 <__smakebuf_r+0x18>
 8001ab4:	f023 0303 	bic.w	r3, r3, #3
 8001ab8:	f043 0302 	orr.w	r3, r3, #2
 8001abc:	81a3      	strh	r3, [r4, #12]
 8001abe:	e7e3      	b.n	8001a88 <__smakebuf_r+0xc>
 8001ac0:	4b0d      	ldr	r3, [pc, #52]	; (8001af8 <__smakebuf_r+0x7c>)
 8001ac2:	62b3      	str	r3, [r6, #40]	; 0x28
 8001ac4:	89a3      	ldrh	r3, [r4, #12]
 8001ac6:	6020      	str	r0, [r4, #0]
 8001ac8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001acc:	81a3      	strh	r3, [r4, #12]
 8001ace:	9b00      	ldr	r3, [sp, #0]
 8001ad0:	6163      	str	r3, [r4, #20]
 8001ad2:	9b01      	ldr	r3, [sp, #4]
 8001ad4:	6120      	str	r0, [r4, #16]
 8001ad6:	b15b      	cbz	r3, 8001af0 <__smakebuf_r+0x74>
 8001ad8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001adc:	4630      	mov	r0, r6
 8001ade:	f000 fc63 	bl	80023a8 <_isatty_r>
 8001ae2:	b128      	cbz	r0, 8001af0 <__smakebuf_r+0x74>
 8001ae4:	89a3      	ldrh	r3, [r4, #12]
 8001ae6:	f023 0303 	bic.w	r3, r3, #3
 8001aea:	f043 0301 	orr.w	r3, r3, #1
 8001aee:	81a3      	strh	r3, [r4, #12]
 8001af0:	89a0      	ldrh	r0, [r4, #12]
 8001af2:	4305      	orrs	r5, r0
 8001af4:	81a5      	strh	r5, [r4, #12]
 8001af6:	e7cd      	b.n	8001a94 <__smakebuf_r+0x18>
 8001af8:	08001889 	.word	0x08001889

08001afc <_free_r>:
 8001afc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001afe:	2900      	cmp	r1, #0
 8001b00:	d044      	beq.n	8001b8c <_free_r+0x90>
 8001b02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001b06:	9001      	str	r0, [sp, #4]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	f1a1 0404 	sub.w	r4, r1, #4
 8001b0e:	bfb8      	it	lt
 8001b10:	18e4      	addlt	r4, r4, r3
 8001b12:	f000 fc6b 	bl	80023ec <__malloc_lock>
 8001b16:	4a1e      	ldr	r2, [pc, #120]	; (8001b90 <_free_r+0x94>)
 8001b18:	9801      	ldr	r0, [sp, #4]
 8001b1a:	6813      	ldr	r3, [r2, #0]
 8001b1c:	b933      	cbnz	r3, 8001b2c <_free_r+0x30>
 8001b1e:	6063      	str	r3, [r4, #4]
 8001b20:	6014      	str	r4, [r2, #0]
 8001b22:	b003      	add	sp, #12
 8001b24:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001b28:	f000 bc66 	b.w	80023f8 <__malloc_unlock>
 8001b2c:	42a3      	cmp	r3, r4
 8001b2e:	d908      	bls.n	8001b42 <_free_r+0x46>
 8001b30:	6825      	ldr	r5, [r4, #0]
 8001b32:	1961      	adds	r1, r4, r5
 8001b34:	428b      	cmp	r3, r1
 8001b36:	bf01      	itttt	eq
 8001b38:	6819      	ldreq	r1, [r3, #0]
 8001b3a:	685b      	ldreq	r3, [r3, #4]
 8001b3c:	1949      	addeq	r1, r1, r5
 8001b3e:	6021      	streq	r1, [r4, #0]
 8001b40:	e7ed      	b.n	8001b1e <_free_r+0x22>
 8001b42:	461a      	mov	r2, r3
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	b10b      	cbz	r3, 8001b4c <_free_r+0x50>
 8001b48:	42a3      	cmp	r3, r4
 8001b4a:	d9fa      	bls.n	8001b42 <_free_r+0x46>
 8001b4c:	6811      	ldr	r1, [r2, #0]
 8001b4e:	1855      	adds	r5, r2, r1
 8001b50:	42a5      	cmp	r5, r4
 8001b52:	d10b      	bne.n	8001b6c <_free_r+0x70>
 8001b54:	6824      	ldr	r4, [r4, #0]
 8001b56:	4421      	add	r1, r4
 8001b58:	1854      	adds	r4, r2, r1
 8001b5a:	42a3      	cmp	r3, r4
 8001b5c:	6011      	str	r1, [r2, #0]
 8001b5e:	d1e0      	bne.n	8001b22 <_free_r+0x26>
 8001b60:	681c      	ldr	r4, [r3, #0]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	6053      	str	r3, [r2, #4]
 8001b66:	4421      	add	r1, r4
 8001b68:	6011      	str	r1, [r2, #0]
 8001b6a:	e7da      	b.n	8001b22 <_free_r+0x26>
 8001b6c:	d902      	bls.n	8001b74 <_free_r+0x78>
 8001b6e:	230c      	movs	r3, #12
 8001b70:	6003      	str	r3, [r0, #0]
 8001b72:	e7d6      	b.n	8001b22 <_free_r+0x26>
 8001b74:	6825      	ldr	r5, [r4, #0]
 8001b76:	1961      	adds	r1, r4, r5
 8001b78:	428b      	cmp	r3, r1
 8001b7a:	bf04      	itt	eq
 8001b7c:	6819      	ldreq	r1, [r3, #0]
 8001b7e:	685b      	ldreq	r3, [r3, #4]
 8001b80:	6063      	str	r3, [r4, #4]
 8001b82:	bf04      	itt	eq
 8001b84:	1949      	addeq	r1, r1, r5
 8001b86:	6021      	streq	r1, [r4, #0]
 8001b88:	6054      	str	r4, [r2, #4]
 8001b8a:	e7ca      	b.n	8001b22 <_free_r+0x26>
 8001b8c:	b003      	add	sp, #12
 8001b8e:	bd30      	pop	{r4, r5, pc}
 8001b90:	200000e4 	.word	0x200000e4

08001b94 <sbrk_aligned>:
 8001b94:	b570      	push	{r4, r5, r6, lr}
 8001b96:	4e0e      	ldr	r6, [pc, #56]	; (8001bd0 <sbrk_aligned+0x3c>)
 8001b98:	460c      	mov	r4, r1
 8001b9a:	6831      	ldr	r1, [r6, #0]
 8001b9c:	4605      	mov	r5, r0
 8001b9e:	b911      	cbnz	r1, 8001ba6 <sbrk_aligned+0x12>
 8001ba0:	f000 fb7a 	bl	8002298 <_sbrk_r>
 8001ba4:	6030      	str	r0, [r6, #0]
 8001ba6:	4621      	mov	r1, r4
 8001ba8:	4628      	mov	r0, r5
 8001baa:	f000 fb75 	bl	8002298 <_sbrk_r>
 8001bae:	1c43      	adds	r3, r0, #1
 8001bb0:	d00a      	beq.n	8001bc8 <sbrk_aligned+0x34>
 8001bb2:	1cc4      	adds	r4, r0, #3
 8001bb4:	f024 0403 	bic.w	r4, r4, #3
 8001bb8:	42a0      	cmp	r0, r4
 8001bba:	d007      	beq.n	8001bcc <sbrk_aligned+0x38>
 8001bbc:	1a21      	subs	r1, r4, r0
 8001bbe:	4628      	mov	r0, r5
 8001bc0:	f000 fb6a 	bl	8002298 <_sbrk_r>
 8001bc4:	3001      	adds	r0, #1
 8001bc6:	d101      	bne.n	8001bcc <sbrk_aligned+0x38>
 8001bc8:	f04f 34ff 	mov.w	r4, #4294967295
 8001bcc:	4620      	mov	r0, r4
 8001bce:	bd70      	pop	{r4, r5, r6, pc}
 8001bd0:	200000e8 	.word	0x200000e8

08001bd4 <_malloc_r>:
 8001bd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001bd8:	1ccd      	adds	r5, r1, #3
 8001bda:	f025 0503 	bic.w	r5, r5, #3
 8001bde:	3508      	adds	r5, #8
 8001be0:	2d0c      	cmp	r5, #12
 8001be2:	bf38      	it	cc
 8001be4:	250c      	movcc	r5, #12
 8001be6:	2d00      	cmp	r5, #0
 8001be8:	4607      	mov	r7, r0
 8001bea:	db01      	blt.n	8001bf0 <_malloc_r+0x1c>
 8001bec:	42a9      	cmp	r1, r5
 8001bee:	d905      	bls.n	8001bfc <_malloc_r+0x28>
 8001bf0:	230c      	movs	r3, #12
 8001bf2:	603b      	str	r3, [r7, #0]
 8001bf4:	2600      	movs	r6, #0
 8001bf6:	4630      	mov	r0, r6
 8001bf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001bfc:	4e2e      	ldr	r6, [pc, #184]	; (8001cb8 <_malloc_r+0xe4>)
 8001bfe:	f000 fbf5 	bl	80023ec <__malloc_lock>
 8001c02:	6833      	ldr	r3, [r6, #0]
 8001c04:	461c      	mov	r4, r3
 8001c06:	bb34      	cbnz	r4, 8001c56 <_malloc_r+0x82>
 8001c08:	4629      	mov	r1, r5
 8001c0a:	4638      	mov	r0, r7
 8001c0c:	f7ff ffc2 	bl	8001b94 <sbrk_aligned>
 8001c10:	1c43      	adds	r3, r0, #1
 8001c12:	4604      	mov	r4, r0
 8001c14:	d14d      	bne.n	8001cb2 <_malloc_r+0xde>
 8001c16:	6834      	ldr	r4, [r6, #0]
 8001c18:	4626      	mov	r6, r4
 8001c1a:	2e00      	cmp	r6, #0
 8001c1c:	d140      	bne.n	8001ca0 <_malloc_r+0xcc>
 8001c1e:	6823      	ldr	r3, [r4, #0]
 8001c20:	4631      	mov	r1, r6
 8001c22:	4638      	mov	r0, r7
 8001c24:	eb04 0803 	add.w	r8, r4, r3
 8001c28:	f000 fb36 	bl	8002298 <_sbrk_r>
 8001c2c:	4580      	cmp	r8, r0
 8001c2e:	d13a      	bne.n	8001ca6 <_malloc_r+0xd2>
 8001c30:	6821      	ldr	r1, [r4, #0]
 8001c32:	3503      	adds	r5, #3
 8001c34:	1a6d      	subs	r5, r5, r1
 8001c36:	f025 0503 	bic.w	r5, r5, #3
 8001c3a:	3508      	adds	r5, #8
 8001c3c:	2d0c      	cmp	r5, #12
 8001c3e:	bf38      	it	cc
 8001c40:	250c      	movcc	r5, #12
 8001c42:	4629      	mov	r1, r5
 8001c44:	4638      	mov	r0, r7
 8001c46:	f7ff ffa5 	bl	8001b94 <sbrk_aligned>
 8001c4a:	3001      	adds	r0, #1
 8001c4c:	d02b      	beq.n	8001ca6 <_malloc_r+0xd2>
 8001c4e:	6823      	ldr	r3, [r4, #0]
 8001c50:	442b      	add	r3, r5
 8001c52:	6023      	str	r3, [r4, #0]
 8001c54:	e00e      	b.n	8001c74 <_malloc_r+0xa0>
 8001c56:	6822      	ldr	r2, [r4, #0]
 8001c58:	1b52      	subs	r2, r2, r5
 8001c5a:	d41e      	bmi.n	8001c9a <_malloc_r+0xc6>
 8001c5c:	2a0b      	cmp	r2, #11
 8001c5e:	d916      	bls.n	8001c8e <_malloc_r+0xba>
 8001c60:	1961      	adds	r1, r4, r5
 8001c62:	42a3      	cmp	r3, r4
 8001c64:	6025      	str	r5, [r4, #0]
 8001c66:	bf18      	it	ne
 8001c68:	6059      	strne	r1, [r3, #4]
 8001c6a:	6863      	ldr	r3, [r4, #4]
 8001c6c:	bf08      	it	eq
 8001c6e:	6031      	streq	r1, [r6, #0]
 8001c70:	5162      	str	r2, [r4, r5]
 8001c72:	604b      	str	r3, [r1, #4]
 8001c74:	4638      	mov	r0, r7
 8001c76:	f104 060b 	add.w	r6, r4, #11
 8001c7a:	f000 fbbd 	bl	80023f8 <__malloc_unlock>
 8001c7e:	f026 0607 	bic.w	r6, r6, #7
 8001c82:	1d23      	adds	r3, r4, #4
 8001c84:	1af2      	subs	r2, r6, r3
 8001c86:	d0b6      	beq.n	8001bf6 <_malloc_r+0x22>
 8001c88:	1b9b      	subs	r3, r3, r6
 8001c8a:	50a3      	str	r3, [r4, r2]
 8001c8c:	e7b3      	b.n	8001bf6 <_malloc_r+0x22>
 8001c8e:	6862      	ldr	r2, [r4, #4]
 8001c90:	42a3      	cmp	r3, r4
 8001c92:	bf0c      	ite	eq
 8001c94:	6032      	streq	r2, [r6, #0]
 8001c96:	605a      	strne	r2, [r3, #4]
 8001c98:	e7ec      	b.n	8001c74 <_malloc_r+0xa0>
 8001c9a:	4623      	mov	r3, r4
 8001c9c:	6864      	ldr	r4, [r4, #4]
 8001c9e:	e7b2      	b.n	8001c06 <_malloc_r+0x32>
 8001ca0:	4634      	mov	r4, r6
 8001ca2:	6876      	ldr	r6, [r6, #4]
 8001ca4:	e7b9      	b.n	8001c1a <_malloc_r+0x46>
 8001ca6:	230c      	movs	r3, #12
 8001ca8:	603b      	str	r3, [r7, #0]
 8001caa:	4638      	mov	r0, r7
 8001cac:	f000 fba4 	bl	80023f8 <__malloc_unlock>
 8001cb0:	e7a1      	b.n	8001bf6 <_malloc_r+0x22>
 8001cb2:	6025      	str	r5, [r4, #0]
 8001cb4:	e7de      	b.n	8001c74 <_malloc_r+0xa0>
 8001cb6:	bf00      	nop
 8001cb8:	200000e4 	.word	0x200000e4

08001cbc <__sfputc_r>:
 8001cbc:	6893      	ldr	r3, [r2, #8]
 8001cbe:	3b01      	subs	r3, #1
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	b410      	push	{r4}
 8001cc4:	6093      	str	r3, [r2, #8]
 8001cc6:	da08      	bge.n	8001cda <__sfputc_r+0x1e>
 8001cc8:	6994      	ldr	r4, [r2, #24]
 8001cca:	42a3      	cmp	r3, r4
 8001ccc:	db01      	blt.n	8001cd2 <__sfputc_r+0x16>
 8001cce:	290a      	cmp	r1, #10
 8001cd0:	d103      	bne.n	8001cda <__sfputc_r+0x1e>
 8001cd2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001cd6:	f7ff bc31 	b.w	800153c <__swbuf_r>
 8001cda:	6813      	ldr	r3, [r2, #0]
 8001cdc:	1c58      	adds	r0, r3, #1
 8001cde:	6010      	str	r0, [r2, #0]
 8001ce0:	7019      	strb	r1, [r3, #0]
 8001ce2:	4608      	mov	r0, r1
 8001ce4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001ce8:	4770      	bx	lr

08001cea <__sfputs_r>:
 8001cea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cec:	4606      	mov	r6, r0
 8001cee:	460f      	mov	r7, r1
 8001cf0:	4614      	mov	r4, r2
 8001cf2:	18d5      	adds	r5, r2, r3
 8001cf4:	42ac      	cmp	r4, r5
 8001cf6:	d101      	bne.n	8001cfc <__sfputs_r+0x12>
 8001cf8:	2000      	movs	r0, #0
 8001cfa:	e007      	b.n	8001d0c <__sfputs_r+0x22>
 8001cfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001d00:	463a      	mov	r2, r7
 8001d02:	4630      	mov	r0, r6
 8001d04:	f7ff ffda 	bl	8001cbc <__sfputc_r>
 8001d08:	1c43      	adds	r3, r0, #1
 8001d0a:	d1f3      	bne.n	8001cf4 <__sfputs_r+0xa>
 8001d0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001d10 <_vfiprintf_r>:
 8001d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d14:	460d      	mov	r5, r1
 8001d16:	b09d      	sub	sp, #116	; 0x74
 8001d18:	4614      	mov	r4, r2
 8001d1a:	4698      	mov	r8, r3
 8001d1c:	4606      	mov	r6, r0
 8001d1e:	b118      	cbz	r0, 8001d28 <_vfiprintf_r+0x18>
 8001d20:	6983      	ldr	r3, [r0, #24]
 8001d22:	b90b      	cbnz	r3, 8001d28 <_vfiprintf_r+0x18>
 8001d24:	f7ff fde4 	bl	80018f0 <__sinit>
 8001d28:	4b89      	ldr	r3, [pc, #548]	; (8001f50 <_vfiprintf_r+0x240>)
 8001d2a:	429d      	cmp	r5, r3
 8001d2c:	d11b      	bne.n	8001d66 <_vfiprintf_r+0x56>
 8001d2e:	6875      	ldr	r5, [r6, #4]
 8001d30:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001d32:	07d9      	lsls	r1, r3, #31
 8001d34:	d405      	bmi.n	8001d42 <_vfiprintf_r+0x32>
 8001d36:	89ab      	ldrh	r3, [r5, #12]
 8001d38:	059a      	lsls	r2, r3, #22
 8001d3a:	d402      	bmi.n	8001d42 <_vfiprintf_r+0x32>
 8001d3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001d3e:	f7ff fe75 	bl	8001a2c <__retarget_lock_acquire_recursive>
 8001d42:	89ab      	ldrh	r3, [r5, #12]
 8001d44:	071b      	lsls	r3, r3, #28
 8001d46:	d501      	bpl.n	8001d4c <_vfiprintf_r+0x3c>
 8001d48:	692b      	ldr	r3, [r5, #16]
 8001d4a:	b9eb      	cbnz	r3, 8001d88 <_vfiprintf_r+0x78>
 8001d4c:	4629      	mov	r1, r5
 8001d4e:	4630      	mov	r0, r6
 8001d50:	f7ff fc46 	bl	80015e0 <__swsetup_r>
 8001d54:	b1c0      	cbz	r0, 8001d88 <_vfiprintf_r+0x78>
 8001d56:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001d58:	07dc      	lsls	r4, r3, #31
 8001d5a:	d50e      	bpl.n	8001d7a <_vfiprintf_r+0x6a>
 8001d5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d60:	b01d      	add	sp, #116	; 0x74
 8001d62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001d66:	4b7b      	ldr	r3, [pc, #492]	; (8001f54 <_vfiprintf_r+0x244>)
 8001d68:	429d      	cmp	r5, r3
 8001d6a:	d101      	bne.n	8001d70 <_vfiprintf_r+0x60>
 8001d6c:	68b5      	ldr	r5, [r6, #8]
 8001d6e:	e7df      	b.n	8001d30 <_vfiprintf_r+0x20>
 8001d70:	4b79      	ldr	r3, [pc, #484]	; (8001f58 <_vfiprintf_r+0x248>)
 8001d72:	429d      	cmp	r5, r3
 8001d74:	bf08      	it	eq
 8001d76:	68f5      	ldreq	r5, [r6, #12]
 8001d78:	e7da      	b.n	8001d30 <_vfiprintf_r+0x20>
 8001d7a:	89ab      	ldrh	r3, [r5, #12]
 8001d7c:	0598      	lsls	r0, r3, #22
 8001d7e:	d4ed      	bmi.n	8001d5c <_vfiprintf_r+0x4c>
 8001d80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001d82:	f7ff fe54 	bl	8001a2e <__retarget_lock_release_recursive>
 8001d86:	e7e9      	b.n	8001d5c <_vfiprintf_r+0x4c>
 8001d88:	2300      	movs	r3, #0
 8001d8a:	9309      	str	r3, [sp, #36]	; 0x24
 8001d8c:	2320      	movs	r3, #32
 8001d8e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001d92:	f8cd 800c 	str.w	r8, [sp, #12]
 8001d96:	2330      	movs	r3, #48	; 0x30
 8001d98:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8001f5c <_vfiprintf_r+0x24c>
 8001d9c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001da0:	f04f 0901 	mov.w	r9, #1
 8001da4:	4623      	mov	r3, r4
 8001da6:	469a      	mov	sl, r3
 8001da8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001dac:	b10a      	cbz	r2, 8001db2 <_vfiprintf_r+0xa2>
 8001dae:	2a25      	cmp	r2, #37	; 0x25
 8001db0:	d1f9      	bne.n	8001da6 <_vfiprintf_r+0x96>
 8001db2:	ebba 0b04 	subs.w	fp, sl, r4
 8001db6:	d00b      	beq.n	8001dd0 <_vfiprintf_r+0xc0>
 8001db8:	465b      	mov	r3, fp
 8001dba:	4622      	mov	r2, r4
 8001dbc:	4629      	mov	r1, r5
 8001dbe:	4630      	mov	r0, r6
 8001dc0:	f7ff ff93 	bl	8001cea <__sfputs_r>
 8001dc4:	3001      	adds	r0, #1
 8001dc6:	f000 80aa 	beq.w	8001f1e <_vfiprintf_r+0x20e>
 8001dca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001dcc:	445a      	add	r2, fp
 8001dce:	9209      	str	r2, [sp, #36]	; 0x24
 8001dd0:	f89a 3000 	ldrb.w	r3, [sl]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	f000 80a2 	beq.w	8001f1e <_vfiprintf_r+0x20e>
 8001dda:	2300      	movs	r3, #0
 8001ddc:	f04f 32ff 	mov.w	r2, #4294967295
 8001de0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001de4:	f10a 0a01 	add.w	sl, sl, #1
 8001de8:	9304      	str	r3, [sp, #16]
 8001dea:	9307      	str	r3, [sp, #28]
 8001dec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001df0:	931a      	str	r3, [sp, #104]	; 0x68
 8001df2:	4654      	mov	r4, sl
 8001df4:	2205      	movs	r2, #5
 8001df6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001dfa:	4858      	ldr	r0, [pc, #352]	; (8001f5c <_vfiprintf_r+0x24c>)
 8001dfc:	f7fe f9f8 	bl	80001f0 <memchr>
 8001e00:	9a04      	ldr	r2, [sp, #16]
 8001e02:	b9d8      	cbnz	r0, 8001e3c <_vfiprintf_r+0x12c>
 8001e04:	06d1      	lsls	r1, r2, #27
 8001e06:	bf44      	itt	mi
 8001e08:	2320      	movmi	r3, #32
 8001e0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001e0e:	0713      	lsls	r3, r2, #28
 8001e10:	bf44      	itt	mi
 8001e12:	232b      	movmi	r3, #43	; 0x2b
 8001e14:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001e18:	f89a 3000 	ldrb.w	r3, [sl]
 8001e1c:	2b2a      	cmp	r3, #42	; 0x2a
 8001e1e:	d015      	beq.n	8001e4c <_vfiprintf_r+0x13c>
 8001e20:	9a07      	ldr	r2, [sp, #28]
 8001e22:	4654      	mov	r4, sl
 8001e24:	2000      	movs	r0, #0
 8001e26:	f04f 0c0a 	mov.w	ip, #10
 8001e2a:	4621      	mov	r1, r4
 8001e2c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001e30:	3b30      	subs	r3, #48	; 0x30
 8001e32:	2b09      	cmp	r3, #9
 8001e34:	d94e      	bls.n	8001ed4 <_vfiprintf_r+0x1c4>
 8001e36:	b1b0      	cbz	r0, 8001e66 <_vfiprintf_r+0x156>
 8001e38:	9207      	str	r2, [sp, #28]
 8001e3a:	e014      	b.n	8001e66 <_vfiprintf_r+0x156>
 8001e3c:	eba0 0308 	sub.w	r3, r0, r8
 8001e40:	fa09 f303 	lsl.w	r3, r9, r3
 8001e44:	4313      	orrs	r3, r2
 8001e46:	9304      	str	r3, [sp, #16]
 8001e48:	46a2      	mov	sl, r4
 8001e4a:	e7d2      	b.n	8001df2 <_vfiprintf_r+0xe2>
 8001e4c:	9b03      	ldr	r3, [sp, #12]
 8001e4e:	1d19      	adds	r1, r3, #4
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	9103      	str	r1, [sp, #12]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	bfbb      	ittet	lt
 8001e58:	425b      	neglt	r3, r3
 8001e5a:	f042 0202 	orrlt.w	r2, r2, #2
 8001e5e:	9307      	strge	r3, [sp, #28]
 8001e60:	9307      	strlt	r3, [sp, #28]
 8001e62:	bfb8      	it	lt
 8001e64:	9204      	strlt	r2, [sp, #16]
 8001e66:	7823      	ldrb	r3, [r4, #0]
 8001e68:	2b2e      	cmp	r3, #46	; 0x2e
 8001e6a:	d10c      	bne.n	8001e86 <_vfiprintf_r+0x176>
 8001e6c:	7863      	ldrb	r3, [r4, #1]
 8001e6e:	2b2a      	cmp	r3, #42	; 0x2a
 8001e70:	d135      	bne.n	8001ede <_vfiprintf_r+0x1ce>
 8001e72:	9b03      	ldr	r3, [sp, #12]
 8001e74:	1d1a      	adds	r2, r3, #4
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	9203      	str	r2, [sp, #12]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	bfb8      	it	lt
 8001e7e:	f04f 33ff 	movlt.w	r3, #4294967295
 8001e82:	3402      	adds	r4, #2
 8001e84:	9305      	str	r3, [sp, #20]
 8001e86:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8001f6c <_vfiprintf_r+0x25c>
 8001e8a:	7821      	ldrb	r1, [r4, #0]
 8001e8c:	2203      	movs	r2, #3
 8001e8e:	4650      	mov	r0, sl
 8001e90:	f7fe f9ae 	bl	80001f0 <memchr>
 8001e94:	b140      	cbz	r0, 8001ea8 <_vfiprintf_r+0x198>
 8001e96:	2340      	movs	r3, #64	; 0x40
 8001e98:	eba0 000a 	sub.w	r0, r0, sl
 8001e9c:	fa03 f000 	lsl.w	r0, r3, r0
 8001ea0:	9b04      	ldr	r3, [sp, #16]
 8001ea2:	4303      	orrs	r3, r0
 8001ea4:	3401      	adds	r4, #1
 8001ea6:	9304      	str	r3, [sp, #16]
 8001ea8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001eac:	482c      	ldr	r0, [pc, #176]	; (8001f60 <_vfiprintf_r+0x250>)
 8001eae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001eb2:	2206      	movs	r2, #6
 8001eb4:	f7fe f99c 	bl	80001f0 <memchr>
 8001eb8:	2800      	cmp	r0, #0
 8001eba:	d03f      	beq.n	8001f3c <_vfiprintf_r+0x22c>
 8001ebc:	4b29      	ldr	r3, [pc, #164]	; (8001f64 <_vfiprintf_r+0x254>)
 8001ebe:	bb1b      	cbnz	r3, 8001f08 <_vfiprintf_r+0x1f8>
 8001ec0:	9b03      	ldr	r3, [sp, #12]
 8001ec2:	3307      	adds	r3, #7
 8001ec4:	f023 0307 	bic.w	r3, r3, #7
 8001ec8:	3308      	adds	r3, #8
 8001eca:	9303      	str	r3, [sp, #12]
 8001ecc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001ece:	443b      	add	r3, r7
 8001ed0:	9309      	str	r3, [sp, #36]	; 0x24
 8001ed2:	e767      	b.n	8001da4 <_vfiprintf_r+0x94>
 8001ed4:	fb0c 3202 	mla	r2, ip, r2, r3
 8001ed8:	460c      	mov	r4, r1
 8001eda:	2001      	movs	r0, #1
 8001edc:	e7a5      	b.n	8001e2a <_vfiprintf_r+0x11a>
 8001ede:	2300      	movs	r3, #0
 8001ee0:	3401      	adds	r4, #1
 8001ee2:	9305      	str	r3, [sp, #20]
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	f04f 0c0a 	mov.w	ip, #10
 8001eea:	4620      	mov	r0, r4
 8001eec:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001ef0:	3a30      	subs	r2, #48	; 0x30
 8001ef2:	2a09      	cmp	r2, #9
 8001ef4:	d903      	bls.n	8001efe <_vfiprintf_r+0x1ee>
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d0c5      	beq.n	8001e86 <_vfiprintf_r+0x176>
 8001efa:	9105      	str	r1, [sp, #20]
 8001efc:	e7c3      	b.n	8001e86 <_vfiprintf_r+0x176>
 8001efe:	fb0c 2101 	mla	r1, ip, r1, r2
 8001f02:	4604      	mov	r4, r0
 8001f04:	2301      	movs	r3, #1
 8001f06:	e7f0      	b.n	8001eea <_vfiprintf_r+0x1da>
 8001f08:	ab03      	add	r3, sp, #12
 8001f0a:	9300      	str	r3, [sp, #0]
 8001f0c:	462a      	mov	r2, r5
 8001f0e:	4b16      	ldr	r3, [pc, #88]	; (8001f68 <_vfiprintf_r+0x258>)
 8001f10:	a904      	add	r1, sp, #16
 8001f12:	4630      	mov	r0, r6
 8001f14:	f3af 8000 	nop.w
 8001f18:	4607      	mov	r7, r0
 8001f1a:	1c78      	adds	r0, r7, #1
 8001f1c:	d1d6      	bne.n	8001ecc <_vfiprintf_r+0x1bc>
 8001f1e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001f20:	07d9      	lsls	r1, r3, #31
 8001f22:	d405      	bmi.n	8001f30 <_vfiprintf_r+0x220>
 8001f24:	89ab      	ldrh	r3, [r5, #12]
 8001f26:	059a      	lsls	r2, r3, #22
 8001f28:	d402      	bmi.n	8001f30 <_vfiprintf_r+0x220>
 8001f2a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001f2c:	f7ff fd7f 	bl	8001a2e <__retarget_lock_release_recursive>
 8001f30:	89ab      	ldrh	r3, [r5, #12]
 8001f32:	065b      	lsls	r3, r3, #25
 8001f34:	f53f af12 	bmi.w	8001d5c <_vfiprintf_r+0x4c>
 8001f38:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001f3a:	e711      	b.n	8001d60 <_vfiprintf_r+0x50>
 8001f3c:	ab03      	add	r3, sp, #12
 8001f3e:	9300      	str	r3, [sp, #0]
 8001f40:	462a      	mov	r2, r5
 8001f42:	4b09      	ldr	r3, [pc, #36]	; (8001f68 <_vfiprintf_r+0x258>)
 8001f44:	a904      	add	r1, sp, #16
 8001f46:	4630      	mov	r0, r6
 8001f48:	f000 f880 	bl	800204c <_printf_i>
 8001f4c:	e7e4      	b.n	8001f18 <_vfiprintf_r+0x208>
 8001f4e:	bf00      	nop
 8001f50:	08002aac 	.word	0x08002aac
 8001f54:	08002acc 	.word	0x08002acc
 8001f58:	08002a8c 	.word	0x08002a8c
 8001f5c:	08002aec 	.word	0x08002aec
 8001f60:	08002af6 	.word	0x08002af6
 8001f64:	00000000 	.word	0x00000000
 8001f68:	08001ceb 	.word	0x08001ceb
 8001f6c:	08002af2 	.word	0x08002af2

08001f70 <_printf_common>:
 8001f70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001f74:	4616      	mov	r6, r2
 8001f76:	4699      	mov	r9, r3
 8001f78:	688a      	ldr	r2, [r1, #8]
 8001f7a:	690b      	ldr	r3, [r1, #16]
 8001f7c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001f80:	4293      	cmp	r3, r2
 8001f82:	bfb8      	it	lt
 8001f84:	4613      	movlt	r3, r2
 8001f86:	6033      	str	r3, [r6, #0]
 8001f88:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001f8c:	4607      	mov	r7, r0
 8001f8e:	460c      	mov	r4, r1
 8001f90:	b10a      	cbz	r2, 8001f96 <_printf_common+0x26>
 8001f92:	3301      	adds	r3, #1
 8001f94:	6033      	str	r3, [r6, #0]
 8001f96:	6823      	ldr	r3, [r4, #0]
 8001f98:	0699      	lsls	r1, r3, #26
 8001f9a:	bf42      	ittt	mi
 8001f9c:	6833      	ldrmi	r3, [r6, #0]
 8001f9e:	3302      	addmi	r3, #2
 8001fa0:	6033      	strmi	r3, [r6, #0]
 8001fa2:	6825      	ldr	r5, [r4, #0]
 8001fa4:	f015 0506 	ands.w	r5, r5, #6
 8001fa8:	d106      	bne.n	8001fb8 <_printf_common+0x48>
 8001faa:	f104 0a19 	add.w	sl, r4, #25
 8001fae:	68e3      	ldr	r3, [r4, #12]
 8001fb0:	6832      	ldr	r2, [r6, #0]
 8001fb2:	1a9b      	subs	r3, r3, r2
 8001fb4:	42ab      	cmp	r3, r5
 8001fb6:	dc26      	bgt.n	8002006 <_printf_common+0x96>
 8001fb8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001fbc:	1e13      	subs	r3, r2, #0
 8001fbe:	6822      	ldr	r2, [r4, #0]
 8001fc0:	bf18      	it	ne
 8001fc2:	2301      	movne	r3, #1
 8001fc4:	0692      	lsls	r2, r2, #26
 8001fc6:	d42b      	bmi.n	8002020 <_printf_common+0xb0>
 8001fc8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001fcc:	4649      	mov	r1, r9
 8001fce:	4638      	mov	r0, r7
 8001fd0:	47c0      	blx	r8
 8001fd2:	3001      	adds	r0, #1
 8001fd4:	d01e      	beq.n	8002014 <_printf_common+0xa4>
 8001fd6:	6823      	ldr	r3, [r4, #0]
 8001fd8:	68e5      	ldr	r5, [r4, #12]
 8001fda:	6832      	ldr	r2, [r6, #0]
 8001fdc:	f003 0306 	and.w	r3, r3, #6
 8001fe0:	2b04      	cmp	r3, #4
 8001fe2:	bf08      	it	eq
 8001fe4:	1aad      	subeq	r5, r5, r2
 8001fe6:	68a3      	ldr	r3, [r4, #8]
 8001fe8:	6922      	ldr	r2, [r4, #16]
 8001fea:	bf0c      	ite	eq
 8001fec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001ff0:	2500      	movne	r5, #0
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	bfc4      	itt	gt
 8001ff6:	1a9b      	subgt	r3, r3, r2
 8001ff8:	18ed      	addgt	r5, r5, r3
 8001ffa:	2600      	movs	r6, #0
 8001ffc:	341a      	adds	r4, #26
 8001ffe:	42b5      	cmp	r5, r6
 8002000:	d11a      	bne.n	8002038 <_printf_common+0xc8>
 8002002:	2000      	movs	r0, #0
 8002004:	e008      	b.n	8002018 <_printf_common+0xa8>
 8002006:	2301      	movs	r3, #1
 8002008:	4652      	mov	r2, sl
 800200a:	4649      	mov	r1, r9
 800200c:	4638      	mov	r0, r7
 800200e:	47c0      	blx	r8
 8002010:	3001      	adds	r0, #1
 8002012:	d103      	bne.n	800201c <_printf_common+0xac>
 8002014:	f04f 30ff 	mov.w	r0, #4294967295
 8002018:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800201c:	3501      	adds	r5, #1
 800201e:	e7c6      	b.n	8001fae <_printf_common+0x3e>
 8002020:	18e1      	adds	r1, r4, r3
 8002022:	1c5a      	adds	r2, r3, #1
 8002024:	2030      	movs	r0, #48	; 0x30
 8002026:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800202a:	4422      	add	r2, r4
 800202c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002030:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002034:	3302      	adds	r3, #2
 8002036:	e7c7      	b.n	8001fc8 <_printf_common+0x58>
 8002038:	2301      	movs	r3, #1
 800203a:	4622      	mov	r2, r4
 800203c:	4649      	mov	r1, r9
 800203e:	4638      	mov	r0, r7
 8002040:	47c0      	blx	r8
 8002042:	3001      	adds	r0, #1
 8002044:	d0e6      	beq.n	8002014 <_printf_common+0xa4>
 8002046:	3601      	adds	r6, #1
 8002048:	e7d9      	b.n	8001ffe <_printf_common+0x8e>
	...

0800204c <_printf_i>:
 800204c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002050:	7e0f      	ldrb	r7, [r1, #24]
 8002052:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002054:	2f78      	cmp	r7, #120	; 0x78
 8002056:	4691      	mov	r9, r2
 8002058:	4680      	mov	r8, r0
 800205a:	460c      	mov	r4, r1
 800205c:	469a      	mov	sl, r3
 800205e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002062:	d807      	bhi.n	8002074 <_printf_i+0x28>
 8002064:	2f62      	cmp	r7, #98	; 0x62
 8002066:	d80a      	bhi.n	800207e <_printf_i+0x32>
 8002068:	2f00      	cmp	r7, #0
 800206a:	f000 80d8 	beq.w	800221e <_printf_i+0x1d2>
 800206e:	2f58      	cmp	r7, #88	; 0x58
 8002070:	f000 80a3 	beq.w	80021ba <_printf_i+0x16e>
 8002074:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002078:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800207c:	e03a      	b.n	80020f4 <_printf_i+0xa8>
 800207e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002082:	2b15      	cmp	r3, #21
 8002084:	d8f6      	bhi.n	8002074 <_printf_i+0x28>
 8002086:	a101      	add	r1, pc, #4	; (adr r1, 800208c <_printf_i+0x40>)
 8002088:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800208c:	080020e5 	.word	0x080020e5
 8002090:	080020f9 	.word	0x080020f9
 8002094:	08002075 	.word	0x08002075
 8002098:	08002075 	.word	0x08002075
 800209c:	08002075 	.word	0x08002075
 80020a0:	08002075 	.word	0x08002075
 80020a4:	080020f9 	.word	0x080020f9
 80020a8:	08002075 	.word	0x08002075
 80020ac:	08002075 	.word	0x08002075
 80020b0:	08002075 	.word	0x08002075
 80020b4:	08002075 	.word	0x08002075
 80020b8:	08002205 	.word	0x08002205
 80020bc:	08002129 	.word	0x08002129
 80020c0:	080021e7 	.word	0x080021e7
 80020c4:	08002075 	.word	0x08002075
 80020c8:	08002075 	.word	0x08002075
 80020cc:	08002227 	.word	0x08002227
 80020d0:	08002075 	.word	0x08002075
 80020d4:	08002129 	.word	0x08002129
 80020d8:	08002075 	.word	0x08002075
 80020dc:	08002075 	.word	0x08002075
 80020e0:	080021ef 	.word	0x080021ef
 80020e4:	682b      	ldr	r3, [r5, #0]
 80020e6:	1d1a      	adds	r2, r3, #4
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	602a      	str	r2, [r5, #0]
 80020ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80020f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80020f4:	2301      	movs	r3, #1
 80020f6:	e0a3      	b.n	8002240 <_printf_i+0x1f4>
 80020f8:	6820      	ldr	r0, [r4, #0]
 80020fa:	6829      	ldr	r1, [r5, #0]
 80020fc:	0606      	lsls	r6, r0, #24
 80020fe:	f101 0304 	add.w	r3, r1, #4
 8002102:	d50a      	bpl.n	800211a <_printf_i+0xce>
 8002104:	680e      	ldr	r6, [r1, #0]
 8002106:	602b      	str	r3, [r5, #0]
 8002108:	2e00      	cmp	r6, #0
 800210a:	da03      	bge.n	8002114 <_printf_i+0xc8>
 800210c:	232d      	movs	r3, #45	; 0x2d
 800210e:	4276      	negs	r6, r6
 8002110:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002114:	485e      	ldr	r0, [pc, #376]	; (8002290 <_printf_i+0x244>)
 8002116:	230a      	movs	r3, #10
 8002118:	e019      	b.n	800214e <_printf_i+0x102>
 800211a:	680e      	ldr	r6, [r1, #0]
 800211c:	602b      	str	r3, [r5, #0]
 800211e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002122:	bf18      	it	ne
 8002124:	b236      	sxthne	r6, r6
 8002126:	e7ef      	b.n	8002108 <_printf_i+0xbc>
 8002128:	682b      	ldr	r3, [r5, #0]
 800212a:	6820      	ldr	r0, [r4, #0]
 800212c:	1d19      	adds	r1, r3, #4
 800212e:	6029      	str	r1, [r5, #0]
 8002130:	0601      	lsls	r1, r0, #24
 8002132:	d501      	bpl.n	8002138 <_printf_i+0xec>
 8002134:	681e      	ldr	r6, [r3, #0]
 8002136:	e002      	b.n	800213e <_printf_i+0xf2>
 8002138:	0646      	lsls	r6, r0, #25
 800213a:	d5fb      	bpl.n	8002134 <_printf_i+0xe8>
 800213c:	881e      	ldrh	r6, [r3, #0]
 800213e:	4854      	ldr	r0, [pc, #336]	; (8002290 <_printf_i+0x244>)
 8002140:	2f6f      	cmp	r7, #111	; 0x6f
 8002142:	bf0c      	ite	eq
 8002144:	2308      	moveq	r3, #8
 8002146:	230a      	movne	r3, #10
 8002148:	2100      	movs	r1, #0
 800214a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800214e:	6865      	ldr	r5, [r4, #4]
 8002150:	60a5      	str	r5, [r4, #8]
 8002152:	2d00      	cmp	r5, #0
 8002154:	bfa2      	ittt	ge
 8002156:	6821      	ldrge	r1, [r4, #0]
 8002158:	f021 0104 	bicge.w	r1, r1, #4
 800215c:	6021      	strge	r1, [r4, #0]
 800215e:	b90e      	cbnz	r6, 8002164 <_printf_i+0x118>
 8002160:	2d00      	cmp	r5, #0
 8002162:	d04d      	beq.n	8002200 <_printf_i+0x1b4>
 8002164:	4615      	mov	r5, r2
 8002166:	fbb6 f1f3 	udiv	r1, r6, r3
 800216a:	fb03 6711 	mls	r7, r3, r1, r6
 800216e:	5dc7      	ldrb	r7, [r0, r7]
 8002170:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002174:	4637      	mov	r7, r6
 8002176:	42bb      	cmp	r3, r7
 8002178:	460e      	mov	r6, r1
 800217a:	d9f4      	bls.n	8002166 <_printf_i+0x11a>
 800217c:	2b08      	cmp	r3, #8
 800217e:	d10b      	bne.n	8002198 <_printf_i+0x14c>
 8002180:	6823      	ldr	r3, [r4, #0]
 8002182:	07de      	lsls	r6, r3, #31
 8002184:	d508      	bpl.n	8002198 <_printf_i+0x14c>
 8002186:	6923      	ldr	r3, [r4, #16]
 8002188:	6861      	ldr	r1, [r4, #4]
 800218a:	4299      	cmp	r1, r3
 800218c:	bfde      	ittt	le
 800218e:	2330      	movle	r3, #48	; 0x30
 8002190:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002194:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002198:	1b52      	subs	r2, r2, r5
 800219a:	6122      	str	r2, [r4, #16]
 800219c:	f8cd a000 	str.w	sl, [sp]
 80021a0:	464b      	mov	r3, r9
 80021a2:	aa03      	add	r2, sp, #12
 80021a4:	4621      	mov	r1, r4
 80021a6:	4640      	mov	r0, r8
 80021a8:	f7ff fee2 	bl	8001f70 <_printf_common>
 80021ac:	3001      	adds	r0, #1
 80021ae:	d14c      	bne.n	800224a <_printf_i+0x1fe>
 80021b0:	f04f 30ff 	mov.w	r0, #4294967295
 80021b4:	b004      	add	sp, #16
 80021b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80021ba:	4835      	ldr	r0, [pc, #212]	; (8002290 <_printf_i+0x244>)
 80021bc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80021c0:	6829      	ldr	r1, [r5, #0]
 80021c2:	6823      	ldr	r3, [r4, #0]
 80021c4:	f851 6b04 	ldr.w	r6, [r1], #4
 80021c8:	6029      	str	r1, [r5, #0]
 80021ca:	061d      	lsls	r5, r3, #24
 80021cc:	d514      	bpl.n	80021f8 <_printf_i+0x1ac>
 80021ce:	07df      	lsls	r7, r3, #31
 80021d0:	bf44      	itt	mi
 80021d2:	f043 0320 	orrmi.w	r3, r3, #32
 80021d6:	6023      	strmi	r3, [r4, #0]
 80021d8:	b91e      	cbnz	r6, 80021e2 <_printf_i+0x196>
 80021da:	6823      	ldr	r3, [r4, #0]
 80021dc:	f023 0320 	bic.w	r3, r3, #32
 80021e0:	6023      	str	r3, [r4, #0]
 80021e2:	2310      	movs	r3, #16
 80021e4:	e7b0      	b.n	8002148 <_printf_i+0xfc>
 80021e6:	6823      	ldr	r3, [r4, #0]
 80021e8:	f043 0320 	orr.w	r3, r3, #32
 80021ec:	6023      	str	r3, [r4, #0]
 80021ee:	2378      	movs	r3, #120	; 0x78
 80021f0:	4828      	ldr	r0, [pc, #160]	; (8002294 <_printf_i+0x248>)
 80021f2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80021f6:	e7e3      	b.n	80021c0 <_printf_i+0x174>
 80021f8:	0659      	lsls	r1, r3, #25
 80021fa:	bf48      	it	mi
 80021fc:	b2b6      	uxthmi	r6, r6
 80021fe:	e7e6      	b.n	80021ce <_printf_i+0x182>
 8002200:	4615      	mov	r5, r2
 8002202:	e7bb      	b.n	800217c <_printf_i+0x130>
 8002204:	682b      	ldr	r3, [r5, #0]
 8002206:	6826      	ldr	r6, [r4, #0]
 8002208:	6961      	ldr	r1, [r4, #20]
 800220a:	1d18      	adds	r0, r3, #4
 800220c:	6028      	str	r0, [r5, #0]
 800220e:	0635      	lsls	r5, r6, #24
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	d501      	bpl.n	8002218 <_printf_i+0x1cc>
 8002214:	6019      	str	r1, [r3, #0]
 8002216:	e002      	b.n	800221e <_printf_i+0x1d2>
 8002218:	0670      	lsls	r0, r6, #25
 800221a:	d5fb      	bpl.n	8002214 <_printf_i+0x1c8>
 800221c:	8019      	strh	r1, [r3, #0]
 800221e:	2300      	movs	r3, #0
 8002220:	6123      	str	r3, [r4, #16]
 8002222:	4615      	mov	r5, r2
 8002224:	e7ba      	b.n	800219c <_printf_i+0x150>
 8002226:	682b      	ldr	r3, [r5, #0]
 8002228:	1d1a      	adds	r2, r3, #4
 800222a:	602a      	str	r2, [r5, #0]
 800222c:	681d      	ldr	r5, [r3, #0]
 800222e:	6862      	ldr	r2, [r4, #4]
 8002230:	2100      	movs	r1, #0
 8002232:	4628      	mov	r0, r5
 8002234:	f7fd ffdc 	bl	80001f0 <memchr>
 8002238:	b108      	cbz	r0, 800223e <_printf_i+0x1f2>
 800223a:	1b40      	subs	r0, r0, r5
 800223c:	6060      	str	r0, [r4, #4]
 800223e:	6863      	ldr	r3, [r4, #4]
 8002240:	6123      	str	r3, [r4, #16]
 8002242:	2300      	movs	r3, #0
 8002244:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002248:	e7a8      	b.n	800219c <_printf_i+0x150>
 800224a:	6923      	ldr	r3, [r4, #16]
 800224c:	462a      	mov	r2, r5
 800224e:	4649      	mov	r1, r9
 8002250:	4640      	mov	r0, r8
 8002252:	47d0      	blx	sl
 8002254:	3001      	adds	r0, #1
 8002256:	d0ab      	beq.n	80021b0 <_printf_i+0x164>
 8002258:	6823      	ldr	r3, [r4, #0]
 800225a:	079b      	lsls	r3, r3, #30
 800225c:	d413      	bmi.n	8002286 <_printf_i+0x23a>
 800225e:	68e0      	ldr	r0, [r4, #12]
 8002260:	9b03      	ldr	r3, [sp, #12]
 8002262:	4298      	cmp	r0, r3
 8002264:	bfb8      	it	lt
 8002266:	4618      	movlt	r0, r3
 8002268:	e7a4      	b.n	80021b4 <_printf_i+0x168>
 800226a:	2301      	movs	r3, #1
 800226c:	4632      	mov	r2, r6
 800226e:	4649      	mov	r1, r9
 8002270:	4640      	mov	r0, r8
 8002272:	47d0      	blx	sl
 8002274:	3001      	adds	r0, #1
 8002276:	d09b      	beq.n	80021b0 <_printf_i+0x164>
 8002278:	3501      	adds	r5, #1
 800227a:	68e3      	ldr	r3, [r4, #12]
 800227c:	9903      	ldr	r1, [sp, #12]
 800227e:	1a5b      	subs	r3, r3, r1
 8002280:	42ab      	cmp	r3, r5
 8002282:	dcf2      	bgt.n	800226a <_printf_i+0x21e>
 8002284:	e7eb      	b.n	800225e <_printf_i+0x212>
 8002286:	2500      	movs	r5, #0
 8002288:	f104 0619 	add.w	r6, r4, #25
 800228c:	e7f5      	b.n	800227a <_printf_i+0x22e>
 800228e:	bf00      	nop
 8002290:	08002afd 	.word	0x08002afd
 8002294:	08002b0e 	.word	0x08002b0e

08002298 <_sbrk_r>:
 8002298:	b538      	push	{r3, r4, r5, lr}
 800229a:	4d06      	ldr	r5, [pc, #24]	; (80022b4 <_sbrk_r+0x1c>)
 800229c:	2300      	movs	r3, #0
 800229e:	4604      	mov	r4, r0
 80022a0:	4608      	mov	r0, r1
 80022a2:	602b      	str	r3, [r5, #0]
 80022a4:	f7ff f82a 	bl	80012fc <_sbrk>
 80022a8:	1c43      	adds	r3, r0, #1
 80022aa:	d102      	bne.n	80022b2 <_sbrk_r+0x1a>
 80022ac:	682b      	ldr	r3, [r5, #0]
 80022ae:	b103      	cbz	r3, 80022b2 <_sbrk_r+0x1a>
 80022b0:	6023      	str	r3, [r4, #0]
 80022b2:	bd38      	pop	{r3, r4, r5, pc}
 80022b4:	200000ec 	.word	0x200000ec

080022b8 <__sread>:
 80022b8:	b510      	push	{r4, lr}
 80022ba:	460c      	mov	r4, r1
 80022bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80022c0:	f000 f8a0 	bl	8002404 <_read_r>
 80022c4:	2800      	cmp	r0, #0
 80022c6:	bfab      	itete	ge
 80022c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80022ca:	89a3      	ldrhlt	r3, [r4, #12]
 80022cc:	181b      	addge	r3, r3, r0
 80022ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80022d2:	bfac      	ite	ge
 80022d4:	6563      	strge	r3, [r4, #84]	; 0x54
 80022d6:	81a3      	strhlt	r3, [r4, #12]
 80022d8:	bd10      	pop	{r4, pc}

080022da <__swrite>:
 80022da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80022de:	461f      	mov	r7, r3
 80022e0:	898b      	ldrh	r3, [r1, #12]
 80022e2:	05db      	lsls	r3, r3, #23
 80022e4:	4605      	mov	r5, r0
 80022e6:	460c      	mov	r4, r1
 80022e8:	4616      	mov	r6, r2
 80022ea:	d505      	bpl.n	80022f8 <__swrite+0x1e>
 80022ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80022f0:	2302      	movs	r3, #2
 80022f2:	2200      	movs	r2, #0
 80022f4:	f000 f868 	bl	80023c8 <_lseek_r>
 80022f8:	89a3      	ldrh	r3, [r4, #12]
 80022fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80022fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002302:	81a3      	strh	r3, [r4, #12]
 8002304:	4632      	mov	r2, r6
 8002306:	463b      	mov	r3, r7
 8002308:	4628      	mov	r0, r5
 800230a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800230e:	f000 b817 	b.w	8002340 <_write_r>

08002312 <__sseek>:
 8002312:	b510      	push	{r4, lr}
 8002314:	460c      	mov	r4, r1
 8002316:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800231a:	f000 f855 	bl	80023c8 <_lseek_r>
 800231e:	1c43      	adds	r3, r0, #1
 8002320:	89a3      	ldrh	r3, [r4, #12]
 8002322:	bf15      	itete	ne
 8002324:	6560      	strne	r0, [r4, #84]	; 0x54
 8002326:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800232a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800232e:	81a3      	strheq	r3, [r4, #12]
 8002330:	bf18      	it	ne
 8002332:	81a3      	strhne	r3, [r4, #12]
 8002334:	bd10      	pop	{r4, pc}

08002336 <__sclose>:
 8002336:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800233a:	f000 b813 	b.w	8002364 <_close_r>
	...

08002340 <_write_r>:
 8002340:	b538      	push	{r3, r4, r5, lr}
 8002342:	4d07      	ldr	r5, [pc, #28]	; (8002360 <_write_r+0x20>)
 8002344:	4604      	mov	r4, r0
 8002346:	4608      	mov	r0, r1
 8002348:	4611      	mov	r1, r2
 800234a:	2200      	movs	r2, #0
 800234c:	602a      	str	r2, [r5, #0]
 800234e:	461a      	mov	r2, r3
 8002350:	f000 f911 	bl	8002576 <_write>
 8002354:	1c43      	adds	r3, r0, #1
 8002356:	d102      	bne.n	800235e <_write_r+0x1e>
 8002358:	682b      	ldr	r3, [r5, #0]
 800235a:	b103      	cbz	r3, 800235e <_write_r+0x1e>
 800235c:	6023      	str	r3, [r4, #0]
 800235e:	bd38      	pop	{r3, r4, r5, pc}
 8002360:	200000ec 	.word	0x200000ec

08002364 <_close_r>:
 8002364:	b538      	push	{r3, r4, r5, lr}
 8002366:	4d06      	ldr	r5, [pc, #24]	; (8002380 <_close_r+0x1c>)
 8002368:	2300      	movs	r3, #0
 800236a:	4604      	mov	r4, r0
 800236c:	4608      	mov	r0, r1
 800236e:	602b      	str	r3, [r5, #0]
 8002370:	f000 f932 	bl	80025d8 <_close>
 8002374:	1c43      	adds	r3, r0, #1
 8002376:	d102      	bne.n	800237e <_close_r+0x1a>
 8002378:	682b      	ldr	r3, [r5, #0]
 800237a:	b103      	cbz	r3, 800237e <_close_r+0x1a>
 800237c:	6023      	str	r3, [r4, #0]
 800237e:	bd38      	pop	{r3, r4, r5, pc}
 8002380:	200000ec 	.word	0x200000ec

08002384 <_fstat_r>:
 8002384:	b538      	push	{r3, r4, r5, lr}
 8002386:	4d07      	ldr	r5, [pc, #28]	; (80023a4 <_fstat_r+0x20>)
 8002388:	2300      	movs	r3, #0
 800238a:	4604      	mov	r4, r0
 800238c:	4608      	mov	r0, r1
 800238e:	4611      	mov	r1, r2
 8002390:	602b      	str	r3, [r5, #0]
 8002392:	f000 f968 	bl	8002666 <_fstat>
 8002396:	1c43      	adds	r3, r0, #1
 8002398:	d102      	bne.n	80023a0 <_fstat_r+0x1c>
 800239a:	682b      	ldr	r3, [r5, #0]
 800239c:	b103      	cbz	r3, 80023a0 <_fstat_r+0x1c>
 800239e:	6023      	str	r3, [r4, #0]
 80023a0:	bd38      	pop	{r3, r4, r5, pc}
 80023a2:	bf00      	nop
 80023a4:	200000ec 	.word	0x200000ec

080023a8 <_isatty_r>:
 80023a8:	b538      	push	{r3, r4, r5, lr}
 80023aa:	4d06      	ldr	r5, [pc, #24]	; (80023c4 <_isatty_r+0x1c>)
 80023ac:	2300      	movs	r3, #0
 80023ae:	4604      	mov	r4, r0
 80023b0:	4608      	mov	r0, r1
 80023b2:	602b      	str	r3, [r5, #0]
 80023b4:	f000 fabe 	bl	8002934 <_isatty>
 80023b8:	1c43      	adds	r3, r0, #1
 80023ba:	d102      	bne.n	80023c2 <_isatty_r+0x1a>
 80023bc:	682b      	ldr	r3, [r5, #0]
 80023be:	b103      	cbz	r3, 80023c2 <_isatty_r+0x1a>
 80023c0:	6023      	str	r3, [r4, #0]
 80023c2:	bd38      	pop	{r3, r4, r5, pc}
 80023c4:	200000ec 	.word	0x200000ec

080023c8 <_lseek_r>:
 80023c8:	b538      	push	{r3, r4, r5, lr}
 80023ca:	4d07      	ldr	r5, [pc, #28]	; (80023e8 <_lseek_r+0x20>)
 80023cc:	4604      	mov	r4, r0
 80023ce:	4608      	mov	r0, r1
 80023d0:	4611      	mov	r1, r2
 80023d2:	2200      	movs	r2, #0
 80023d4:	602a      	str	r2, [r5, #0]
 80023d6:	461a      	mov	r2, r3
 80023d8:	f000 f8bb 	bl	8002552 <_lseek>
 80023dc:	1c43      	adds	r3, r0, #1
 80023de:	d102      	bne.n	80023e6 <_lseek_r+0x1e>
 80023e0:	682b      	ldr	r3, [r5, #0]
 80023e2:	b103      	cbz	r3, 80023e6 <_lseek_r+0x1e>
 80023e4:	6023      	str	r3, [r4, #0]
 80023e6:	bd38      	pop	{r3, r4, r5, pc}
 80023e8:	200000ec 	.word	0x200000ec

080023ec <__malloc_lock>:
 80023ec:	4801      	ldr	r0, [pc, #4]	; (80023f4 <__malloc_lock+0x8>)
 80023ee:	f7ff bb1d 	b.w	8001a2c <__retarget_lock_acquire_recursive>
 80023f2:	bf00      	nop
 80023f4:	200000e0 	.word	0x200000e0

080023f8 <__malloc_unlock>:
 80023f8:	4801      	ldr	r0, [pc, #4]	; (8002400 <__malloc_unlock+0x8>)
 80023fa:	f7ff bb18 	b.w	8001a2e <__retarget_lock_release_recursive>
 80023fe:	bf00      	nop
 8002400:	200000e0 	.word	0x200000e0

08002404 <_read_r>:
 8002404:	b538      	push	{r3, r4, r5, lr}
 8002406:	4d07      	ldr	r5, [pc, #28]	; (8002424 <_read_r+0x20>)
 8002408:	4604      	mov	r4, r0
 800240a:	4608      	mov	r0, r1
 800240c:	4611      	mov	r1, r2
 800240e:	2200      	movs	r2, #0
 8002410:	602a      	str	r2, [r5, #0]
 8002412:	461a      	mov	r2, r3
 8002414:	f000 f845 	bl	80024a2 <_read>
 8002418:	1c43      	adds	r3, r0, #1
 800241a:	d102      	bne.n	8002422 <_read_r+0x1e>
 800241c:	682b      	ldr	r3, [r5, #0]
 800241e:	b103      	cbz	r3, 8002422 <_read_r+0x1e>
 8002420:	6023      	str	r3, [r4, #0]
 8002422:	bd38      	pop	{r3, r4, r5, pc}
 8002424:	200000ec 	.word	0x200000ec

08002428 <findslot>:
 8002428:	4b0a      	ldr	r3, [pc, #40]	; (8002454 <findslot+0x2c>)
 800242a:	b510      	push	{r4, lr}
 800242c:	4604      	mov	r4, r0
 800242e:	6818      	ldr	r0, [r3, #0]
 8002430:	b118      	cbz	r0, 800243a <findslot+0x12>
 8002432:	6983      	ldr	r3, [r0, #24]
 8002434:	b90b      	cbnz	r3, 800243a <findslot+0x12>
 8002436:	f7ff fa5b 	bl	80018f0 <__sinit>
 800243a:	2c13      	cmp	r4, #19
 800243c:	d807      	bhi.n	800244e <findslot+0x26>
 800243e:	4806      	ldr	r0, [pc, #24]	; (8002458 <findslot+0x30>)
 8002440:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8002444:	3201      	adds	r2, #1
 8002446:	d002      	beq.n	800244e <findslot+0x26>
 8002448:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 800244c:	bd10      	pop	{r4, pc}
 800244e:	2000      	movs	r0, #0
 8002450:	e7fc      	b.n	800244c <findslot+0x24>
 8002452:	bf00      	nop
 8002454:	20000014 	.word	0x20000014
 8002458:	200000fc 	.word	0x200000fc

0800245c <error>:
 800245c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800245e:	4604      	mov	r4, r0
 8002460:	f7fe ffac 	bl	80013bc <__errno>
 8002464:	2613      	movs	r6, #19
 8002466:	4605      	mov	r5, r0
 8002468:	2700      	movs	r7, #0
 800246a:	4630      	mov	r0, r6
 800246c:	4639      	mov	r1, r7
 800246e:	beab      	bkpt	0x00ab
 8002470:	4606      	mov	r6, r0
 8002472:	602e      	str	r6, [r5, #0]
 8002474:	4620      	mov	r0, r4
 8002476:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002478 <checkerror>:
 8002478:	1c43      	adds	r3, r0, #1
 800247a:	d101      	bne.n	8002480 <checkerror+0x8>
 800247c:	f7ff bfee 	b.w	800245c <error>
 8002480:	4770      	bx	lr

08002482 <_swiread>:
 8002482:	b530      	push	{r4, r5, lr}
 8002484:	b085      	sub	sp, #20
 8002486:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800248a:	9203      	str	r2, [sp, #12]
 800248c:	2406      	movs	r4, #6
 800248e:	ad01      	add	r5, sp, #4
 8002490:	4620      	mov	r0, r4
 8002492:	4629      	mov	r1, r5
 8002494:	beab      	bkpt	0x00ab
 8002496:	4604      	mov	r4, r0
 8002498:	4620      	mov	r0, r4
 800249a:	f7ff ffed 	bl	8002478 <checkerror>
 800249e:	b005      	add	sp, #20
 80024a0:	bd30      	pop	{r4, r5, pc}

080024a2 <_read>:
 80024a2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80024a4:	4615      	mov	r5, r2
 80024a6:	9101      	str	r1, [sp, #4]
 80024a8:	f7ff ffbe 	bl	8002428 <findslot>
 80024ac:	9901      	ldr	r1, [sp, #4]
 80024ae:	4604      	mov	r4, r0
 80024b0:	b938      	cbnz	r0, 80024c2 <_read+0x20>
 80024b2:	f7fe ff83 	bl	80013bc <__errno>
 80024b6:	2309      	movs	r3, #9
 80024b8:	6003      	str	r3, [r0, #0]
 80024ba:	f04f 30ff 	mov.w	r0, #4294967295
 80024be:	b003      	add	sp, #12
 80024c0:	bd30      	pop	{r4, r5, pc}
 80024c2:	6800      	ldr	r0, [r0, #0]
 80024c4:	462a      	mov	r2, r5
 80024c6:	f7ff ffdc 	bl	8002482 <_swiread>
 80024ca:	1c43      	adds	r3, r0, #1
 80024cc:	d0f7      	beq.n	80024be <_read+0x1c>
 80024ce:	6863      	ldr	r3, [r4, #4]
 80024d0:	1a2a      	subs	r2, r5, r0
 80024d2:	4413      	add	r3, r2
 80024d4:	6063      	str	r3, [r4, #4]
 80024d6:	4610      	mov	r0, r2
 80024d8:	e7f1      	b.n	80024be <_read+0x1c>

080024da <_swilseek>:
 80024da:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80024dc:	460c      	mov	r4, r1
 80024de:	4616      	mov	r6, r2
 80024e0:	f7ff ffa2 	bl	8002428 <findslot>
 80024e4:	4605      	mov	r5, r0
 80024e6:	b940      	cbnz	r0, 80024fa <_swilseek+0x20>
 80024e8:	f7fe ff68 	bl	80013bc <__errno>
 80024ec:	2309      	movs	r3, #9
 80024ee:	6003      	str	r3, [r0, #0]
 80024f0:	f04f 34ff 	mov.w	r4, #4294967295
 80024f4:	4620      	mov	r0, r4
 80024f6:	b003      	add	sp, #12
 80024f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024fa:	2e02      	cmp	r6, #2
 80024fc:	d903      	bls.n	8002506 <_swilseek+0x2c>
 80024fe:	f7fe ff5d 	bl	80013bc <__errno>
 8002502:	2316      	movs	r3, #22
 8002504:	e7f3      	b.n	80024ee <_swilseek+0x14>
 8002506:	2e01      	cmp	r6, #1
 8002508:	d112      	bne.n	8002530 <_swilseek+0x56>
 800250a:	6843      	ldr	r3, [r0, #4]
 800250c:	18e4      	adds	r4, r4, r3
 800250e:	d4f6      	bmi.n	80024fe <_swilseek+0x24>
 8002510:	682b      	ldr	r3, [r5, #0]
 8002512:	260a      	movs	r6, #10
 8002514:	e9cd 3400 	strd	r3, r4, [sp]
 8002518:	466f      	mov	r7, sp
 800251a:	4630      	mov	r0, r6
 800251c:	4639      	mov	r1, r7
 800251e:	beab      	bkpt	0x00ab
 8002520:	4606      	mov	r6, r0
 8002522:	4630      	mov	r0, r6
 8002524:	f7ff ffa8 	bl	8002478 <checkerror>
 8002528:	2800      	cmp	r0, #0
 800252a:	dbe1      	blt.n	80024f0 <_swilseek+0x16>
 800252c:	606c      	str	r4, [r5, #4]
 800252e:	e7e1      	b.n	80024f4 <_swilseek+0x1a>
 8002530:	2e02      	cmp	r6, #2
 8002532:	d1ed      	bne.n	8002510 <_swilseek+0x36>
 8002534:	6803      	ldr	r3, [r0, #0]
 8002536:	9300      	str	r3, [sp, #0]
 8002538:	260c      	movs	r6, #12
 800253a:	466f      	mov	r7, sp
 800253c:	4630      	mov	r0, r6
 800253e:	4639      	mov	r1, r7
 8002540:	beab      	bkpt	0x00ab
 8002542:	4606      	mov	r6, r0
 8002544:	4630      	mov	r0, r6
 8002546:	f7ff ff97 	bl	8002478 <checkerror>
 800254a:	1c43      	adds	r3, r0, #1
 800254c:	d0d0      	beq.n	80024f0 <_swilseek+0x16>
 800254e:	4404      	add	r4, r0
 8002550:	e7de      	b.n	8002510 <_swilseek+0x36>

08002552 <_lseek>:
 8002552:	f7ff bfc2 	b.w	80024da <_swilseek>

08002556 <_swiwrite>:
 8002556:	b530      	push	{r4, r5, lr}
 8002558:	b085      	sub	sp, #20
 800255a:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800255e:	9203      	str	r2, [sp, #12]
 8002560:	2405      	movs	r4, #5
 8002562:	ad01      	add	r5, sp, #4
 8002564:	4620      	mov	r0, r4
 8002566:	4629      	mov	r1, r5
 8002568:	beab      	bkpt	0x00ab
 800256a:	4604      	mov	r4, r0
 800256c:	4620      	mov	r0, r4
 800256e:	f7ff ff83 	bl	8002478 <checkerror>
 8002572:	b005      	add	sp, #20
 8002574:	bd30      	pop	{r4, r5, pc}

08002576 <_write>:
 8002576:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002578:	4615      	mov	r5, r2
 800257a:	9101      	str	r1, [sp, #4]
 800257c:	f7ff ff54 	bl	8002428 <findslot>
 8002580:	9901      	ldr	r1, [sp, #4]
 8002582:	4604      	mov	r4, r0
 8002584:	b930      	cbnz	r0, 8002594 <_write+0x1e>
 8002586:	f7fe ff19 	bl	80013bc <__errno>
 800258a:	2309      	movs	r3, #9
 800258c:	6003      	str	r3, [r0, #0]
 800258e:	f04f 30ff 	mov.w	r0, #4294967295
 8002592:	e012      	b.n	80025ba <_write+0x44>
 8002594:	6800      	ldr	r0, [r0, #0]
 8002596:	462a      	mov	r2, r5
 8002598:	f7ff ffdd 	bl	8002556 <_swiwrite>
 800259c:	2800      	cmp	r0, #0
 800259e:	dbf6      	blt.n	800258e <_write+0x18>
 80025a0:	6862      	ldr	r2, [r4, #4]
 80025a2:	1a2b      	subs	r3, r5, r0
 80025a4:	441a      	add	r2, r3
 80025a6:	42a8      	cmp	r0, r5
 80025a8:	6062      	str	r2, [r4, #4]
 80025aa:	d105      	bne.n	80025b8 <_write+0x42>
 80025ac:	2000      	movs	r0, #0
 80025ae:	b003      	add	sp, #12
 80025b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80025b4:	f7ff bf52 	b.w	800245c <error>
 80025b8:	4618      	mov	r0, r3
 80025ba:	b003      	add	sp, #12
 80025bc:	bd30      	pop	{r4, r5, pc}

080025be <_swiclose>:
 80025be:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80025c0:	2402      	movs	r4, #2
 80025c2:	9001      	str	r0, [sp, #4]
 80025c4:	ad01      	add	r5, sp, #4
 80025c6:	4620      	mov	r0, r4
 80025c8:	4629      	mov	r1, r5
 80025ca:	beab      	bkpt	0x00ab
 80025cc:	4604      	mov	r4, r0
 80025ce:	4620      	mov	r0, r4
 80025d0:	f7ff ff52 	bl	8002478 <checkerror>
 80025d4:	b003      	add	sp, #12
 80025d6:	bd30      	pop	{r4, r5, pc}

080025d8 <_close>:
 80025d8:	b538      	push	{r3, r4, r5, lr}
 80025da:	4605      	mov	r5, r0
 80025dc:	f7ff ff24 	bl	8002428 <findslot>
 80025e0:	4604      	mov	r4, r0
 80025e2:	b930      	cbnz	r0, 80025f2 <_close+0x1a>
 80025e4:	f7fe feea 	bl	80013bc <__errno>
 80025e8:	2309      	movs	r3, #9
 80025ea:	6003      	str	r3, [r0, #0]
 80025ec:	f04f 30ff 	mov.w	r0, #4294967295
 80025f0:	bd38      	pop	{r3, r4, r5, pc}
 80025f2:	3d01      	subs	r5, #1
 80025f4:	2d01      	cmp	r5, #1
 80025f6:	d809      	bhi.n	800260c <_close+0x34>
 80025f8:	4b09      	ldr	r3, [pc, #36]	; (8002620 <_close+0x48>)
 80025fa:	689a      	ldr	r2, [r3, #8]
 80025fc:	691b      	ldr	r3, [r3, #16]
 80025fe:	429a      	cmp	r2, r3
 8002600:	d104      	bne.n	800260c <_close+0x34>
 8002602:	f04f 33ff 	mov.w	r3, #4294967295
 8002606:	6003      	str	r3, [r0, #0]
 8002608:	2000      	movs	r0, #0
 800260a:	e7f1      	b.n	80025f0 <_close+0x18>
 800260c:	6820      	ldr	r0, [r4, #0]
 800260e:	f7ff ffd6 	bl	80025be <_swiclose>
 8002612:	2800      	cmp	r0, #0
 8002614:	d1ec      	bne.n	80025f0 <_close+0x18>
 8002616:	f04f 33ff 	mov.w	r3, #4294967295
 800261a:	6023      	str	r3, [r4, #0]
 800261c:	e7e8      	b.n	80025f0 <_close+0x18>
 800261e:	bf00      	nop
 8002620:	200000fc 	.word	0x200000fc

08002624 <_swistat>:
 8002624:	b570      	push	{r4, r5, r6, lr}
 8002626:	460c      	mov	r4, r1
 8002628:	f7ff fefe 	bl	8002428 <findslot>
 800262c:	4605      	mov	r5, r0
 800262e:	b930      	cbnz	r0, 800263e <_swistat+0x1a>
 8002630:	f7fe fec4 	bl	80013bc <__errno>
 8002634:	2309      	movs	r3, #9
 8002636:	6003      	str	r3, [r0, #0]
 8002638:	f04f 30ff 	mov.w	r0, #4294967295
 800263c:	bd70      	pop	{r4, r5, r6, pc}
 800263e:	6863      	ldr	r3, [r4, #4]
 8002640:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002644:	6063      	str	r3, [r4, #4]
 8002646:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800264a:	64a3      	str	r3, [r4, #72]	; 0x48
 800264c:	260c      	movs	r6, #12
 800264e:	4630      	mov	r0, r6
 8002650:	4629      	mov	r1, r5
 8002652:	beab      	bkpt	0x00ab
 8002654:	4605      	mov	r5, r0
 8002656:	4628      	mov	r0, r5
 8002658:	f7ff ff0e 	bl	8002478 <checkerror>
 800265c:	1c43      	adds	r3, r0, #1
 800265e:	bf1c      	itt	ne
 8002660:	6120      	strne	r0, [r4, #16]
 8002662:	2000      	movne	r0, #0
 8002664:	e7ea      	b.n	800263c <_swistat+0x18>

08002666 <_fstat>:
 8002666:	460b      	mov	r3, r1
 8002668:	b510      	push	{r4, lr}
 800266a:	2100      	movs	r1, #0
 800266c:	4604      	mov	r4, r0
 800266e:	2258      	movs	r2, #88	; 0x58
 8002670:	4618      	mov	r0, r3
 8002672:	f7fe fecd 	bl	8001410 <memset>
 8002676:	4601      	mov	r1, r0
 8002678:	4620      	mov	r0, r4
 800267a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800267e:	f7ff bfd1 	b.w	8002624 <_swistat>

08002682 <_stat>:
 8002682:	b538      	push	{r3, r4, r5, lr}
 8002684:	460d      	mov	r5, r1
 8002686:	4604      	mov	r4, r0
 8002688:	2258      	movs	r2, #88	; 0x58
 800268a:	2100      	movs	r1, #0
 800268c:	4628      	mov	r0, r5
 800268e:	f7fe febf 	bl	8001410 <memset>
 8002692:	4620      	mov	r0, r4
 8002694:	2100      	movs	r1, #0
 8002696:	f000 f811 	bl	80026bc <_swiopen>
 800269a:	1c43      	adds	r3, r0, #1
 800269c:	4604      	mov	r4, r0
 800269e:	d00b      	beq.n	80026b8 <_stat+0x36>
 80026a0:	686b      	ldr	r3, [r5, #4]
 80026a2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80026a6:	606b      	str	r3, [r5, #4]
 80026a8:	4629      	mov	r1, r5
 80026aa:	f7ff ffbb 	bl	8002624 <_swistat>
 80026ae:	4605      	mov	r5, r0
 80026b0:	4620      	mov	r0, r4
 80026b2:	f7ff ff91 	bl	80025d8 <_close>
 80026b6:	462c      	mov	r4, r5
 80026b8:	4620      	mov	r0, r4
 80026ba:	bd38      	pop	{r3, r4, r5, pc}

080026bc <_swiopen>:
 80026bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80026c0:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 800276c <_swiopen+0xb0>
 80026c4:	b097      	sub	sp, #92	; 0x5c
 80026c6:	4607      	mov	r7, r0
 80026c8:	460e      	mov	r6, r1
 80026ca:	2500      	movs	r5, #0
 80026cc:	f858 4035 	ldr.w	r4, [r8, r5, lsl #3]
 80026d0:	1c61      	adds	r1, r4, #1
 80026d2:	d037      	beq.n	8002744 <_swiopen+0x88>
 80026d4:	3501      	adds	r5, #1
 80026d6:	2d14      	cmp	r5, #20
 80026d8:	d1f8      	bne.n	80026cc <_swiopen+0x10>
 80026da:	f7fe fe6f 	bl	80013bc <__errno>
 80026de:	2318      	movs	r3, #24
 80026e0:	6003      	str	r3, [r0, #0]
 80026e2:	f04f 34ff 	mov.w	r4, #4294967295
 80026e6:	e03d      	b.n	8002764 <_swiopen+0xa8>
 80026e8:	f3c6 4400 	ubfx	r4, r6, #16, #1
 80026ec:	f240 6301 	movw	r3, #1537	; 0x601
 80026f0:	07b2      	lsls	r2, r6, #30
 80026f2:	bf48      	it	mi
 80026f4:	f044 0402 	orrmi.w	r4, r4, #2
 80026f8:	421e      	tst	r6, r3
 80026fa:	bf18      	it	ne
 80026fc:	f044 0404 	orrne.w	r4, r4, #4
 8002700:	0733      	lsls	r3, r6, #28
 8002702:	bf48      	it	mi
 8002704:	f024 0404 	bicmi.w	r4, r4, #4
 8002708:	4638      	mov	r0, r7
 800270a:	bf48      	it	mi
 800270c:	f044 0408 	orrmi.w	r4, r4, #8
 8002710:	9700      	str	r7, [sp, #0]
 8002712:	f7fd fdbd 	bl	8000290 <strlen>
 8002716:	e9cd 4001 	strd	r4, r0, [sp, #4]
 800271a:	2401      	movs	r4, #1
 800271c:	4620      	mov	r0, r4
 800271e:	4649      	mov	r1, r9
 8002720:	beab      	bkpt	0x00ab
 8002722:	4604      	mov	r4, r0
 8002724:	2c00      	cmp	r4, #0
 8002726:	db08      	blt.n	800273a <_swiopen+0x7e>
 8002728:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 800272c:	eb08 08c5 	add.w	r8, r8, r5, lsl #3
 8002730:	2300      	movs	r3, #0
 8002732:	f8c8 3004 	str.w	r3, [r8, #4]
 8002736:	462c      	mov	r4, r5
 8002738:	e014      	b.n	8002764 <_swiopen+0xa8>
 800273a:	4620      	mov	r0, r4
 800273c:	f7ff fe8e 	bl	800245c <error>
 8002740:	4604      	mov	r4, r0
 8002742:	e00f      	b.n	8002764 <_swiopen+0xa8>
 8002744:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 8002748:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800274c:	46e9      	mov	r9, sp
 800274e:	d1cb      	bne.n	80026e8 <_swiopen+0x2c>
 8002750:	4649      	mov	r1, r9
 8002752:	4638      	mov	r0, r7
 8002754:	f7ff ff95 	bl	8002682 <_stat>
 8002758:	3001      	adds	r0, #1
 800275a:	d0c5      	beq.n	80026e8 <_swiopen+0x2c>
 800275c:	f7fe fe2e 	bl	80013bc <__errno>
 8002760:	2311      	movs	r3, #17
 8002762:	6003      	str	r3, [r0, #0]
 8002764:	4620      	mov	r0, r4
 8002766:	b017      	add	sp, #92	; 0x5c
 8002768:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800276c:	200000fc 	.word	0x200000fc

08002770 <_get_semihosting_exts>:
 8002770:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002774:	4606      	mov	r6, r0
 8002776:	460f      	mov	r7, r1
 8002778:	482a      	ldr	r0, [pc, #168]	; (8002824 <_get_semihosting_exts+0xb4>)
 800277a:	2100      	movs	r1, #0
 800277c:	4615      	mov	r5, r2
 800277e:	f7ff ff9d 	bl	80026bc <_swiopen>
 8002782:	462a      	mov	r2, r5
 8002784:	4604      	mov	r4, r0
 8002786:	2100      	movs	r1, #0
 8002788:	4630      	mov	r0, r6
 800278a:	f7fe fe41 	bl	8001410 <memset>
 800278e:	1c63      	adds	r3, r4, #1
 8002790:	d016      	beq.n	80027c0 <_get_semihosting_exts+0x50>
 8002792:	4620      	mov	r0, r4
 8002794:	f7ff fe48 	bl	8002428 <findslot>
 8002798:	f04f 090c 	mov.w	r9, #12
 800279c:	4680      	mov	r8, r0
 800279e:	4648      	mov	r0, r9
 80027a0:	4641      	mov	r1, r8
 80027a2:	beab      	bkpt	0x00ab
 80027a4:	4680      	mov	r8, r0
 80027a6:	4640      	mov	r0, r8
 80027a8:	f7ff fe66 	bl	8002478 <checkerror>
 80027ac:	2803      	cmp	r0, #3
 80027ae:	dd02      	ble.n	80027b6 <_get_semihosting_exts+0x46>
 80027b0:	1ec3      	subs	r3, r0, #3
 80027b2:	42ab      	cmp	r3, r5
 80027b4:	dc08      	bgt.n	80027c8 <_get_semihosting_exts+0x58>
 80027b6:	4620      	mov	r0, r4
 80027b8:	f7ff ff0e 	bl	80025d8 <_close>
 80027bc:	f04f 34ff 	mov.w	r4, #4294967295
 80027c0:	4620      	mov	r0, r4
 80027c2:	b003      	add	sp, #12
 80027c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80027c8:	2204      	movs	r2, #4
 80027ca:	eb0d 0102 	add.w	r1, sp, r2
 80027ce:	4620      	mov	r0, r4
 80027d0:	f7ff fe67 	bl	80024a2 <_read>
 80027d4:	2803      	cmp	r0, #3
 80027d6:	ddee      	ble.n	80027b6 <_get_semihosting_exts+0x46>
 80027d8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80027dc:	2b53      	cmp	r3, #83	; 0x53
 80027de:	d1ea      	bne.n	80027b6 <_get_semihosting_exts+0x46>
 80027e0:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80027e4:	2b48      	cmp	r3, #72	; 0x48
 80027e6:	d1e6      	bne.n	80027b6 <_get_semihosting_exts+0x46>
 80027e8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80027ec:	2b46      	cmp	r3, #70	; 0x46
 80027ee:	d1e2      	bne.n	80027b6 <_get_semihosting_exts+0x46>
 80027f0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80027f4:	2b42      	cmp	r3, #66	; 0x42
 80027f6:	d1de      	bne.n	80027b6 <_get_semihosting_exts+0x46>
 80027f8:	2201      	movs	r2, #1
 80027fa:	4639      	mov	r1, r7
 80027fc:	4620      	mov	r0, r4
 80027fe:	f7ff fe6c 	bl	80024da <_swilseek>
 8002802:	2800      	cmp	r0, #0
 8002804:	dbd7      	blt.n	80027b6 <_get_semihosting_exts+0x46>
 8002806:	462a      	mov	r2, r5
 8002808:	4631      	mov	r1, r6
 800280a:	4620      	mov	r0, r4
 800280c:	f7ff fe49 	bl	80024a2 <_read>
 8002810:	4605      	mov	r5, r0
 8002812:	4620      	mov	r0, r4
 8002814:	f7ff fee0 	bl	80025d8 <_close>
 8002818:	4628      	mov	r0, r5
 800281a:	f7ff fe2d 	bl	8002478 <checkerror>
 800281e:	4604      	mov	r4, r0
 8002820:	e7ce      	b.n	80027c0 <_get_semihosting_exts+0x50>
 8002822:	bf00      	nop
 8002824:	08002b1f 	.word	0x08002b1f

08002828 <initialise_semihosting_exts>:
 8002828:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800282a:	4d0a      	ldr	r5, [pc, #40]	; (8002854 <initialise_semihosting_exts+0x2c>)
 800282c:	4c0a      	ldr	r4, [pc, #40]	; (8002858 <initialise_semihosting_exts+0x30>)
 800282e:	2100      	movs	r1, #0
 8002830:	2201      	movs	r2, #1
 8002832:	a801      	add	r0, sp, #4
 8002834:	6029      	str	r1, [r5, #0]
 8002836:	6022      	str	r2, [r4, #0]
 8002838:	f7ff ff9a 	bl	8002770 <_get_semihosting_exts>
 800283c:	2800      	cmp	r0, #0
 800283e:	dd07      	ble.n	8002850 <initialise_semihosting_exts+0x28>
 8002840:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002844:	f003 0201 	and.w	r2, r3, #1
 8002848:	f003 0302 	and.w	r3, r3, #2
 800284c:	602a      	str	r2, [r5, #0]
 800284e:	6023      	str	r3, [r4, #0]
 8002850:	b003      	add	sp, #12
 8002852:	bd30      	pop	{r4, r5, pc}
 8002854:	20000078 	.word	0x20000078
 8002858:	2000007c 	.word	0x2000007c

0800285c <_has_ext_stdout_stderr>:
 800285c:	b510      	push	{r4, lr}
 800285e:	4c04      	ldr	r4, [pc, #16]	; (8002870 <_has_ext_stdout_stderr+0x14>)
 8002860:	6823      	ldr	r3, [r4, #0]
 8002862:	2b00      	cmp	r3, #0
 8002864:	da01      	bge.n	800286a <_has_ext_stdout_stderr+0xe>
 8002866:	f7ff ffdf 	bl	8002828 <initialise_semihosting_exts>
 800286a:	6820      	ldr	r0, [r4, #0]
 800286c:	bd10      	pop	{r4, pc}
 800286e:	bf00      	nop
 8002870:	2000007c 	.word	0x2000007c

08002874 <initialise_monitor_handles>:
 8002874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002878:	b085      	sub	sp, #20
 800287a:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 800292c <initialise_monitor_handles+0xb8>
 800287e:	f8cd 9004 	str.w	r9, [sp, #4]
 8002882:	2303      	movs	r3, #3
 8002884:	2400      	movs	r4, #0
 8002886:	9303      	str	r3, [sp, #12]
 8002888:	af01      	add	r7, sp, #4
 800288a:	9402      	str	r4, [sp, #8]
 800288c:	2501      	movs	r5, #1
 800288e:	4628      	mov	r0, r5
 8002890:	4639      	mov	r1, r7
 8002892:	beab      	bkpt	0x00ab
 8002894:	4605      	mov	r5, r0
 8002896:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8002930 <initialise_monitor_handles+0xbc>
 800289a:	4623      	mov	r3, r4
 800289c:	4c20      	ldr	r4, [pc, #128]	; (8002920 <initialise_monitor_handles+0xac>)
 800289e:	f8c8 5000 	str.w	r5, [r8]
 80028a2:	f04f 32ff 	mov.w	r2, #4294967295
 80028a6:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 80028aa:	3301      	adds	r3, #1
 80028ac:	2b14      	cmp	r3, #20
 80028ae:	d1fa      	bne.n	80028a6 <initialise_monitor_handles+0x32>
 80028b0:	f7ff ffd4 	bl	800285c <_has_ext_stdout_stderr>
 80028b4:	4d1b      	ldr	r5, [pc, #108]	; (8002924 <initialise_monitor_handles+0xb0>)
 80028b6:	b1d0      	cbz	r0, 80028ee <initialise_monitor_handles+0x7a>
 80028b8:	f04f 0a03 	mov.w	sl, #3
 80028bc:	2304      	movs	r3, #4
 80028be:	f8cd 9004 	str.w	r9, [sp, #4]
 80028c2:	2601      	movs	r6, #1
 80028c4:	f8cd a00c 	str.w	sl, [sp, #12]
 80028c8:	9302      	str	r3, [sp, #8]
 80028ca:	4630      	mov	r0, r6
 80028cc:	4639      	mov	r1, r7
 80028ce:	beab      	bkpt	0x00ab
 80028d0:	4683      	mov	fp, r0
 80028d2:	4b15      	ldr	r3, [pc, #84]	; (8002928 <initialise_monitor_handles+0xb4>)
 80028d4:	f8cd 9004 	str.w	r9, [sp, #4]
 80028d8:	f8c3 b000 	str.w	fp, [r3]
 80028dc:	2308      	movs	r3, #8
 80028de:	f8cd a00c 	str.w	sl, [sp, #12]
 80028e2:	9302      	str	r3, [sp, #8]
 80028e4:	4630      	mov	r0, r6
 80028e6:	4639      	mov	r1, r7
 80028e8:	beab      	bkpt	0x00ab
 80028ea:	4606      	mov	r6, r0
 80028ec:	602e      	str	r6, [r5, #0]
 80028ee:	682b      	ldr	r3, [r5, #0]
 80028f0:	3301      	adds	r3, #1
 80028f2:	bf02      	ittt	eq
 80028f4:	4b0c      	ldreq	r3, [pc, #48]	; (8002928 <initialise_monitor_handles+0xb4>)
 80028f6:	681b      	ldreq	r3, [r3, #0]
 80028f8:	602b      	streq	r3, [r5, #0]
 80028fa:	2600      	movs	r6, #0
 80028fc:	f8d8 3000 	ldr.w	r3, [r8]
 8002900:	6023      	str	r3, [r4, #0]
 8002902:	6066      	str	r6, [r4, #4]
 8002904:	f7ff ffaa 	bl	800285c <_has_ext_stdout_stderr>
 8002908:	b130      	cbz	r0, 8002918 <initialise_monitor_handles+0xa4>
 800290a:	4b07      	ldr	r3, [pc, #28]	; (8002928 <initialise_monitor_handles+0xb4>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8002912:	682b      	ldr	r3, [r5, #0]
 8002914:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8002918:	b005      	add	sp, #20
 800291a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800291e:	bf00      	nop
 8002920:	200000fc 	.word	0x200000fc
 8002924:	200000f0 	.word	0x200000f0
 8002928:	200000f8 	.word	0x200000f8
 800292c:	08002b35 	.word	0x08002b35
 8002930:	200000f4 	.word	0x200000f4

08002934 <_isatty>:
 8002934:	b570      	push	{r4, r5, r6, lr}
 8002936:	f7ff fd77 	bl	8002428 <findslot>
 800293a:	2509      	movs	r5, #9
 800293c:	4604      	mov	r4, r0
 800293e:	b920      	cbnz	r0, 800294a <_isatty+0x16>
 8002940:	f7fe fd3c 	bl	80013bc <__errno>
 8002944:	6005      	str	r5, [r0, #0]
 8002946:	4620      	mov	r0, r4
 8002948:	bd70      	pop	{r4, r5, r6, pc}
 800294a:	4628      	mov	r0, r5
 800294c:	4621      	mov	r1, r4
 800294e:	beab      	bkpt	0x00ab
 8002950:	4604      	mov	r4, r0
 8002952:	2c01      	cmp	r4, #1
 8002954:	d0f7      	beq.n	8002946 <_isatty+0x12>
 8002956:	f7fe fd31 	bl	80013bc <__errno>
 800295a:	2400      	movs	r4, #0
 800295c:	4605      	mov	r5, r0
 800295e:	2613      	movs	r6, #19
 8002960:	4630      	mov	r0, r6
 8002962:	4621      	mov	r1, r4
 8002964:	beab      	bkpt	0x00ab
 8002966:	4606      	mov	r6, r0
 8002968:	602e      	str	r6, [r5, #0]
 800296a:	e7ec      	b.n	8002946 <_isatty+0x12>

0800296c <_init>:
 800296c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800296e:	bf00      	nop
 8002970:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002972:	bc08      	pop	{r3}
 8002974:	469e      	mov	lr, r3
 8002976:	4770      	bx	lr

08002978 <_fini>:
 8002978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800297a:	bf00      	nop
 800297c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800297e:	bc08      	pop	{r3}
 8002980:	469e      	mov	lr, r3
 8002982:	4770      	bx	lr
